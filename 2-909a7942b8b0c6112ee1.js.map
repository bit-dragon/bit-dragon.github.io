{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_typed-array.js","webpack:///./node_modules/three.js/shim.js","webpack:///./node_modules/core-js/modules/_typed.js","webpack:///./node_modules/core-js/modules/es6.string.sub.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/core-js/modules/es6.math.sign.js","webpack:///./node_modules/core-js/modules/_math-sign.js","webpack:///./node_modules/core-js/modules/_typed-buffer.js","webpack:///./node_modules/core-js/modules/_to-index.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./node_modules/three/three.js","webpack:///./node_modules/core-js/modules/es6.array.last-index-of.js","webpack:///./node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/core-js/modules/es6.typed.data-view.js","webpack:///./node_modules/core-js/modules/es6.typed.float64-array.js","webpack:///./node_modules/core-js/modules/_array-copy-within.js","webpack:///./node_modules/core-js/modules/es6.typed.uint32-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int32-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","webpack:///./node_modules/core-js/modules/es6.typed.uint8-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int8-array.js","webpack:///./node_modules/core-js/modules/es6.date.to-json.js","webpack:///./node_modules/core-js/modules/es6.object.define-properties.js","webpack:///./node_modules/core-js/modules/es6.typed.float32-array.js","webpack:///./node_modules/core-js/modules/es6.number.constructor.js","webpack:///./node_modules/core-js/modules/es6.number.epsilon.js"],"names":["__webpack_require__","LIBRARY","global","fails","$export","$typed","$buffer","ctx","anInstance","propertyDesc","hide","redefineAll","toInteger","toLength","toIndex","toAbsoluteIndex","toPrimitive","has","classof","isObject","toObject","isArrayIter","create","getPrototypeOf","gOPN","f","getIterFn","uid","wks","createArrayMethod","createArrayIncludes","speciesConstructor","ArrayIterators","Iterators","$iterDetect","setSpecies","arrayFill","arrayCopyWithin","$DP","$GOPD","dP","gOPD","RangeError","TypeError","Uint8Array","ArrayProto","Array","$ArrayBuffer","ArrayBuffer","$DataView","DataView","arrayForEach","arrayFilter","arraySome","arrayEvery","arrayFind","arrayFindIndex","arrayIncludes","arrayIndexOf","arrayValues","values","arrayKeys","keys","arrayEntries","entries","arrayLastIndexOf","lastIndexOf","arrayReduce","reduce","arrayReduceRight","reduceRight","arrayJoin","join","arraySort","sort","arraySlice","slice","arrayToString","toString","arrayToLocaleString","toLocaleString","ITERATOR","TAG","TYPED_CONSTRUCTOR","DEF_CONSTRUCTOR","ALL_CONSTRUCTORS","CONSTR","TYPED_ARRAY","TYPED","VIEW","$map","O","length","allocate","LITTLE_ENDIAN","Uint16Array","buffer","FORCED_SET","set","toOffset","it","BYTES","offset","validate","C","speciesFromList","list","fromList","index","result","addGetter","key","internal","get","this","_d","$from","source","i","step","iterator","aLen","arguments","mapfn","undefined","mapping","iterFn","call","next","done","push","value","$of","TO_LOCALE_BUG","$toLocaleString","apply","proto","copyWithin","target","start","every","callbackfn","fill","filter","find","predicate","findIndex","forEach","indexOf","searchElement","includes","separator","map","reverse","middle","Math","floor","some","comparefn","subarray","begin","end","$begin","byteOffset","BYTES_PER_ELEMENT","$slice","$set","arrayLike","src","len","$iterators","isTAIndex","String","$getDesc","$setDesc","desc","configurable","writable","enumerable","S","F","getOwnPropertyDescriptor","defineProperty","$TypedArrayPrototype$","constructor","module","exports","KEY","wrapper","CLAMPED","NAME","GETTER","SETTER","TypedArray","Base","TAC","FORCED","ABV","TypedArrayPrototype","addElement","that","data","v","o","getter","round","setter","$offset","$length","byteLength","klass","$len","b","l","e","iter","Function","prototype","concat","$nativeIterator","CORRECT_ITER_NAME","name","$iterator","G","W","of","from","P","THREE","console","warn","Typed","TypedArrayConstructors","split","createHTML","defined","quot","string","tag","attribute","p1","replace","exec","test","toLowerCase","sign","x","DESCRIPTORS","setToStringTag","PROTOTYPE","WRONG_INDEX","Infinity","BaseBuffer","abs","pow","log","LN2","$BUFFER","$LENGTH","$OFFSET","packIEEE754","mLen","nBytes","m","c","eLen","eMax","eBias","rt","s","unpackIEEE754","nBits","NaN","unpackI32","bytes","packI8","packI16","packI32","packF64","packF32","view","isLittleEndian","intIndex","store","_b","pack","conversion","ArrayBufferProto","j","$setInt8","setInt8","getInt8","setUint8","bufferLength","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","number","endPos","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","v1","r","min","max","matrix","quaternion","q","startP","startEnd","points","closestPoint","y","z","segCenter","segDir","diff","box","p2","sphere","v0","position","scale","m1","q1","obj","context","focus","fov","aspect","near","far","eyeRight","eyeLeft","color","textureLoader","materialLoader","offsetMatrix","matrixPosition","radians","axis","vector","REVISION","Number","EPSILON","Object","match","assign","output","nextKey","hasOwnProperty","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","g","setRGB","copy","setHex","setStyle","setScalar","scalar","hex","setHSL","hue2rgb","p","t","h","euclideanModulo","clamp","style","handleAlpha","parseFloat","components","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","fromArray","array","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","_x","_y","_z","_w","onChangeCallback","setFromEuler","euler","update","Euler","Error","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","Vector3","dot","crossVectors","normalize","inverse","conjugate","lengthSq","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","setLength","lerpVectors","v2","fromAttribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","line","distanceSq","distance","at","closestPointToPointParameter","point","clampToLine","startEnd2","closestPointToPoint","Box2","setFromPoints","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","positions","intersectsSphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","applyToBuffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","n","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","makePerspective","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","uuid","rnd","random","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","isPowerOfTwo","nearestPowerOfTwo","nextPowerOfTwo","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","stride","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","Date","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","addEventListener","type","listener","_listeners","listeners","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","layers","ascSort","_intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","intersectObject","intersectObjects","objects","isArray","Object3D","Object3DIdCount","parent","DefaultUp","rotation","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","isRootObject","geometries","materials","textures","images","metadata","version","generator","JSON","stringify","material","extractFromCache","cache","parse","child","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","face","jl","computeBoundingBox","fromBufferGeometry","normals","uvs","uv","uvs2","uv2","tempNormals","tempUVs","tempUVs2","addFace","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","parameters","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingByName","_bindingsByRootAndName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByRoot","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","lastIndex","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","to","isTypedArray","convertArray","forceClone","isView","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","bind","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","bone","searchSkeleton","subTreeNode","searchNodeSubtree","childNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","window","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","renderer","scene","generateMipmaps","texture","activeCubeFace","render","setRenderTarget","zoom","updateProjectionMatrix","cx","cy","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","StereoCamera","cameraL","cameraR","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","AmbientLight","DirectionalLight","shadow","DirectionalLightShadow","light","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","TextureLoader","MaterialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","cached","setTimeout","request","XMLHttpRequest","overrideMimeType","open","response","status","itemEnd","itemError","responseType","withCredentials","send","itemStart","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","document","createElement","JSONLoader","statusDomElement","_statusDomElement","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","morphAnimationClips","parseAnimations","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","getGeometry","getMaterial","Scene","SkinnedMesh","Group","levels","level","addLevel","CubeTextureLoader","urls","CubeTexture","loaded","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","canvas","toDataURL","getContext","drawImage","getDataURL","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","inverseMatrix","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","checkBufferGeometryIntersection","intersection","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","WebGLRenderer","_canvas","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","opaqueObjects","opaqueObjectsLastIndex","transparentObjects","transparentObjectsLastIndex","sprites","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphTargets","maxMorphNormals","autoScaleCubemaps","_gl","_this","_currentProgram","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentScissor","_currentScissorTest","_currentViewport","_usedTextureUnits","_clearColor","_clearAlpha","_width","_height","_pixelRatio","_scissor","_scissorTest","_viewport","_frustum","_clipping","WebGLClipping","_clippingEnabled","_localClippingEnabled","_sphere","_projScreenMatrix","_vector3","_lights","ambient","directional","spot","hemi","shadows","_infoMemory","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","onContextLost","_isWebGL2","WebGL2RenderingContext","WebGLExtensions","capabilities","WebGLCapabilities","state","WebGLState","paramThreeToGL","WebGLProperties","WebGLObjects","programCache","WebGLPrograms","lightCache","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","getTargetPixelRatio","glClearColor","clearColor","setDefaultGLState","init","scissor","viewport","resetGLState","shadowMap","WebGLShadowMap","warned","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","preventDefault","onTextureDispose","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","deallocateTexture","onRenderTargetDispose","renderTargetProperties","depthTexture","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","program","releaseProgram","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","renderItem","isSphereViewable","numPlanes","negRad","renderObjects","renderList","ImmediateRenderObject","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","materialProperties","useCache","setState","numClippingPlanes","lightsHash","getParameters","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","getAttributes","numSupportedMorphTargets","numSupportedMorphNormals","uniform","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","initMaterial","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","refreshUniformsFog","uvScaleMap","WebGLRenderTarget","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","clientHeight","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsStandard","refreshUniformsPhysical","upload","dynUniforms","evalDynamic","setTextureParameters","textureType","isPowerOfTwoImage","extension","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","uploadTexture","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","clampToMaxSize","maxTextureSize","textureNeedsPowerOfTwo","HTMLImageElement","HTMLCanvasElement","makePowerOfTwo","glFormat","glType","mipmap","internalFormat","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","texImage2D","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","__version","maxSize","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","setSize","getSize","updateStyle","setViewport","setScissor","setScissorTest","_boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","initAttributes","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","startIndex","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","projectObject","isObjectViewable","groupMaterial","beginShadows","lightShadowsLength","setupShadows","ll","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","setupLights","endShadows","TEXTURE_CUBE_MAP","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","allocTextureUnit","textureUnit","maxTextures","complete","setTexture","setTextureCube","isCompressed","isDataTexture","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","getCurrentRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","setupRenderTarget","scissorTest","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","drawArraysInstancedANGLE","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","deleteAttribute","deleteAttributes","property","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","updateAttribute","attributeProperties","usage","STATIC_DRAW","bufferSubData","updateBuffer","checkEdge","edges","TypeArray","WebGLProgram","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","flatShading","generateExtensions","customDefines","generateDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","getProgramParameter","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","nClipPlanes","nVertexUniforms","allocateBones","currentRenderTarget","envMapMode","pl","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lines","addLineNumbers","_renderer","_state","_lightShadows","_shadowMapSize","_lookTarget","_lightPositionWorld","_renderList","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","useMorphing","useSkinning","depthMaterial","distanceMaterial","USE_SHADOWMAP","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","faceCount","BLEND","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","webglSlot","webglType","webglTexture","boundTexture","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","tex","setValueT6a","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","spritePosition","spriteRotation","spriteScale","uvOffset","uvScale","fogType","fillStyle","fillRect","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","_boolean2","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","cCROSSap","bCROSScp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","seg1Pt","seg2Pt","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","shape","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","indepHoles","intersectsHoleEdge","ihIdx","chkHole","hIdx","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","minShapeIndex","counter","h2","removeHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","__arcLengthDivisions","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPath","glyph","glyphs","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","Path","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","resolution","ret","createPaths","shapes","toShapes","fromPoints","args","lastargs","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","lastPoint","item","spts","spline","deltaAngle","tdivisions","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","subPaths","inActions","lastPath","extractSubpaths","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","BoxBufferGeometry","CubeGeometry","vertexCount","calculateVertexCount","indexCount","vertexBufferOffset","uvBufferOffset","indexBufferOffset","numberOfVertices","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","calculateIndexCount","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","tanTheta","indexRow","i3","generateTorso","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","thresholdDot","edge","sortFunction","vert1","vert2","face1","face2","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","amount","bevelThickness","bevelSize","bevelSegments","bevelEnabled","curveSegments","steps","extrudePath","extrudeByPath","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","smallest","tz","mat","MAX_VALUE","initialNormal3","PolyhedronGeometry","prepare","centroid","subdivide","azimuth","inclination","make","azi","correctUV","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","pointMap","addLine","addPoint","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","toIObject","$native","NEGATIVE_ZERO","str","res","inc","toISOString","pv","cof","inheritIfRequired","$trim","$Number","BROKEN_COF","TRIM","toNumber","argument","third","radix","maxCode","first","charCodeAt","digits","valueOf"],"mappings":"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","file":"2-909a7942b8b0c6112ee1.js","sourcesContent":["'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","var THREE = require('three');\n\nconsole.warn(\"WARNING: The 'three.js' npm package is deprecated in favor of the 'three' npm package, please upgrade.\");\n\nif (typeof exports !== 'undefined') {\n  if (typeof module !== 'undefined' && module.exports) {\n    exports = module.exports = THREE;\n  }\n\n  exports.THREE = THREE;\n} else {\n  this['THREE'] = THREE;\n}","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","require(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.last-index-of\");\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.function.bind\");\n\nrequire(\"core-js/modules/es6.typed.data-view\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.typed.float64-array\");\n\nrequire(\"core-js/modules/es6.typed.uint32-array\");\n\nrequire(\"core-js/modules/es6.typed.int32-array\");\n\nrequire(\"core-js/modules/es6.typed.uint16-array\");\n\nrequire(\"core-js/modules/es6.typed.int16-array\");\n\nrequire(\"core-js/modules/es6.typed.uint8-clamped-array\");\n\nrequire(\"core-js/modules/es6.typed.uint8-array\");\n\nrequire(\"core-js/modules/es6.typed.int8-array\");\n\nrequire(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.typed.float32-array\");\n\nrequire(\"core-js/modules/es6.string.sub\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.math.sign\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.number.epsilon\");\n\nvar self = self || {}; // File:src/Three.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nvar THREE = {\n  REVISION: '77'\n}; //\n\nif (typeof define === 'function' && define.amd) {\n  define('three', THREE);\n} else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {\n  module.exports = THREE;\n} // Polyfills\n\n\nif (Number.EPSILON === undefined) {\n  Number.EPSILON = Math.pow(2, -52);\n} //\n\n\nif (Math.sign === undefined) {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n  Math.sign = function (x) {\n    return x < 0 ? -1 : x > 0 ? 1 : +x;\n  };\n}\n\nif (Function.prototype.name === undefined) {\n  // Missing in IE9-11.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n  Object.defineProperty(Function.prototype, 'name', {\n    get: function get() {\n      return this.toString().match(/^\\s*function\\s*(\\S*)\\s*\\(/)[1];\n    }\n  });\n}\n\nif (Object.assign === undefined) {\n  // Missing in IE.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n  (function () {\n    Object.assign = function (target) {\n      'use strict';\n\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var output = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n              output[nextKey] = source[nextKey];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n} //\n\n\nObject.assign(THREE, {\n  // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n  MOUSE: {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2\n  },\n  // GL STATE CONSTANTS\n  CullFaceNone: 0,\n  CullFaceBack: 1,\n  CullFaceFront: 2,\n  CullFaceFrontBack: 3,\n  FrontFaceDirectionCW: 0,\n  FrontFaceDirectionCCW: 1,\n  // SHADOWING TYPES\n  BasicShadowMap: 0,\n  PCFShadowMap: 1,\n  PCFSoftShadowMap: 2,\n  // MATERIAL CONSTANTS\n  // side\n  FrontSide: 0,\n  BackSide: 1,\n  DoubleSide: 2,\n  // shading\n  FlatShading: 1,\n  SmoothShading: 2,\n  // colors\n  NoColors: 0,\n  FaceColors: 1,\n  VertexColors: 2,\n  // blending modes\n  NoBlending: 0,\n  NormalBlending: 1,\n  AdditiveBlending: 2,\n  SubtractiveBlending: 3,\n  MultiplyBlending: 4,\n  CustomBlending: 5,\n  // custom blending equations\n  // (numbers start from 100 not to clash with other\n  // mappings to OpenGL constants defined in Texture.js)\n  AddEquation: 100,\n  SubtractEquation: 101,\n  ReverseSubtractEquation: 102,\n  MinEquation: 103,\n  MaxEquation: 104,\n  // custom blending destination factors\n  ZeroFactor: 200,\n  OneFactor: 201,\n  SrcColorFactor: 202,\n  OneMinusSrcColorFactor: 203,\n  SrcAlphaFactor: 204,\n  OneMinusSrcAlphaFactor: 205,\n  DstAlphaFactor: 206,\n  OneMinusDstAlphaFactor: 207,\n  // custom blending source factors\n  //ZeroFactor: 200,\n  //OneFactor: 201,\n  //SrcAlphaFactor: 204,\n  //OneMinusSrcAlphaFactor: 205,\n  //DstAlphaFactor: 206,\n  //OneMinusDstAlphaFactor: 207,\n  DstColorFactor: 208,\n  OneMinusDstColorFactor: 209,\n  SrcAlphaSaturateFactor: 210,\n  // depth modes\n  NeverDepth: 0,\n  AlwaysDepth: 1,\n  LessDepth: 2,\n  LessEqualDepth: 3,\n  EqualDepth: 4,\n  GreaterEqualDepth: 5,\n  GreaterDepth: 6,\n  NotEqualDepth: 7,\n  // TEXTURE CONSTANTS\n  MultiplyOperation: 0,\n  MixOperation: 1,\n  AddOperation: 2,\n  // Tone Mapping modes\n  NoToneMapping: 0,\n  // do not do any tone mapping, not even exposure (required for special purpose passes.)\n  LinearToneMapping: 1,\n  // only apply exposure.\n  ReinhardToneMapping: 2,\n  Uncharted2ToneMapping: 3,\n  // John Hable\n  CineonToneMapping: 4,\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n  // Mapping modes\n  UVMapping: 300,\n  CubeReflectionMapping: 301,\n  CubeRefractionMapping: 302,\n  EquirectangularReflectionMapping: 303,\n  EquirectangularRefractionMapping: 304,\n  SphericalReflectionMapping: 305,\n  CubeUVReflectionMapping: 306,\n  CubeUVRefractionMapping: 307,\n  // Wrapping modes\n  RepeatWrapping: 1000,\n  ClampToEdgeWrapping: 1001,\n  MirroredRepeatWrapping: 1002,\n  // Filters\n  NearestFilter: 1003,\n  NearestMipMapNearestFilter: 1004,\n  NearestMipMapLinearFilter: 1005,\n  LinearFilter: 1006,\n  LinearMipMapNearestFilter: 1007,\n  LinearMipMapLinearFilter: 1008,\n  // Data types\n  UnsignedByteType: 1009,\n  ByteType: 1010,\n  ShortType: 1011,\n  UnsignedShortType: 1012,\n  IntType: 1013,\n  UnsignedIntType: 1014,\n  FloatType: 1015,\n  HalfFloatType: 1025,\n  // Pixel types\n  //UnsignedByteType: 1009,\n  UnsignedShort4444Type: 1016,\n  UnsignedShort5551Type: 1017,\n  UnsignedShort565Type: 1018,\n  // Pixel formats\n  AlphaFormat: 1019,\n  RGBFormat: 1020,\n  RGBAFormat: 1021,\n  LuminanceFormat: 1022,\n  LuminanceAlphaFormat: 1023,\n  // THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n  RGBEFormat: THREE.RGBAFormat,\n  //1024;\n  DepthFormat: 1026,\n  // DDS / ST3C Compressed texture formats\n  RGB_S3TC_DXT1_Format: 2001,\n  RGBA_S3TC_DXT1_Format: 2002,\n  RGBA_S3TC_DXT3_Format: 2003,\n  RGBA_S3TC_DXT5_Format: 2004,\n  // PVRTC compressed texture formats\n  RGB_PVRTC_4BPPV1_Format: 2100,\n  RGB_PVRTC_2BPPV1_Format: 2101,\n  RGBA_PVRTC_4BPPV1_Format: 2102,\n  RGBA_PVRTC_2BPPV1_Format: 2103,\n  // ETC compressed texture formats\n  RGB_ETC1_Format: 2151,\n  // Loop styles for AnimationAction\n  LoopOnce: 2200,\n  LoopRepeat: 2201,\n  LoopPingPong: 2202,\n  // Interpolation\n  InterpolateDiscrete: 2300,\n  InterpolateLinear: 2301,\n  InterpolateSmooth: 2302,\n  // Interpolant ending modes\n  ZeroCurvatureEnding: 2400,\n  ZeroSlopeEnding: 2401,\n  WrapAroundEnding: 2402,\n  // Triangle Draw modes\n  TrianglesDrawMode: 0,\n  TriangleStripDrawMode: 1,\n  TriangleFanDrawMode: 2,\n  // Texture Encodings\n  LinearEncoding: 3000,\n  // No encoding at all.\n  sRGBEncoding: 3001,\n  GammaEncoding: 3007,\n  // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n  // The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n  // These encodings should not specified as output encodings except in rare situations.\n  RGBEEncoding: 3002,\n  // AKA Radiance.\n  LogLuvEncoding: 3003,\n  RGBM7Encoding: 3004,\n  RGBM16Encoding: 3005,\n  RGBDEncoding: 3006,\n  // MaxRange is 256.\n  // Depth packing strategies\n  BasicDepthPacking: 3200,\n  // for writing to float textures for high precision or for visualizing results in RGB buffers\n  RGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n}); // File:src/math/Color.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Color = function (r, g, b) {\n  if (g === undefined && b === undefined) {\n    // r is THREE.Color, hex or string\n    return this.set(r);\n  }\n\n  return this.setRGB(r, g, b);\n};\n\nTHREE.Color.prototype = {\n  constructor: THREE.Color,\n  r: 1,\n  g: 1,\n  b: 1,\n  set: function set(value) {\n    if (value instanceof THREE.Color) {\n      this.copy(value);\n    } else if (typeof value === 'number') {\n      this.setHex(value);\n    } else if (typeof value === 'string') {\n      this.setStyle(value);\n    }\n\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.r = scalar;\n    this.g = scalar;\n    this.b = scalar;\n  },\n  setHex: function setHex(hex) {\n    hex = Math.floor(hex);\n    this.r = (hex >> 16 & 255) / 255;\n    this.g = (hex >> 8 & 255) / 255;\n    this.b = (hex & 255) / 255;\n    return this;\n  },\n  setRGB: function setRGB(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    return this;\n  },\n  setHSL: function () {\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n      return p;\n    }\n\n    return function (h, s, l) {\n      // h,s,l ranges are in 0.0 - 1.0\n      h = THREE.Math.euclideanModulo(h, 1);\n      s = THREE.Math.clamp(s, 0, 1);\n      l = THREE.Math.clamp(l, 0, 1);\n\n      if (s === 0) {\n        this.r = this.g = this.b = l;\n      } else {\n        var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n        var q = 2 * l - p;\n        this.r = hue2rgb(q, p, h + 1 / 3);\n        this.g = hue2rgb(q, p, h);\n        this.b = hue2rgb(q, p, h - 1 / 3);\n      }\n\n      return this;\n    };\n  }(),\n  setStyle: function setStyle(style) {\n    function handleAlpha(string) {\n      if (string === undefined) return;\n\n      if (parseFloat(string) < 1) {\n        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n      }\n    }\n\n    var m;\n\n    if (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n      // rgb / hsl\n      var color;\n      var name = m[1];\n      var components = m[2];\n\n      switch (name) {\n        case 'rgb':\n        case 'rgba':\n          if (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // rgb(255,0,0) rgba(255,0,0,0.5)\n            this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n            this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n            this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n            handleAlpha(color[5]);\n            return this;\n          }\n\n          if (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n            this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n            this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n            this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n            handleAlpha(color[5]);\n            return this;\n          }\n\n          break;\n\n        case 'hsl':\n        case 'hsla':\n          if (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n            // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n            var h = parseFloat(color[1]) / 360;\n            var s = parseInt(color[2], 10) / 100;\n            var l = parseInt(color[3], 10) / 100;\n            handleAlpha(color[5]);\n            return this.setHSL(h, s, l);\n          }\n\n          break;\n      }\n    } else if (m = /^\\#([A-Fa-f0-9]+)$/.exec(style)) {\n      // hex color\n      var hex = m[1];\n      var size = hex.length;\n\n      if (size === 3) {\n        // #ff0\n        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n        return this;\n      } else if (size === 6) {\n        // #ff0000\n        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n        return this;\n      }\n    }\n\n    if (style && style.length > 0) {\n      // color keywords\n      var hex = THREE.ColorKeywords[style];\n\n      if (hex !== undefined) {\n        // red\n        this.setHex(hex);\n      } else {\n        // unknown color\n        console.warn('THREE.Color: Unknown color ' + style);\n      }\n    }\n\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this.r, this.g, this.b);\n  },\n  copy: function copy(color) {\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    return this;\n  },\n  copyGammaToLinear: function copyGammaToLinear(color, gammaFactor) {\n    if (gammaFactor === undefined) gammaFactor = 2.0;\n    this.r = Math.pow(color.r, gammaFactor);\n    this.g = Math.pow(color.g, gammaFactor);\n    this.b = Math.pow(color.b, gammaFactor);\n    return this;\n  },\n  copyLinearToGamma: function copyLinearToGamma(color, gammaFactor) {\n    if (gammaFactor === undefined) gammaFactor = 2.0;\n    var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n    this.r = Math.pow(color.r, safeInverse);\n    this.g = Math.pow(color.g, safeInverse);\n    this.b = Math.pow(color.b, safeInverse);\n    return this;\n  },\n  convertGammaToLinear: function convertGammaToLinear() {\n    var r = this.r,\n        g = this.g,\n        b = this.b;\n    this.r = r * r;\n    this.g = g * g;\n    this.b = b * b;\n    return this;\n  },\n  convertLinearToGamma: function convertLinearToGamma() {\n    this.r = Math.sqrt(this.r);\n    this.g = Math.sqrt(this.g);\n    this.b = Math.sqrt(this.b);\n    return this;\n  },\n  getHex: function getHex() {\n    return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n  },\n  getHexString: function getHexString() {\n    return ('000000' + this.getHex().toString(16)).slice(-6);\n  },\n  getHSL: function getHSL(optionalTarget) {\n    // h,s,l ranges are in 0.0 - 1.0\n    var hsl = optionalTarget || {\n      h: 0,\n      s: 0,\n      l: 0\n    };\n    var r = this.r,\n        g = this.g,\n        b = this.b;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var hue, saturation;\n    var lightness = (min + max) / 2.0;\n\n    if (min === max) {\n      hue = 0;\n      saturation = 0;\n    } else {\n      var delta = max - min;\n      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n      switch (max) {\n        case r:\n          hue = (g - b) / delta + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          hue = (b - r) / delta + 2;\n          break;\n\n        case b:\n          hue = (r - g) / delta + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    hsl.h = hue;\n    hsl.s = saturation;\n    hsl.l = lightness;\n    return hsl;\n  },\n  getStyle: function getStyle() {\n    return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n  },\n  offsetHSL: function offsetHSL(h, s, l) {\n    var hsl = this.getHSL();\n    hsl.h += h;\n    hsl.s += s;\n    hsl.l += l;\n    this.setHSL(hsl.h, hsl.s, hsl.l);\n    return this;\n  },\n  add: function add(color) {\n    this.r += color.r;\n    this.g += color.g;\n    this.b += color.b;\n    return this;\n  },\n  addColors: function addColors(color1, color2) {\n    this.r = color1.r + color2.r;\n    this.g = color1.g + color2.g;\n    this.b = color1.b + color2.b;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.r += s;\n    this.g += s;\n    this.b += s;\n    return this;\n  },\n  multiply: function multiply(color) {\n    this.r *= color.r;\n    this.g *= color.g;\n    this.b *= color.b;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(s) {\n    this.r *= s;\n    this.g *= s;\n    this.b *= s;\n    return this;\n  },\n  lerp: function lerp(color, alpha) {\n    this.r += (color.r - this.r) * alpha;\n    this.g += (color.g - this.g) * alpha;\n    this.b += (color.b - this.b) * alpha;\n    return this;\n  },\n  equals: function equals(c) {\n    return c.r === this.r && c.g === this.g && c.b === this.b;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.r = array[offset];\n    this.g = array[offset + 1];\n    this.b = array[offset + 2];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.r;\n    array[offset + 1] = this.g;\n    array[offset + 2] = this.b;\n    return array;\n  }\n};\nTHREE.ColorKeywords = {\n  'aliceblue': 0xF0F8FF,\n  'antiquewhite': 0xFAEBD7,\n  'aqua': 0x00FFFF,\n  'aquamarine': 0x7FFFD4,\n  'azure': 0xF0FFFF,\n  'beige': 0xF5F5DC,\n  'bisque': 0xFFE4C4,\n  'black': 0x000000,\n  'blanchedalmond': 0xFFEBCD,\n  'blue': 0x0000FF,\n  'blueviolet': 0x8A2BE2,\n  'brown': 0xA52A2A,\n  'burlywood': 0xDEB887,\n  'cadetblue': 0x5F9EA0,\n  'chartreuse': 0x7FFF00,\n  'chocolate': 0xD2691E,\n  'coral': 0xFF7F50,\n  'cornflowerblue': 0x6495ED,\n  'cornsilk': 0xFFF8DC,\n  'crimson': 0xDC143C,\n  'cyan': 0x00FFFF,\n  'darkblue': 0x00008B,\n  'darkcyan': 0x008B8B,\n  'darkgoldenrod': 0xB8860B,\n  'darkgray': 0xA9A9A9,\n  'darkgreen': 0x006400,\n  'darkgrey': 0xA9A9A9,\n  'darkkhaki': 0xBDB76B,\n  'darkmagenta': 0x8B008B,\n  'darkolivegreen': 0x556B2F,\n  'darkorange': 0xFF8C00,\n  'darkorchid': 0x9932CC,\n  'darkred': 0x8B0000,\n  'darksalmon': 0xE9967A,\n  'darkseagreen': 0x8FBC8F,\n  'darkslateblue': 0x483D8B,\n  'darkslategray': 0x2F4F4F,\n  'darkslategrey': 0x2F4F4F,\n  'darkturquoise': 0x00CED1,\n  'darkviolet': 0x9400D3,\n  'deeppink': 0xFF1493,\n  'deepskyblue': 0x00BFFF,\n  'dimgray': 0x696969,\n  'dimgrey': 0x696969,\n  'dodgerblue': 0x1E90FF,\n  'firebrick': 0xB22222,\n  'floralwhite': 0xFFFAF0,\n  'forestgreen': 0x228B22,\n  'fuchsia': 0xFF00FF,\n  'gainsboro': 0xDCDCDC,\n  'ghostwhite': 0xF8F8FF,\n  'gold': 0xFFD700,\n  'goldenrod': 0xDAA520,\n  'gray': 0x808080,\n  'green': 0x008000,\n  'greenyellow': 0xADFF2F,\n  'grey': 0x808080,\n  'honeydew': 0xF0FFF0,\n  'hotpink': 0xFF69B4,\n  'indianred': 0xCD5C5C,\n  'indigo': 0x4B0082,\n  'ivory': 0xFFFFF0,\n  'khaki': 0xF0E68C,\n  'lavender': 0xE6E6FA,\n  'lavenderblush': 0xFFF0F5,\n  'lawngreen': 0x7CFC00,\n  'lemonchiffon': 0xFFFACD,\n  'lightblue': 0xADD8E6,\n  'lightcoral': 0xF08080,\n  'lightcyan': 0xE0FFFF,\n  'lightgoldenrodyellow': 0xFAFAD2,\n  'lightgray': 0xD3D3D3,\n  'lightgreen': 0x90EE90,\n  'lightgrey': 0xD3D3D3,\n  'lightpink': 0xFFB6C1,\n  'lightsalmon': 0xFFA07A,\n  'lightseagreen': 0x20B2AA,\n  'lightskyblue': 0x87CEFA,\n  'lightslategray': 0x778899,\n  'lightslategrey': 0x778899,\n  'lightsteelblue': 0xB0C4DE,\n  'lightyellow': 0xFFFFE0,\n  'lime': 0x00FF00,\n  'limegreen': 0x32CD32,\n  'linen': 0xFAF0E6,\n  'magenta': 0xFF00FF,\n  'maroon': 0x800000,\n  'mediumaquamarine': 0x66CDAA,\n  'mediumblue': 0x0000CD,\n  'mediumorchid': 0xBA55D3,\n  'mediumpurple': 0x9370DB,\n  'mediumseagreen': 0x3CB371,\n  'mediumslateblue': 0x7B68EE,\n  'mediumspringgreen': 0x00FA9A,\n  'mediumturquoise': 0x48D1CC,\n  'mediumvioletred': 0xC71585,\n  'midnightblue': 0x191970,\n  'mintcream': 0xF5FFFA,\n  'mistyrose': 0xFFE4E1,\n  'moccasin': 0xFFE4B5,\n  'navajowhite': 0xFFDEAD,\n  'navy': 0x000080,\n  'oldlace': 0xFDF5E6,\n  'olive': 0x808000,\n  'olivedrab': 0x6B8E23,\n  'orange': 0xFFA500,\n  'orangered': 0xFF4500,\n  'orchid': 0xDA70D6,\n  'palegoldenrod': 0xEEE8AA,\n  'palegreen': 0x98FB98,\n  'paleturquoise': 0xAFEEEE,\n  'palevioletred': 0xDB7093,\n  'papayawhip': 0xFFEFD5,\n  'peachpuff': 0xFFDAB9,\n  'peru': 0xCD853F,\n  'pink': 0xFFC0CB,\n  'plum': 0xDDA0DD,\n  'powderblue': 0xB0E0E6,\n  'purple': 0x800080,\n  'red': 0xFF0000,\n  'rosybrown': 0xBC8F8F,\n  'royalblue': 0x4169E1,\n  'saddlebrown': 0x8B4513,\n  'salmon': 0xFA8072,\n  'sandybrown': 0xF4A460,\n  'seagreen': 0x2E8B57,\n  'seashell': 0xFFF5EE,\n  'sienna': 0xA0522D,\n  'silver': 0xC0C0C0,\n  'skyblue': 0x87CEEB,\n  'slateblue': 0x6A5ACD,\n  'slategray': 0x708090,\n  'slategrey': 0x708090,\n  'snow': 0xFFFAFA,\n  'springgreen': 0x00FF7F,\n  'steelblue': 0x4682B4,\n  'tan': 0xD2B48C,\n  'teal': 0x008080,\n  'thistle': 0xD8BFD8,\n  'tomato': 0xFF6347,\n  'turquoise': 0x40E0D0,\n  'violet': 0xEE82EE,\n  'wheat': 0xF5DEB3,\n  'white': 0xFFFFFF,\n  'whitesmoke': 0xF5F5F5,\n  'yellow': 0xFFFF00,\n  'yellowgreen': 0x9ACD32\n}; // File:src/math/Quaternion.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Quaternion = function (x, y, z, w) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._w = w !== undefined ? w : 1;\n};\n\nTHREE.Quaternion.prototype = {\n  constructor: THREE.Quaternion,\n\n  get x() {\n    return this._x;\n  },\n\n  set x(value) {\n    this._x = value;\n    this.onChangeCallback();\n  },\n\n  get y() {\n    return this._y;\n  },\n\n  set y(value) {\n    this._y = value;\n    this.onChangeCallback();\n  },\n\n  get z() {\n    return this._z;\n  },\n\n  set z(value) {\n    this._z = value;\n    this.onChangeCallback();\n  },\n\n  get w() {\n    return this._w;\n  },\n\n  set w(value) {\n    this._w = value;\n    this.onChangeCallback();\n  },\n\n  set: function set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this.onChangeCallback();\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  },\n  copy: function copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n    this.onChangeCallback();\n    return this;\n  },\n  setFromEuler: function setFromEuler(euler, update) {\n    if (euler instanceof THREE.Euler === false) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n    } // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n\n    var c1 = Math.cos(euler._x / 2);\n    var c2 = Math.cos(euler._y / 2);\n    var c3 = Math.cos(euler._z / 2);\n    var s1 = Math.sin(euler._x / 2);\n    var s2 = Math.sin(euler._y / 2);\n    var s3 = Math.sin(euler._z / 2);\n    var order = euler.order;\n\n    if (order === 'XYZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    if (update !== false) this.onChangeCallback();\n    return this;\n  },\n  setFromAxisAngle: function setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    var halfAngle = angle / 2,\n        s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n    this.onChangeCallback();\n    return this;\n  },\n  setFromRotationMatrix: function setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10],\n        trace = m11 + m22 + m33,\n        s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this.onChangeCallback();\n    return this;\n  },\n  setFromUnitVectors: function () {\n    // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n    // assumes direction vectors vFrom and vTo are normalized\n    var v1, r;\n    var EPS = 0.000001;\n    return function (vFrom, vTo) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      r = vFrom.dot(vTo) + 1;\n\n      if (r < EPS) {\n        r = 0;\n\n        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n          v1.set(-vFrom.y, vFrom.x, 0);\n        } else {\n          v1.set(0, -vFrom.z, vFrom.y);\n        }\n      } else {\n        v1.crossVectors(vFrom, vTo);\n      }\n\n      this._x = v1.x;\n      this._y = v1.y;\n      this._z = v1.z;\n      this._w = r;\n      return this.normalize();\n    };\n  }(),\n  inverse: function inverse() {\n    return this.conjugate().normalize();\n  },\n  conjugate: function conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this.onChangeCallback();\n    return this;\n  },\n  dot: function dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  },\n  lengthSq: function lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  },\n  length: function length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  },\n  normalize: function normalize() {\n    var l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this.onChangeCallback();\n    return this;\n  },\n  multiply: function multiply(q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  },\n  premultiply: function premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  },\n  multiplyQuaternions: function multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    var qax = a._x,\n        qay = a._y,\n        qaz = a._z,\n        qaw = a._w;\n    var qbx = b._x,\n        qby = b._y,\n        qbz = b._z,\n        qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    this.onChangeCallback();\n    return this;\n  },\n  slerp: function slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    var x = this._x,\n        y = this._y,\n        z = this._z,\n        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n    if (Math.abs(sinHalfTheta) < 0.001) {\n      this._w = 0.5 * (w + this._w);\n      this._x = 0.5 * (x + this._x);\n      this._y = 0.5 * (y + this._y);\n      this._z = 0.5 * (z + this._z);\n      return this;\n    }\n\n    var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n    this.onChangeCallback();\n    return this;\n  },\n  equals: function equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this.onChangeCallback();\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  },\n  onChange: function onChange(callback) {\n    this.onChangeCallback = callback;\n    return this;\n  },\n  onChangeCallback: function onChangeCallback() {}\n};\nObject.assign(THREE.Quaternion, {\n  slerp: function slerp(qa, qb, qm, t) {\n    return qm.copy(qa).slerp(qb, t);\n  },\n  slerpFlat: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    var x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3],\n        x1 = src1[srcOffset1 + 0],\n        y1 = src1[srcOffset1 + 1],\n        z1 = src1[srcOffset1 + 2],\n        w1 = src1[srcOffset1 + 3];\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      var s = 1 - t,\n          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n          dir = cos >= 0 ? 1 : -1,\n          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > Number.EPSILON) {\n        var sin = Math.sqrt(sqrSin),\n            len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      var tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n}); // File:src/math/Vector2.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\n\nTHREE.Vector2 = function (x, y) {\n  this.x = x || 0;\n  this.y = y || 0;\n};\n\nTHREE.Vector2.prototype = {\n  constructor: THREE.Vector2,\n\n  get width() {\n    return this.x;\n  },\n\n  set width(value) {\n    this.x = value;\n  },\n\n  get height() {\n    return this.y;\n  },\n\n  set height(value) {\n    this.y = value;\n  },\n\n  //\n  set: function set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    return this;\n  },\n  multiply: function multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    if (isFinite(scalar)) {\n      this.x *= scalar;\n      this.y *= scalar;\n    } else {\n      this.x = 0;\n      this.y = 0;\n    }\n\n    return this;\n  },\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    return this;\n  },\n  clampScalar: function () {\n    var min, max;\n    return function clampScalar(minVal, maxVal) {\n      if (min === undefined) {\n        min = new THREE.Vector2();\n        max = new THREE.Vector2();\n      }\n\n      min.set(minVal, minVal);\n      max.set(maxVal, maxVal);\n      return this.clamp(min, max);\n    };\n  }(),\n  clampLength: function clampLength(min, max) {\n    var length = this.length();\n    return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);\n  },\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y;\n  },\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  },\n  lengthManhattan: function lengthManhattan() {\n    return Math.abs(this.x) + Math.abs(this.y);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length());\n  },\n  angle: function angle() {\n    // computes the angle in radians with respect to the positive x-axis\n    var angle = Math.atan2(this.y, this.x);\n    if (angle < 0) angle += 2 * Math.PI;\n    return angle;\n  },\n  distanceTo: function distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  },\n  distanceToSquared: function distanceToSquared(v) {\n    var dx = this.x - v.x,\n        dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  },\n  setLength: function setLength(length) {\n    return this.multiplyScalar(length / this.length());\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    return array;\n  },\n  fromAttribute: function fromAttribute(attribute, index, offset) {\n    if (offset === undefined) offset = 0;\n    index = index * attribute.itemSize + offset;\n    this.x = attribute.array[index];\n    this.y = attribute.array[index + 1];\n    return this;\n  },\n  rotateAround: function rotateAround(center, angle) {\n    var c = Math.cos(angle),\n        s = Math.sin(angle);\n    var x = this.x - center.x;\n    var y = this.y - center.y;\n    this.x = x * c - y * s + center.x;\n    this.y = x * s + y * c + center.y;\n    return this;\n  }\n}; // File:src/math/Vector3.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\nTHREE.Vector3 = function (x, y, z) {\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n};\n\nTHREE.Vector3.prototype = {\n  constructor: THREE.Vector3,\n  set: function set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setZ: function setZ(z) {\n    this.z = z;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      case 2:\n        this.z = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      case 2:\n        return this.z;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  },\n  multiply: function multiply(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n      return this.multiplyVectors(v, w);\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    if (isFinite(scalar)) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n    } else {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return this;\n  },\n  multiplyVectors: function multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  },\n  applyEuler: function () {\n    var quaternion;\n    return function applyEuler(euler) {\n      if (euler instanceof THREE.Euler === false) {\n        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n      }\n\n      if (quaternion === undefined) quaternion = new THREE.Quaternion();\n      return this.applyQuaternion(quaternion.setFromEuler(euler));\n    };\n  }(),\n  applyAxisAngle: function () {\n    var quaternion;\n    return function applyAxisAngle(axis, angle) {\n      if (quaternion === undefined) quaternion = new THREE.Quaternion();\n      return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n    };\n  }(),\n  applyMatrix3: function applyMatrix3(m) {\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  },\n  applyMatrix4: function applyMatrix4(m) {\n    // input: THREE.Matrix4 affine matrix\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12];\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13];\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n    return this;\n  },\n  applyProjection: function applyProjection(m) {\n    // input: THREE.Matrix4 projection matrix\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide\n\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;\n    return this;\n  },\n  applyQuaternion: function applyQuaternion(q) {\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var qx = q.x,\n        qy = q.y,\n        qz = q.z,\n        qw = q.w; // calculate quat * vector\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n  project: function () {\n    var matrix;\n    return function project(camera) {\n      if (matrix === undefined) matrix = new THREE.Matrix4();\n      matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));\n      return this.applyProjection(matrix);\n    };\n  }(),\n  unproject: function () {\n    var matrix;\n    return function unproject(camera) {\n      if (matrix === undefined) matrix = new THREE.Matrix4();\n      matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\n      return this.applyProjection(matrix);\n    };\n  }(),\n  transformDirection: function transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    var e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  },\n  divide: function divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    return this;\n  },\n  clampScalar: function () {\n    var min, max;\n    return function clampScalar(minVal, maxVal) {\n      if (min === undefined) {\n        min = new THREE.Vector3();\n        max = new THREE.Vector3();\n      }\n\n      min.set(minVal, minVal, minVal);\n      max.set(maxVal, maxVal, maxVal);\n      return this.clamp(min, max);\n    };\n  }(),\n  clampLength: function clampLength(min, max) {\n    var length = this.length();\n    return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);\n  },\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  },\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  },\n  lengthManhattan: function lengthManhattan() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length());\n  },\n  setLength: function setLength(length) {\n    return this.multiplyScalar(length / this.length());\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  cross: function cross(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n      return this.crossVectors(v, w);\n    }\n\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    this.x = y * v.z - z * v.y;\n    this.y = z * v.x - x * v.z;\n    this.z = x * v.y - y * v.x;\n    return this;\n  },\n  crossVectors: function crossVectors(a, b) {\n    var ax = a.x,\n        ay = a.y,\n        az = a.z;\n    var bx = b.x,\n        by = b.y,\n        bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n  projectOnVector: function () {\n    var v1, dot;\n    return function projectOnVector(vector) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      v1.copy(vector).normalize();\n      dot = this.dot(v1);\n      return this.copy(v1).multiplyScalar(dot);\n    };\n  }(),\n  projectOnPlane: function () {\n    var v1;\n    return function projectOnPlane(planeNormal) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      v1.copy(this).projectOnVector(planeNormal);\n      return this.sub(v1);\n    };\n  }(),\n  reflect: function () {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n    var v1;\n    return function reflect(normal) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    };\n  }(),\n  angleTo: function angleTo(v) {\n    var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq()); // clamp, to handle numerical problems\n\n    return Math.acos(THREE.Math.clamp(theta, -1, 1));\n  },\n  distanceTo: function distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  },\n  distanceToSquared: function distanceToSquared(v) {\n    var dx = this.x - v.x,\n        dy = this.y - v.y,\n        dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  },\n  setFromSpherical: function setFromSpherical(s) {\n    var sinPhiRadius = Math.sin(s.phi) * s.radius;\n    this.x = sinPhiRadius * Math.sin(s.theta);\n    this.y = Math.cos(s.phi) * s.radius;\n    this.z = sinPhiRadius * Math.cos(s.theta);\n    return this;\n  },\n  setFromMatrixPosition: function setFromMatrixPosition(m) {\n    return this.setFromMatrixColumn(m, 3);\n  },\n  setFromMatrixScale: function setFromMatrixScale(m) {\n    var sx = this.setFromMatrixColumn(m, 0).length();\n    var sy = this.setFromMatrixColumn(m, 1).length();\n    var sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  },\n  setFromMatrixColumn: function setFromMatrixColumn(m, index) {\n    if (typeof m === 'number') {\n      console.warn('THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).');\n      var temp = m;\n      m = index;\n      index = temp;\n    }\n\n    return this.fromArray(m.elements, index * 4);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  },\n  fromAttribute: function fromAttribute(attribute, index, offset) {\n    if (offset === undefined) offset = 0;\n    index = index * attribute.itemSize + offset;\n    this.x = attribute.array[index];\n    this.y = attribute.array[index + 1];\n    this.z = attribute.array[index + 2];\n    return this;\n  }\n}; // File:src/math/Vector4.js\n\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\nTHREE.Vector4 = function (x, y, z, w) {\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n  this.w = w !== undefined ? w : 1;\n};\n\nTHREE.Vector4.prototype = {\n  constructor: THREE.Vector4,\n  set: function set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  },\n  setScalar: function setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    this.w = scalar;\n    return this;\n  },\n  setX: function setX(x) {\n    this.x = x;\n    return this;\n  },\n  setY: function setY(y) {\n    this.y = y;\n    return this;\n  },\n  setZ: function setZ(z) {\n    this.z = z;\n    return this;\n  },\n  setW: function setW(w) {\n    this.w = w;\n    return this;\n  },\n  setComponent: function setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n\n      case 1:\n        this.y = value;\n        break;\n\n      case 2:\n        this.z = value;\n        break;\n\n      case 3:\n        this.w = value;\n        break;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  getComponent: function getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n\n      case 1:\n        return this.y;\n\n      case 2:\n        return this.z;\n\n      case 3:\n        return this.w;\n\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.x, this.y, this.z, this.w);\n  },\n  copy: function copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    this.w = v.w !== undefined ? v.w : 1;\n    return this;\n  },\n  add: function add(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    this.w += v.w;\n    return this;\n  },\n  addScalar: function addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    this.w += s;\n    return this;\n  },\n  addVectors: function addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    this.w = a.w + b.w;\n    return this;\n  },\n  addScaledVector: function addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    this.w += v.w * s;\n    return this;\n  },\n  sub: function sub(v, w) {\n    if (w !== undefined) {\n      console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    this.w -= v.w;\n    return this;\n  },\n  subScalar: function subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    this.w -= s;\n    return this;\n  },\n  subVectors: function subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    this.w = a.w - b.w;\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(scalar) {\n    if (isFinite(scalar)) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n      this.w *= scalar;\n    } else {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    }\n\n    return this;\n  },\n  applyMatrix4: function applyMatrix4(m) {\n    var x = this.x,\n        y = this.y,\n        z = this.z,\n        w = this.w;\n    var e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n    return this;\n  },\n  divideScalar: function divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  },\n  setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(q) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n    // q is assumed to be normalized\n    this.w = 2 * Math.acos(q.w);\n    var s = Math.sqrt(1 - q.w * q.w);\n\n    if (s < 0.0001) {\n      this.x = 1;\n      this.y = 0;\n      this.z = 0;\n    } else {\n      this.x = q.x / s;\n      this.y = q.y / s;\n      this.z = q.z / s;\n    }\n\n    return this;\n  },\n  setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var angle,\n        x,\n        y,\n        z,\n        // variables for result\n    epsilon = 0.01,\n        // margin to allow for rounding errors\n    epsilon2 = 0.1,\n        // margin to distinguish between 0 and 180 degrees\n    te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n\n    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n      // singularity found\n      // first check for identity matrix which must have +1 for all terms\n      // in leading diagonal and zero in other terms\n      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n        // this singularity is identity matrix so angle = 0\n        this.set(1, 0, 0, 0);\n        return this; // zero angle, arbitrary axis\n      } // otherwise this singularity is angle = 180\n\n\n      angle = Math.PI;\n      var xx = (m11 + 1) / 2;\n      var yy = (m22 + 1) / 2;\n      var zz = (m33 + 1) / 2;\n      var xy = (m12 + m21) / 4;\n      var xz = (m13 + m31) / 4;\n      var yz = (m23 + m32) / 4;\n\n      if (xx > yy && xx > zz) {\n        // m11 is the largest diagonal term\n        if (xx < epsilon) {\n          x = 0;\n          y = 0.707106781;\n          z = 0.707106781;\n        } else {\n          x = Math.sqrt(xx);\n          y = xy / x;\n          z = xz / x;\n        }\n      } else if (yy > zz) {\n        // m22 is the largest diagonal term\n        if (yy < epsilon) {\n          x = 0.707106781;\n          y = 0;\n          z = 0.707106781;\n        } else {\n          y = Math.sqrt(yy);\n          x = xy / y;\n          z = yz / y;\n        }\n      } else {\n        // m33 is the largest diagonal term so base result on this\n        if (zz < epsilon) {\n          x = 0.707106781;\n          y = 0.707106781;\n          z = 0;\n        } else {\n          z = Math.sqrt(zz);\n          x = xz / z;\n          y = yz / z;\n        }\n      }\n\n      this.set(x, y, z, angle);\n      return this; // return 180 deg rotation\n    } // as we have reached here there are no singularities so we can handle normally\n\n\n    var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n    if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n    // caught by singularity test above, but I've left it in just in case\n\n    this.x = (m32 - m23) / s;\n    this.y = (m13 - m31) / s;\n    this.z = (m21 - m12) / s;\n    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n    return this;\n  },\n  min: function min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    this.w = Math.min(this.w, v.w);\n    return this;\n  },\n  max: function max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    this.w = Math.max(this.w, v.w);\n    return this;\n  },\n  clamp: function clamp(min, max) {\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    this.w = Math.max(min.w, Math.min(max.w, this.w));\n    return this;\n  },\n  clampScalar: function () {\n    var min, max;\n    return function clampScalar(minVal, maxVal) {\n      if (min === undefined) {\n        min = new THREE.Vector4();\n        max = new THREE.Vector4();\n      }\n\n      min.set(minVal, minVal, minVal, minVal);\n      max.set(maxVal, maxVal, maxVal, maxVal);\n      return this.clamp(min, max);\n    };\n  }(),\n  floor: function floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    this.w = Math.floor(this.w);\n    return this;\n  },\n  ceil: function ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    this.w = Math.ceil(this.w);\n    return this;\n  },\n  round: function round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    this.w = Math.round(this.w);\n    return this;\n  },\n  roundToZero: function roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n    return this;\n  },\n  negate: function negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  },\n  dot: function dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  },\n  lengthSq: function lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  },\n  length: function length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  },\n  lengthManhattan: function lengthManhattan() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n  },\n  normalize: function normalize() {\n    return this.divideScalar(this.length());\n  },\n  setLength: function setLength(length) {\n    return this.multiplyScalar(length / this.length());\n  },\n  lerp: function lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    this.w += (v.w - this.w) * alpha;\n    return this;\n  },\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n  },\n  equals: function equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n  },\n  fromArray: function fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    this.w = array[offset + 3];\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    array[offset + 3] = this.w;\n    return array;\n  },\n  fromAttribute: function fromAttribute(attribute, index, offset) {\n    if (offset === undefined) offset = 0;\n    index = index * attribute.itemSize + offset;\n    this.x = attribute.array[index];\n    this.y = attribute.array[index + 1];\n    this.z = attribute.array[index + 2];\n    this.w = attribute.array[index + 3];\n    return this;\n  }\n}; // File:src/math/Euler.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Euler = function (x, y, z, order) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._order = order || THREE.Euler.DefaultOrder;\n};\n\nTHREE.Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\nTHREE.Euler.DefaultOrder = 'XYZ';\nTHREE.Euler.prototype = {\n  constructor: THREE.Euler,\n\n  get x() {\n    return this._x;\n  },\n\n  set x(value) {\n    this._x = value;\n    this.onChangeCallback();\n  },\n\n  get y() {\n    return this._y;\n  },\n\n  set y(value) {\n    this._y = value;\n    this.onChangeCallback();\n  },\n\n  get z() {\n    return this._z;\n  },\n\n  set z(value) {\n    this._z = value;\n    this.onChangeCallback();\n  },\n\n  get order() {\n    return this._order;\n  },\n\n  set order(value) {\n    this._order = value;\n    this.onChangeCallback();\n  },\n\n  set: function set(x, y, z, order) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._order = order || this._order;\n    this.onChangeCallback();\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor(this._x, this._y, this._z, this._order);\n  },\n  copy: function copy(euler) {\n    this._x = euler._x;\n    this._y = euler._y;\n    this._z = euler._z;\n    this._order = euler._order;\n    this.onChangeCallback();\n    return this;\n  },\n  setFromRotationMatrix: function setFromRotationMatrix(m, order, update) {\n    var clamp = THREE.Math.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    var te = m.elements;\n    var m11 = te[0],\n        m12 = te[4],\n        m13 = te[8];\n    var m21 = te[1],\n        m22 = te[5],\n        m23 = te[9];\n    var m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n    order = order || this._order;\n\n    if (order === 'XYZ') {\n      this._y = Math.asin(clamp(m13, -1, 1));\n\n      if (Math.abs(m13) < 0.99999) {\n        this._x = Math.atan2(-m23, m33);\n        this._z = Math.atan2(-m12, m11);\n      } else {\n        this._x = Math.atan2(m32, m22);\n        this._z = 0;\n      }\n    } else if (order === 'YXZ') {\n      this._x = Math.asin(-clamp(m23, -1, 1));\n\n      if (Math.abs(m23) < 0.99999) {\n        this._y = Math.atan2(m13, m33);\n        this._z = Math.atan2(m21, m22);\n      } else {\n        this._y = Math.atan2(-m31, m11);\n        this._z = 0;\n      }\n    } else if (order === 'ZXY') {\n      this._x = Math.asin(clamp(m32, -1, 1));\n\n      if (Math.abs(m32) < 0.99999) {\n        this._y = Math.atan2(-m31, m33);\n        this._z = Math.atan2(-m12, m22);\n      } else {\n        this._y = 0;\n        this._z = Math.atan2(m21, m11);\n      }\n    } else if (order === 'ZYX') {\n      this._y = Math.asin(-clamp(m31, -1, 1));\n\n      if (Math.abs(m31) < 0.99999) {\n        this._x = Math.atan2(m32, m33);\n        this._z = Math.atan2(m21, m11);\n      } else {\n        this._x = 0;\n        this._z = Math.atan2(-m12, m22);\n      }\n    } else if (order === 'YZX') {\n      this._z = Math.asin(clamp(m21, -1, 1));\n\n      if (Math.abs(m21) < 0.99999) {\n        this._x = Math.atan2(-m23, m22);\n        this._y = Math.atan2(-m31, m11);\n      } else {\n        this._x = 0;\n        this._y = Math.atan2(m13, m33);\n      }\n    } else if (order === 'XZY') {\n      this._z = Math.asin(-clamp(m12, -1, 1));\n\n      if (Math.abs(m12) < 0.99999) {\n        this._x = Math.atan2(m32, m22);\n        this._y = Math.atan2(m13, m11);\n      } else {\n        this._x = Math.atan2(-m23, m33);\n        this._y = 0;\n      }\n    } else {\n      console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);\n    }\n\n    this._order = order;\n    if (update !== false) this.onChangeCallback();\n    return this;\n  },\n  setFromQuaternion: function () {\n    var matrix;\n    return function (q, order, update) {\n      if (matrix === undefined) matrix = new THREE.Matrix4();\n      matrix.makeRotationFromQuaternion(q);\n      return this.setFromRotationMatrix(matrix, order, update);\n    };\n  }(),\n  setFromVector3: function setFromVector3(v, order) {\n    return this.set(v.x, v.y, v.z, order || this._order);\n  },\n  reorder: function () {\n    // WARNING: this discards revolution information -bhouston\n    var q = new THREE.Quaternion();\n    return function (newOrder) {\n      q.setFromEuler(this);\n      return this.setFromQuaternion(q, newOrder);\n    };\n  }(),\n  equals: function equals(euler) {\n    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n  },\n  fromArray: function fromArray(array) {\n    this._x = array[0];\n    this._y = array[1];\n    this._z = array[2];\n    if (array[3] !== undefined) this._order = array[3];\n    this.onChangeCallback();\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._order;\n    return array;\n  },\n  toVector3: function toVector3(optionalResult) {\n    if (optionalResult) {\n      return optionalResult.set(this._x, this._y, this._z);\n    } else {\n      return new THREE.Vector3(this._x, this._y, this._z);\n    }\n  },\n  onChange: function onChange(callback) {\n    this.onChangeCallback = callback;\n    return this;\n  },\n  onChangeCallback: function onChangeCallback() {}\n}; // File:src/math/Line3.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Line3 = function (start, end) {\n  this.start = start !== undefined ? start : new THREE.Vector3();\n  this.end = end !== undefined ? end : new THREE.Vector3();\n};\n\nTHREE.Line3.prototype = {\n  constructor: THREE.Line3,\n  set: function set(start, end) {\n    this.start.copy(start);\n    this.end.copy(end);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(line) {\n    this.start.copy(line.start);\n    this.end.copy(line.end);\n    return this;\n  },\n  center: function center(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.addVectors(this.start, this.end).multiplyScalar(0.5);\n  },\n  delta: function delta(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.subVectors(this.end, this.start);\n  },\n  distanceSq: function distanceSq() {\n    return this.start.distanceToSquared(this.end);\n  },\n  distance: function distance() {\n    return this.start.distanceTo(this.end);\n  },\n  at: function at(t, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return this.delta(result).multiplyScalar(t).add(this.start);\n  },\n  closestPointToPointParameter: function () {\n    var startP = new THREE.Vector3();\n    var startEnd = new THREE.Vector3();\n    return function (point, clampToLine) {\n      startP.subVectors(point, this.start);\n      startEnd.subVectors(this.end, this.start);\n      var startEnd2 = startEnd.dot(startEnd);\n      var startEnd_startP = startEnd.dot(startP);\n      var t = startEnd_startP / startEnd2;\n\n      if (clampToLine) {\n        t = THREE.Math.clamp(t, 0, 1);\n      }\n\n      return t;\n    };\n  }(),\n  closestPointToPoint: function closestPointToPoint(point, clampToLine, optionalTarget) {\n    var t = this.closestPointToPointParameter(point, clampToLine);\n    var result = optionalTarget || new THREE.Vector3();\n    return this.delta(result).multiplyScalar(t).add(this.start);\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    this.start.applyMatrix4(matrix);\n    this.end.applyMatrix4(matrix);\n    return this;\n  },\n  equals: function equals(line) {\n    return line.start.equals(this.start) && line.end.equals(this.end);\n  }\n}; // File:src/math/Box2.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Box2 = function (min, max) {\n  this.min = min !== undefined ? min : new THREE.Vector2(+Infinity, +Infinity);\n  this.max = max !== undefined ? max : new THREE.Vector2(-Infinity, -Infinity);\n};\n\nTHREE.Box2.prototype = {\n  constructor: THREE.Box2,\n  set: function set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  },\n  setFromPoints: function setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  },\n  setFromCenterAndSize: function () {\n    var v1 = new THREE.Vector2();\n    return function (center, size) {\n      var halfSize = v1.copy(size).multiplyScalar(0.5);\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n      return this;\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  },\n  makeEmpty: function makeEmpty() {\n    this.min.x = this.min.y = +Infinity;\n    this.max.x = this.max.y = -Infinity;\n    return this;\n  },\n  isEmpty: function isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y;\n  },\n  center: function center(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector2();\n    return result.addVectors(this.min, this.max).multiplyScalar(0.5);\n  },\n  size: function size(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector2();\n    return result.subVectors(this.max, this.min);\n  },\n  expandByPoint: function expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  },\n  expandByVector: function expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  },\n  expandByScalar: function expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  },\n  containsPoint: function containsPoint(point) {\n    if (point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y) {\n      return false;\n    }\n\n    return true;\n  },\n  containsBox: function containsBox(box) {\n    if (this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y) {\n      return true;\n    }\n\n    return false;\n  },\n  getParameter: function getParameter(point, optionalTarget) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    var result = optionalTarget || new THREE.Vector2();\n    return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n  },\n  intersectsBox: function intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    if (box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y) {\n      return false;\n    }\n\n    return true;\n  },\n  clampPoint: function clampPoint(point, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector2();\n    return result.copy(point).clamp(this.min, this.max);\n  },\n  distanceToPoint: function () {\n    var v1 = new THREE.Vector2();\n    return function (point) {\n      var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n      return clampedPoint.sub(point).length();\n    };\n  }(),\n  intersect: function intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n    return this;\n  },\n  union: function union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  },\n  translate: function translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  },\n  equals: function equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}; // File:src/math/Box3.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\nTHREE.Box3 = function (min, max) {\n  this.min = min !== undefined ? min : new THREE.Vector3(+Infinity, +Infinity, +Infinity);\n  this.max = max !== undefined ? max : new THREE.Vector3(-Infinity, -Infinity, -Infinity);\n};\n\nTHREE.Box3.prototype = {\n  constructor: THREE.Box3,\n  set: function set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  },\n  setFromArray: function setFromArray(array) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = array.length; i < l; i += 3) {\n      var x = array[i];\n      var y = array[i + 1];\n      var z = array[i + 2];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n  },\n  setFromPoints: function setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  },\n  setFromCenterAndSize: function () {\n    var v1 = new THREE.Vector3();\n    return function (center, size) {\n      var halfSize = v1.copy(size).multiplyScalar(0.5);\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n      return this;\n    };\n  }(),\n  setFromObject: function () {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n    var v1 = new THREE.Vector3();\n    return function (object) {\n      var scope = this;\n      object.updateMatrixWorld(true);\n      this.makeEmpty();\n      object.traverse(function (node) {\n        var geometry = node.geometry;\n\n        if (geometry !== undefined) {\n          if (geometry instanceof THREE.Geometry) {\n            var vertices = geometry.vertices;\n\n            for (var i = 0, il = vertices.length; i < il; i++) {\n              v1.copy(vertices[i]);\n              v1.applyMatrix4(node.matrixWorld);\n              scope.expandByPoint(v1);\n            }\n          } else if (geometry instanceof THREE.BufferGeometry && geometry.attributes['position'] !== undefined) {\n            var positions = geometry.attributes['position'].array;\n\n            for (var i = 0, il = positions.length; i < il; i += 3) {\n              v1.fromArray(positions, i);\n              v1.applyMatrix4(node.matrixWorld);\n              scope.expandByPoint(v1);\n            }\n          }\n        }\n      });\n      return this;\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  },\n  makeEmpty: function makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  },\n  isEmpty: function isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  },\n  center: function center(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.addVectors(this.min, this.max).multiplyScalar(0.5);\n  },\n  size: function size(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.subVectors(this.max, this.min);\n  },\n  expandByPoint: function expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  },\n  expandByVector: function expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  },\n  expandByScalar: function expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  },\n  containsPoint: function containsPoint(point) {\n    if (point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z) {\n      return false;\n    }\n\n    return true;\n  },\n  containsBox: function containsBox(box) {\n    if (this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z) {\n      return true;\n    }\n\n    return false;\n  },\n  getParameter: function getParameter(point, optionalTarget) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    var result = optionalTarget || new THREE.Vector3();\n    return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  },\n  intersectsBox: function intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    if (box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z) {\n      return false;\n    }\n\n    return true;\n  },\n  intersectsSphere: function () {\n    var closestPoint;\n    return function intersectsSphere(sphere) {\n      if (closestPoint === undefined) closestPoint = new THREE.Vector3(); // Find the point on the AABB closest to the sphere center.\n\n      this.clampPoint(sphere.center, closestPoint); // If that point is inside the sphere, the AABB and sphere intersect.\n\n      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    };\n  }(),\n  intersectsPlane: function intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n    var min, max;\n\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n\n    return min <= plane.constant && max >= plane.constant;\n  },\n  clampPoint: function clampPoint(point, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.copy(point).clamp(this.min, this.max);\n  },\n  distanceToPoint: function () {\n    var v1 = new THREE.Vector3();\n    return function (point) {\n      var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n      return clampedPoint.sub(point).length();\n    };\n  }(),\n  getBoundingSphere: function () {\n    var v1 = new THREE.Vector3();\n    return function (optionalTarget) {\n      var result = optionalTarget || new THREE.Sphere();\n      result.center = this.center();\n      result.radius = this.size(v1).length() * 0.5;\n      return result;\n    };\n  }(),\n  intersect: function intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  },\n  union: function union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  },\n  applyMatrix4: function () {\n    var points = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n    return function (matrix) {\n      // transform of empty box is an empty box.\n      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n      points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n      points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n      points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n      points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n      points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n      points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n      points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n      points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n      this.setFromPoints(points);\n      return this;\n    };\n  }(),\n  translate: function translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  },\n  equals: function equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n}; // File:src/math/Matrix3.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n * @author tschw\r\n */\n\nTHREE.Matrix3 = function () {\n  this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\n  if (arguments.length > 0) {\n    console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n  }\n};\n\nTHREE.Matrix3.prototype = {\n  constructor: THREE.Matrix3,\n  set: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n    var te = this.elements;\n    te[0] = n11;\n    te[1] = n21;\n    te[2] = n31;\n    te[3] = n12;\n    te[4] = n22;\n    te[5] = n32;\n    te[6] = n13;\n    te[7] = n23;\n    te[8] = n33;\n    return this;\n  },\n  identity: function identity() {\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().fromArray(this.elements);\n  },\n  copy: function copy(m) {\n    var me = m.elements;\n    this.set(me[0], me[3], me[6], me[1], me[4], me[7], me[2], me[5], me[8]);\n    return this;\n  },\n  setFromMatrix4: function setFromMatrix4(m) {\n    var me = m.elements;\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n    return this;\n  },\n  applyToVector3Array: function () {\n    var v1;\n    return function (array, offset, length) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      if (offset === undefined) offset = 0;\n      if (length === undefined) length = array.length;\n\n      for (var i = 0, j = offset; i < length; i += 3, j += 3) {\n        v1.fromArray(array, j);\n        v1.applyMatrix3(this);\n        v1.toArray(array, j);\n      }\n\n      return array;\n    };\n  }(),\n  applyToBuffer: function () {\n    var v1;\n    return function applyToBuffer(buffer, offset, length) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      if (offset === undefined) offset = 0;\n      if (length === undefined) length = buffer.length / buffer.itemSize;\n\n      for (var i = 0, j = offset; i < length; i++, j++) {\n        v1.x = buffer.getX(j);\n        v1.y = buffer.getY(j);\n        v1.z = buffer.getZ(j);\n        v1.applyMatrix3(this);\n        buffer.setXYZ(v1.x, v1.y, v1.z);\n      }\n\n      return buffer;\n    };\n  }(),\n  multiplyScalar: function multiplyScalar(s) {\n    var te = this.elements;\n    te[0] *= s;\n    te[3] *= s;\n    te[6] *= s;\n    te[1] *= s;\n    te[4] *= s;\n    te[7] *= s;\n    te[2] *= s;\n    te[5] *= s;\n    te[8] *= s;\n    return this;\n  },\n  determinant: function determinant() {\n    var te = this.elements;\n    var a = te[0],\n        b = te[1],\n        c = te[2],\n        d = te[3],\n        e = te[4],\n        f = te[5],\n        g = te[6],\n        h = te[7],\n        i = te[8];\n    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n  },\n  getInverse: function getInverse(matrix, throwOnDegenerate) {\n    if (matrix instanceof THREE.Matrix4) {\n      console.error(\"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\");\n    }\n\n    var me = matrix.elements,\n        te = this.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n12 = me[3],\n        n22 = me[4],\n        n32 = me[5],\n        n13 = me[6],\n        n23 = me[7],\n        n33 = me[8],\n        t11 = n33 * n22 - n32 * n23,\n        t12 = n32 * n13 - n33 * n12,\n        t13 = n23 * n12 - n22 * n13,\n        det = n11 * t11 + n21 * t12 + n31 * t13;\n\n    if (det === 0) {\n      var msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n      if (throwOnDegenerate || false) {\n        throw new Error(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      return this.identity();\n    }\n\n    var detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n31 * n23 - n33 * n21) * detInv;\n    te[2] = (n32 * n21 - n31 * n22) * detInv;\n    te[3] = t12 * detInv;\n    te[4] = (n33 * n11 - n31 * n13) * detInv;\n    te[5] = (n31 * n12 - n32 * n11) * detInv;\n    te[6] = t13 * detInv;\n    te[7] = (n21 * n13 - n23 * n11) * detInv;\n    te[8] = (n22 * n11 - n21 * n12) * detInv;\n    return this;\n  },\n  transpose: function transpose() {\n    var tmp,\n        m = this.elements;\n    tmp = m[1];\n    m[1] = m[3];\n    m[3] = tmp;\n    tmp = m[2];\n    m[2] = m[6];\n    m[6] = tmp;\n    tmp = m[5];\n    m[5] = m[7];\n    m[7] = tmp;\n    return this;\n  },\n  flattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n    console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated \" + \"- just use .toArray instead.\");\n    return this.toArray(array, offset);\n  },\n  getNormalMatrix: function getNormalMatrix(matrix4) {\n    return this.setFromMatrix4(matrix4).getInverse(this).transpose();\n  },\n  transposeIntoArray: function transposeIntoArray(r) {\n    var m = this.elements;\n    r[0] = m[0];\n    r[1] = m[3];\n    r[2] = m[6];\n    r[3] = m[1];\n    r[4] = m[4];\n    r[5] = m[7];\n    r[6] = m[2];\n    r[7] = m[5];\n    r[8] = m[8];\n    return this;\n  },\n  fromArray: function fromArray(array) {\n    this.elements.set(array);\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    return array;\n  }\n}; // File:src/math/Matrix4.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\nTHREE.Matrix4 = function () {\n  this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n  if (arguments.length > 0) {\n    console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n  }\n};\n\nTHREE.Matrix4.prototype = {\n  constructor: THREE.Matrix4,\n  set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n    var te = this.elements;\n    te[0] = n11;\n    te[4] = n12;\n    te[8] = n13;\n    te[12] = n14;\n    te[1] = n21;\n    te[5] = n22;\n    te[9] = n23;\n    te[13] = n24;\n    te[2] = n31;\n    te[6] = n32;\n    te[10] = n33;\n    te[14] = n34;\n    te[3] = n41;\n    te[7] = n42;\n    te[11] = n43;\n    te[15] = n44;\n    return this;\n  },\n  identity: function identity() {\n    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  },\n  clone: function clone() {\n    return new THREE.Matrix4().fromArray(this.elements);\n  },\n  copy: function copy(m) {\n    this.elements.set(m.elements);\n    return this;\n  },\n  copyPosition: function copyPosition(m) {\n    var te = this.elements;\n    var me = m.elements;\n    te[12] = me[12];\n    te[13] = me[13];\n    te[14] = me[14];\n    return this;\n  },\n  extractBasis: function extractBasis(xAxis, yAxis, zAxis) {\n    xAxis.setFromMatrixColumn(this, 0);\n    yAxis.setFromMatrixColumn(this, 1);\n    zAxis.setFromMatrixColumn(this, 2);\n    return this;\n  },\n  makeBasis: function makeBasis(xAxis, yAxis, zAxis) {\n    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n    return this;\n  },\n  extractRotation: function () {\n    var v1;\n    return function (m) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      var te = this.elements;\n      var me = m.elements;\n      var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();\n      var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();\n      var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();\n      te[0] = me[0] * scaleX;\n      te[1] = me[1] * scaleX;\n      te[2] = me[2] * scaleX;\n      te[4] = me[4] * scaleY;\n      te[5] = me[5] * scaleY;\n      te[6] = me[6] * scaleY;\n      te[8] = me[8] * scaleZ;\n      te[9] = me[9] * scaleZ;\n      te[10] = me[10] * scaleZ;\n      return this;\n    };\n  }(),\n  makeRotationFromEuler: function makeRotationFromEuler(euler) {\n    if (euler instanceof THREE.Euler === false) {\n      console.error('THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n    }\n\n    var te = this.elements;\n    var x = euler.x,\n        y = euler.y,\n        z = euler.z;\n    var a = Math.cos(x),\n        b = Math.sin(x);\n    var c = Math.cos(y),\n        d = Math.sin(y);\n    var e = Math.cos(z),\n        f = Math.sin(z);\n\n    if (euler.order === 'XYZ') {\n      var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n      te[0] = c * e;\n      te[4] = -c * f;\n      te[8] = d;\n      te[1] = af + be * d;\n      te[5] = ae - bf * d;\n      te[9] = -b * c;\n      te[2] = bf - ae * d;\n      te[6] = be + af * d;\n      te[10] = a * c;\n    } else if (euler.order === 'YXZ') {\n      var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n      te[0] = ce + df * b;\n      te[4] = de * b - cf;\n      te[8] = a * d;\n      te[1] = a * f;\n      te[5] = a * e;\n      te[9] = -b;\n      te[2] = cf * b - de;\n      te[6] = df + ce * b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZXY') {\n      var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n      te[0] = ce - df * b;\n      te[4] = -a * f;\n      te[8] = de + cf * b;\n      te[1] = cf + de * b;\n      te[5] = a * e;\n      te[9] = df - ce * b;\n      te[2] = -a * d;\n      te[6] = b;\n      te[10] = a * c;\n    } else if (euler.order === 'ZYX') {\n      var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n      te[0] = c * e;\n      te[4] = be * d - af;\n      te[8] = ae * d + bf;\n      te[1] = c * f;\n      te[5] = bf * d + ae;\n      te[9] = af * d - be;\n      te[2] = -d;\n      te[6] = b * c;\n      te[10] = a * c;\n    } else if (euler.order === 'YZX') {\n      var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n      te[0] = c * e;\n      te[4] = bd - ac * f;\n      te[8] = bc * f + ad;\n      te[1] = f;\n      te[5] = a * e;\n      te[9] = -b * e;\n      te[2] = -d * e;\n      te[6] = ad * f + bc;\n      te[10] = ac - bd * f;\n    } else if (euler.order === 'XZY') {\n      var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n      te[0] = c * e;\n      te[4] = -f;\n      te[8] = d * e;\n      te[1] = ac * f + bd;\n      te[5] = a * e;\n      te[9] = ad * f - bc;\n      te[2] = bc * f - ad;\n      te[6] = b * e;\n      te[10] = bd * f + ac;\n    } // last column\n\n\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0; // bottom row\n\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  },\n  makeRotationFromQuaternion: function makeRotationFromQuaternion(q) {\n    var te = this.elements;\n    var x = q.x,\n        y = q.y,\n        z = q.z,\n        w = q.w;\n    var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    te[0] = 1 - (yy + zz);\n    te[4] = xy - wz;\n    te[8] = xz + wy;\n    te[1] = xy + wz;\n    te[5] = 1 - (xx + zz);\n    te[9] = yz - wx;\n    te[2] = xz - wy;\n    te[6] = yz + wx;\n    te[10] = 1 - (xx + yy); // last column\n\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0; // bottom row\n\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return this;\n  },\n  lookAt: function () {\n    var x, y, z;\n    return function (eye, target, up) {\n      if (x === undefined) {\n        x = new THREE.Vector3();\n        y = new THREE.Vector3();\n        z = new THREE.Vector3();\n      }\n\n      var te = this.elements;\n      z.subVectors(eye, target).normalize();\n\n      if (z.lengthSq() === 0) {\n        z.z = 1;\n      }\n\n      x.crossVectors(up, z).normalize();\n\n      if (x.lengthSq() === 0) {\n        z.z += 0.0001;\n        x.crossVectors(up, z).normalize();\n      }\n\n      y.crossVectors(z, x);\n      te[0] = x.x;\n      te[4] = y.x;\n      te[8] = z.x;\n      te[1] = x.y;\n      te[5] = y.y;\n      te[9] = z.y;\n      te[2] = x.z;\n      te[6] = y.z;\n      te[10] = z.z;\n      return this;\n    };\n  }(),\n  multiply: function multiply(m, n) {\n    if (n !== undefined) {\n      console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n      return this.multiplyMatrices(m, n);\n    }\n\n    return this.multiplyMatrices(this, m);\n  },\n  premultiply: function premultiply(m) {\n    return this.multiplyMatrices(m, this);\n  },\n  multiplyMatrices: function multiplyMatrices(a, b) {\n    var ae = a.elements;\n    var be = b.elements;\n    var te = this.elements;\n    var a11 = ae[0],\n        a12 = ae[4],\n        a13 = ae[8],\n        a14 = ae[12];\n    var a21 = ae[1],\n        a22 = ae[5],\n        a23 = ae[9],\n        a24 = ae[13];\n    var a31 = ae[2],\n        a32 = ae[6],\n        a33 = ae[10],\n        a34 = ae[14];\n    var a41 = ae[3],\n        a42 = ae[7],\n        a43 = ae[11],\n        a44 = ae[15];\n    var b11 = be[0],\n        b12 = be[4],\n        b13 = be[8],\n        b14 = be[12];\n    var b21 = be[1],\n        b22 = be[5],\n        b23 = be[9],\n        b24 = be[13];\n    var b31 = be[2],\n        b32 = be[6],\n        b33 = be[10],\n        b34 = be[14];\n    var b41 = be[3],\n        b42 = be[7],\n        b43 = be[11],\n        b44 = be[15];\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n    return this;\n  },\n  multiplyToArray: function multiplyToArray(a, b, r) {\n    var te = this.elements;\n    this.multiplyMatrices(a, b);\n    r[0] = te[0];\n    r[1] = te[1];\n    r[2] = te[2];\n    r[3] = te[3];\n    r[4] = te[4];\n    r[5] = te[5];\n    r[6] = te[6];\n    r[7] = te[7];\n    r[8] = te[8];\n    r[9] = te[9];\n    r[10] = te[10];\n    r[11] = te[11];\n    r[12] = te[12];\n    r[13] = te[13];\n    r[14] = te[14];\n    r[15] = te[15];\n    return this;\n  },\n  multiplyScalar: function multiplyScalar(s) {\n    var te = this.elements;\n    te[0] *= s;\n    te[4] *= s;\n    te[8] *= s;\n    te[12] *= s;\n    te[1] *= s;\n    te[5] *= s;\n    te[9] *= s;\n    te[13] *= s;\n    te[2] *= s;\n    te[6] *= s;\n    te[10] *= s;\n    te[14] *= s;\n    te[3] *= s;\n    te[7] *= s;\n    te[11] *= s;\n    te[15] *= s;\n    return this;\n  },\n  applyToVector3Array: function () {\n    var v1;\n    return function (array, offset, length) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      if (offset === undefined) offset = 0;\n      if (length === undefined) length = array.length;\n\n      for (var i = 0, j = offset; i < length; i += 3, j += 3) {\n        v1.fromArray(array, j);\n        v1.applyMatrix4(this);\n        v1.toArray(array, j);\n      }\n\n      return array;\n    };\n  }(),\n  applyToBuffer: function () {\n    var v1;\n    return function applyToBuffer(buffer, offset, length) {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      if (offset === undefined) offset = 0;\n      if (length === undefined) length = buffer.length / buffer.itemSize;\n\n      for (var i = 0, j = offset; i < length; i++, j++) {\n        v1.x = buffer.getX(j);\n        v1.y = buffer.getY(j);\n        v1.z = buffer.getZ(j);\n        v1.applyMatrix4(this);\n        buffer.setXYZ(v1.x, v1.y, v1.z);\n      }\n\n      return buffer;\n    };\n  }(),\n  determinant: function determinant() {\n    var te = this.elements;\n    var n11 = te[0],\n        n12 = te[4],\n        n13 = te[8],\n        n14 = te[12];\n    var n21 = te[1],\n        n22 = te[5],\n        n23 = te[9],\n        n24 = te[13];\n    var n31 = te[2],\n        n32 = te[6],\n        n33 = te[10],\n        n34 = te[14];\n    var n41 = te[3],\n        n42 = te[7],\n        n43 = te[11],\n        n44 = te[15]; //TODO: make this more efficient\n    //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n  },\n  transpose: function transpose() {\n    var te = this.elements;\n    var tmp;\n    tmp = te[1];\n    te[1] = te[4];\n    te[4] = tmp;\n    tmp = te[2];\n    te[2] = te[8];\n    te[8] = tmp;\n    tmp = te[6];\n    te[6] = te[9];\n    te[9] = tmp;\n    tmp = te[3];\n    te[3] = te[12];\n    te[12] = tmp;\n    tmp = te[7];\n    te[7] = te[13];\n    te[13] = tmp;\n    tmp = te[11];\n    te[11] = te[14];\n    te[14] = tmp;\n    return this;\n  },\n  flattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n    console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated \" + \"- just use .toArray instead.\");\n    return this.toArray(array, offset);\n  },\n  getPosition: function () {\n    var v1;\n    return function () {\n      if (v1 === undefined) v1 = new THREE.Vector3();\n      console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n      return v1.setFromMatrixColumn(this, 3);\n    };\n  }(),\n  setPosition: function setPosition(v) {\n    var te = this.elements;\n    te[12] = v.x;\n    te[13] = v.y;\n    te[14] = v.z;\n    return this;\n  },\n  getInverse: function getInverse(m, throwOnDegenerate) {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    var te = this.elements,\n        me = m.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n41 = me[3],\n        n12 = me[4],\n        n22 = me[5],\n        n32 = me[6],\n        n42 = me[7],\n        n13 = me[8],\n        n23 = me[9],\n        n33 = me[10],\n        n43 = me[11],\n        n14 = me[12],\n        n24 = me[13],\n        n34 = me[14],\n        n44 = me[15],\n        t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n        t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n        t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n        t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n    var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n    if (det === 0) {\n      var msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n      if (throwOnDegenerate || false) {\n        throw new Error(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      return this.identity();\n    }\n\n    var detInv = 1 / det;\n    te[0] = t11 * detInv;\n    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n    te[4] = t12 * detInv;\n    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n    te[8] = t13 * detInv;\n    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n    te[12] = t14 * detInv;\n    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n    return this;\n  },\n  scale: function scale(v) {\n    var te = this.elements;\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n    te[0] *= x;\n    te[4] *= y;\n    te[8] *= z;\n    te[1] *= x;\n    te[5] *= y;\n    te[9] *= z;\n    te[2] *= x;\n    te[6] *= y;\n    te[10] *= z;\n    te[3] *= x;\n    te[7] *= y;\n    te[11] *= z;\n    return this;\n  },\n  getMaxScaleOnAxis: function getMaxScaleOnAxis() {\n    var te = this.elements;\n    var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n    var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n    var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n  },\n  makeTranslation: function makeTranslation(x, y, z) {\n    this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationX: function makeRotationX(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationY: function makeRotationY(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationZ: function makeRotationZ(theta) {\n    var c = Math.cos(theta),\n        s = Math.sin(theta);\n    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeRotationAxis: function makeRotationAxis(axis, angle) {\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var t = 1 - c;\n    var x = axis.x,\n        y = axis.y,\n        z = axis.z;\n    var tx = t * x,\n        ty = t * y;\n    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n    return this;\n  },\n  makeScale: function makeScale(x, y, z) {\n    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n    return this;\n  },\n  compose: function compose(position, quaternion, scale) {\n    this.makeRotationFromQuaternion(quaternion);\n    this.scale(scale);\n    this.setPosition(position);\n    return this;\n  },\n  decompose: function () {\n    var vector, matrix;\n    return function (position, quaternion, scale) {\n      if (vector === undefined) {\n        vector = new THREE.Vector3();\n        matrix = new THREE.Matrix4();\n      }\n\n      var te = this.elements;\n      var sx = vector.set(te[0], te[1], te[2]).length();\n      var sy = vector.set(te[4], te[5], te[6]).length();\n      var sz = vector.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n      var det = this.determinant();\n\n      if (det < 0) {\n        sx = -sx;\n      }\n\n      position.x = te[12];\n      position.y = te[13];\n      position.z = te[14]; // scale the rotation part\n\n      matrix.elements.set(this.elements); // at this point matrix is incomplete so we can't use .copy()\n\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n      matrix.elements[0] *= invSX;\n      matrix.elements[1] *= invSX;\n      matrix.elements[2] *= invSX;\n      matrix.elements[4] *= invSY;\n      matrix.elements[5] *= invSY;\n      matrix.elements[6] *= invSY;\n      matrix.elements[8] *= invSZ;\n      matrix.elements[9] *= invSZ;\n      matrix.elements[10] *= invSZ;\n      quaternion.setFromRotationMatrix(matrix);\n      scale.x = sx;\n      scale.y = sy;\n      scale.z = sz;\n      return this;\n    };\n  }(),\n  makeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n    var te = this.elements;\n    var x = 2 * near / (right - left);\n    var y = 2 * near / (top - bottom);\n    var a = (right + left) / (right - left);\n    var b = (top + bottom) / (top - bottom);\n    var c = -(far + near) / (far - near);\n    var d = -2 * far * near / (far - near);\n    te[0] = x;\n    te[4] = 0;\n    te[8] = a;\n    te[12] = 0;\n    te[1] = 0;\n    te[5] = y;\n    te[9] = b;\n    te[13] = 0;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = c;\n    te[14] = d;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = -1;\n    te[15] = 0;\n    return this;\n  },\n  makePerspective: function makePerspective(fov, aspect, near, far) {\n    var ymax = near * Math.tan(THREE.Math.DEG2RAD * fov * 0.5);\n    var ymin = -ymax;\n    var xmin = ymin * aspect;\n    var xmax = ymax * aspect;\n    return this.makeFrustum(xmin, xmax, ymin, ymax, near, far);\n  },\n  makeOrthographic: function makeOrthographic(left, right, top, bottom, near, far) {\n    var te = this.elements;\n    var w = 1.0 / (right - left);\n    var h = 1.0 / (top - bottom);\n    var p = 1.0 / (far - near);\n    var x = (right + left) * w;\n    var y = (top + bottom) * h;\n    var z = (far + near) * p;\n    te[0] = 2 * w;\n    te[4] = 0;\n    te[8] = 0;\n    te[12] = -x;\n    te[1] = 0;\n    te[5] = 2 * h;\n    te[9] = 0;\n    te[13] = -y;\n    te[2] = 0;\n    te[6] = 0;\n    te[10] = -2 * p;\n    te[14] = -z;\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[15] = 1;\n    return this;\n  },\n  equals: function equals(matrix) {\n    var te = this.elements;\n    var me = matrix.elements;\n\n    for (var i = 0; i < 16; i++) {\n      if (te[i] !== me[i]) return false;\n    }\n\n    return true;\n  },\n  fromArray: function fromArray(array) {\n    this.elements.set(array);\n    return this;\n  },\n  toArray: function toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var te = this.elements;\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n    array[offset + 8] = te[8];\n    array[offset + 9] = te[9];\n    array[offset + 10] = te[10];\n    array[offset + 11] = te[11];\n    array[offset + 12] = te[12];\n    array[offset + 13] = te[13];\n    array[offset + 14] = te[14];\n    array[offset + 15] = te[15];\n    return array;\n  }\n}; // File:src/math/Ray.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Ray = function (origin, direction) {\n  this.origin = origin !== undefined ? origin : new THREE.Vector3();\n  this.direction = direction !== undefined ? direction : new THREE.Vector3();\n};\n\nTHREE.Ray.prototype = {\n  constructor: THREE.Ray,\n  set: function set(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(ray) {\n    this.origin.copy(ray.origin);\n    this.direction.copy(ray.direction);\n    return this;\n  },\n  at: function at(t, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.copy(this.direction).multiplyScalar(t).add(this.origin);\n  },\n  lookAt: function lookAt(v) {\n    this.direction.copy(v).sub(this.origin).normalize();\n    return this;\n  },\n  recast: function () {\n    var v1 = new THREE.Vector3();\n    return function (t) {\n      this.origin.copy(this.at(t, v1));\n      return this;\n    };\n  }(),\n  closestPointToPoint: function closestPointToPoint(point, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    result.subVectors(point, this.origin);\n    var directionDistance = result.dot(this.direction);\n\n    if (directionDistance < 0) {\n      return result.copy(this.origin);\n    }\n\n    return result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n  },\n  distanceToPoint: function distanceToPoint(point) {\n    return Math.sqrt(this.distanceSqToPoint(point));\n  },\n  distanceSqToPoint: function () {\n    var v1 = new THREE.Vector3();\n    return function (point) {\n      var directionDistance = v1.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n      if (directionDistance < 0) {\n        return this.origin.distanceToSquared(point);\n      }\n\n      v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n      return v1.distanceToSquared(point);\n    };\n  }(),\n  distanceSqToSegment: function () {\n    var segCenter = new THREE.Vector3();\n    var segDir = new THREE.Vector3();\n    var diff = new THREE.Vector3();\n    return function (v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n      // It returns the min distance between the ray and the segment\n      // defined by v0 and v1\n      // It can also set two optional targets :\n      // - The closest point on the ray\n      // - The closest point on the segment\n      segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n      segDir.copy(v1).sub(v0).normalize();\n      diff.copy(this.origin).sub(segCenter);\n      var segExtent = v0.distanceTo(v1) * 0.5;\n      var a01 = -this.direction.dot(segDir);\n      var b0 = diff.dot(this.direction);\n      var b1 = -diff.dot(segDir);\n      var c = diff.lengthSq();\n      var det = Math.abs(1 - a01 * a01);\n      var s0, s1, sqrDist, extDet;\n\n      if (det > 0) {\n        // The ray and segment are not parallel.\n        s0 = a01 * b1 - b0;\n        s1 = a01 * b0 - b1;\n        extDet = segExtent * det;\n\n        if (s0 >= 0) {\n          if (s1 >= -extDet) {\n            if (s1 <= extDet) {\n              // region 0\n              // Minimum at interior points of ray and segment.\n              var invDet = 1 / det;\n              s0 *= invDet;\n              s1 *= invDet;\n              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n            } else {\n              // region 1\n              s1 = segExtent;\n              s0 = Math.max(0, -(a01 * s1 + b0));\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          } else {\n            // region 5\n            s1 = -segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          if (s1 <= -extDet) {\n            // region 4\n            s0 = Math.max(0, -(-a01 * segExtent + b0));\n            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          } else if (s1 <= extDet) {\n            // region 3\n            s0 = 0;\n            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = s1 * (s1 + 2 * b1) + c;\n          } else {\n            // region 2\n            s0 = Math.max(0, -(a01 * segExtent + b0));\n            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        }\n      } else {\n        // Ray and segment are parallel.\n        s1 = a01 > 0 ? -segExtent : segExtent;\n        s0 = Math.max(0, -(a01 * s1 + b0));\n        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n      }\n\n      if (optionalPointOnRay) {\n        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n      }\n\n      if (optionalPointOnSegment) {\n        optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);\n      }\n\n      return sqrDist;\n    };\n  }(),\n  intersectSphere: function () {\n    var v1 = new THREE.Vector3();\n    return function (sphere, optionalTarget) {\n      v1.subVectors(sphere.center, this.origin);\n      var tca = v1.dot(this.direction);\n      var d2 = v1.dot(v1) - tca * tca;\n      var radius2 = sphere.radius * sphere.radius;\n      if (d2 > radius2) return null;\n      var thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n      var t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n      var t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n      if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n      // in order to always return an intersect point that is in front of the ray.\n\n      if (t0 < 0) return this.at(t1, optionalTarget); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n      return this.at(t0, optionalTarget);\n    };\n  }(),\n  intersectsSphere: function intersectsSphere(sphere) {\n    return this.distanceToPoint(sphere.center) <= sphere.radius;\n  },\n  distanceToPlane: function distanceToPlane(plane) {\n    var denominator = plane.normal.dot(this.direction);\n\n    if (denominator === 0) {\n      // line is coplanar, return origin\n      if (plane.distanceToPoint(this.origin) === 0) {\n        return 0;\n      } // Null is preferable to undefined since undefined means.... it is undefined\n\n\n      return null;\n    }\n\n    var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n    return t >= 0 ? t : null;\n  },\n  intersectPlane: function intersectPlane(plane, optionalTarget) {\n    var t = this.distanceToPlane(plane);\n\n    if (t === null) {\n      return null;\n    }\n\n    return this.at(t, optionalTarget);\n  },\n  intersectsPlane: function intersectsPlane(plane) {\n    // check if the ray lies on the plane first\n    var distToPoint = plane.distanceToPoint(this.origin);\n\n    if (distToPoint === 0) {\n      return true;\n    }\n\n    var denominator = plane.normal.dot(this.direction);\n\n    if (denominator * distToPoint < 0) {\n      return true;\n    } // ray origin is behind the plane (and is pointing behind it)\n\n\n    return false;\n  },\n  intersectBox: function intersectBox(box, optionalTarget) {\n    var tmin, tmax, tymin, tymax, tzmin, tzmax;\n    var invdirx = 1 / this.direction.x,\n        invdiry = 1 / this.direction.y,\n        invdirz = 1 / this.direction.z;\n    var origin = this.origin;\n\n    if (invdirx >= 0) {\n      tmin = (box.min.x - origin.x) * invdirx;\n      tmax = (box.max.x - origin.x) * invdirx;\n    } else {\n      tmin = (box.max.x - origin.x) * invdirx;\n      tmax = (box.min.x - origin.x) * invdirx;\n    }\n\n    if (invdiry >= 0) {\n      tymin = (box.min.y - origin.y) * invdiry;\n      tymax = (box.max.y - origin.y) * invdiry;\n    } else {\n      tymin = (box.max.y - origin.y) * invdiry;\n      tymax = (box.min.y - origin.y) * invdiry;\n    }\n\n    if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n    // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n    if (tymin > tmin || tmin !== tmin) tmin = tymin;\n    if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n    if (invdirz >= 0) {\n      tzmin = (box.min.z - origin.z) * invdirz;\n      tzmax = (box.max.z - origin.z) * invdirz;\n    } else {\n      tzmin = (box.max.z - origin.z) * invdirz;\n      tzmax = (box.min.z - origin.z) * invdirz;\n    }\n\n    if (tmin > tzmax || tzmin > tmax) return null;\n    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n    if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n    if (tmax < 0) return null;\n    return this.at(tmin >= 0 ? tmin : tmax, optionalTarget);\n  },\n  intersectsBox: function () {\n    var v = new THREE.Vector3();\n    return function (box) {\n      return this.intersectBox(box, v) !== null;\n    };\n  }(),\n  intersectTriangle: function () {\n    // Compute the offset origin, edges, and normal.\n    var diff = new THREE.Vector3();\n    var edge1 = new THREE.Vector3();\n    var edge2 = new THREE.Vector3();\n    var normal = new THREE.Vector3();\n    return function (a, b, c, backfaceCulling, optionalTarget) {\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n      edge1.subVectors(b, a);\n      edge2.subVectors(c, a);\n      normal.crossVectors(edge1, edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n      //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n      //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n      //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n      var DdN = this.direction.dot(normal);\n      var sign;\n\n      if (DdN > 0) {\n        if (backfaceCulling) return null;\n        sign = 1;\n      } else if (DdN < 0) {\n        sign = -1;\n        DdN = -DdN;\n      } else {\n        return null;\n      }\n\n      diff.subVectors(this.origin, a);\n      var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2)); // b1 < 0, no intersection\n\n      if (DdQxE2 < 0) {\n        return null;\n      }\n\n      var DdE1xQ = sign * this.direction.dot(edge1.cross(diff)); // b2 < 0, no intersection\n\n      if (DdE1xQ < 0) {\n        return null;\n      } // b1+b2 > 1, no intersection\n\n\n      if (DdQxE2 + DdE1xQ > DdN) {\n        return null;\n      } // Line intersects triangle, check if ray does.\n\n\n      var QdN = -sign * diff.dot(normal); // t < 0, no intersection\n\n      if (QdN < 0) {\n        return null;\n      } // Ray intersects triangle.\n\n\n      return this.at(QdN / DdN, optionalTarget);\n    };\n  }(),\n  applyMatrix4: function applyMatrix4(matrix4) {\n    this.direction.add(this.origin).applyMatrix4(matrix4);\n    this.origin.applyMatrix4(matrix4);\n    this.direction.sub(this.origin);\n    this.direction.normalize();\n    return this;\n  },\n  equals: function equals(ray) {\n    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n  }\n}; // File:src/math/Sphere.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Sphere = function (center, radius) {\n  this.center = center !== undefined ? center : new THREE.Vector3();\n  this.radius = radius !== undefined ? radius : 0;\n};\n\nTHREE.Sphere.prototype = {\n  constructor: THREE.Sphere,\n  set: function set(center, radius) {\n    this.center.copy(center);\n    this.radius = radius;\n    return this;\n  },\n  setFromPoints: function () {\n    var box = new THREE.Box3();\n    return function (points, optionalCenter) {\n      var center = this.center;\n\n      if (optionalCenter !== undefined) {\n        center.copy(optionalCenter);\n      } else {\n        box.setFromPoints(points).center(center);\n      }\n\n      var maxRadiusSq = 0;\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n      }\n\n      this.radius = Math.sqrt(maxRadiusSq);\n      return this;\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(sphere) {\n    this.center.copy(sphere.center);\n    this.radius = sphere.radius;\n    return this;\n  },\n  empty: function empty() {\n    return this.radius <= 0;\n  },\n  containsPoint: function containsPoint(point) {\n    return point.distanceToSquared(this.center) <= this.radius * this.radius;\n  },\n  distanceToPoint: function distanceToPoint(point) {\n    return point.distanceTo(this.center) - this.radius;\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    var radiusSum = this.radius + sphere.radius;\n    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n  },\n  intersectsBox: function intersectsBox(box) {\n    return box.intersectsSphere(this);\n  },\n  intersectsPlane: function intersectsPlane(plane) {\n    // We use the following equation to compute the signed distance from\n    // the center of the sphere to the plane.\n    //\n    // distance = q * n - d\n    //\n    // If this distance is greater than the radius of the sphere,\n    // then there is no intersection.\n    return Math.abs(this.center.dot(plane.normal) - plane.constant) <= this.radius;\n  },\n  clampPoint: function clampPoint(point, optionalTarget) {\n    var deltaLengthSq = this.center.distanceToSquared(point);\n    var result = optionalTarget || new THREE.Vector3();\n    result.copy(point);\n\n    if (deltaLengthSq > this.radius * this.radius) {\n      result.sub(this.center).normalize();\n      result.multiplyScalar(this.radius).add(this.center);\n    }\n\n    return result;\n  },\n  getBoundingBox: function getBoundingBox(optionalTarget) {\n    var box = optionalTarget || new THREE.Box3();\n    box.set(this.center, this.center);\n    box.expandByScalar(this.radius);\n    return box;\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    this.center.applyMatrix4(matrix);\n    this.radius = this.radius * matrix.getMaxScaleOnAxis();\n    return this;\n  },\n  translate: function translate(offset) {\n    this.center.add(offset);\n    return this;\n  },\n  equals: function equals(sphere) {\n    return sphere.center.equals(this.center) && sphere.radius === this.radius;\n  }\n}; // File:src/math/Frustum.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Frustum = function (p0, p1, p2, p3, p4, p5) {\n  this.planes = [p0 !== undefined ? p0 : new THREE.Plane(), p1 !== undefined ? p1 : new THREE.Plane(), p2 !== undefined ? p2 : new THREE.Plane(), p3 !== undefined ? p3 : new THREE.Plane(), p4 !== undefined ? p4 : new THREE.Plane(), p5 !== undefined ? p5 : new THREE.Plane()];\n};\n\nTHREE.Frustum.prototype = {\n  constructor: THREE.Frustum,\n  set: function set(p0, p1, p2, p3, p4, p5) {\n    var planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(frustum) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n\n    return this;\n  },\n  setFromMatrix: function setFromMatrix(m) {\n    var planes = this.planes;\n    var me = m.elements;\n    var me0 = me[0],\n        me1 = me[1],\n        me2 = me[2],\n        me3 = me[3];\n    var me4 = me[4],\n        me5 = me[5],\n        me6 = me[6],\n        me7 = me[7];\n    var me8 = me[8],\n        me9 = me[9],\n        me10 = me[10],\n        me11 = me[11];\n    var me12 = me[12],\n        me13 = me[13],\n        me14 = me[14],\n        me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    return this;\n  },\n  intersectsObject: function () {\n    var sphere = new THREE.Sphere();\n    return function (object) {\n      var geometry = object.geometry;\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n      return this.intersectsSphere(sphere);\n    };\n  }(),\n  intersectsSprite: function () {\n    var sphere = new THREE.Sphere();\n    return function (sprite) {\n      sphere.center.set(0, 0, 0);\n      sphere.radius = 0.7071067811865476;\n      sphere.applyMatrix4(sprite.matrixWorld);\n      return this.intersectsSphere(sphere);\n    };\n  }(),\n  intersectsSphere: function intersectsSphere(sphere) {\n    var planes = this.planes;\n    var center = sphere.center;\n    var negRadius = -sphere.radius;\n\n    for (var i = 0; i < 6; i++) {\n      var distance = planes[i].distanceToPoint(center);\n\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  intersectsBox: function () {\n    var p1 = new THREE.Vector3(),\n        p2 = new THREE.Vector3();\n    return function (box) {\n      var planes = this.planes;\n\n      for (var i = 0; i < 6; i++) {\n        var plane = planes[i];\n        p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n        p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n        p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n        p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n        p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n        p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n        var d1 = plane.distanceToPoint(p1);\n        var d2 = plane.distanceToPoint(p2); // if both outside plane, no intersection\n\n        if (d1 < 0 && d2 < 0) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }(),\n  containsPoint: function containsPoint(point) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}; // File:src/math/Plane.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Plane = function (normal, constant) {\n  this.normal = normal !== undefined ? normal : new THREE.Vector3(1, 0, 0);\n  this.constant = constant !== undefined ? constant : 0;\n};\n\nTHREE.Plane.prototype = {\n  constructor: THREE.Plane,\n  set: function set(normal, constant) {\n    this.normal.copy(normal);\n    this.constant = constant;\n    return this;\n  },\n  setComponents: function setComponents(x, y, z, w) {\n    this.normal.set(x, y, z);\n    this.constant = w;\n    return this;\n  },\n  setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(normal, point) {\n    this.normal.copy(normal);\n    this.constant = -point.dot(this.normal); // must be this.normal, not normal, as this.normal is normalized\n\n    return this;\n  },\n  setFromCoplanarPoints: function () {\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    return function (a, b, c) {\n      var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n      this.setFromNormalAndCoplanarPoint(normal, a);\n      return this;\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(plane) {\n    this.normal.copy(plane.normal);\n    this.constant = plane.constant;\n    return this;\n  },\n  normalize: function normalize() {\n    // Note: will lead to a divide by zero if the plane is invalid.\n    var inverseNormalLength = 1.0 / this.normal.length();\n    this.normal.multiplyScalar(inverseNormalLength);\n    this.constant *= inverseNormalLength;\n    return this;\n  },\n  negate: function negate() {\n    this.constant *= -1;\n    this.normal.negate();\n    return this;\n  },\n  distanceToPoint: function distanceToPoint(point) {\n    return this.normal.dot(point) + this.constant;\n  },\n  distanceToSphere: function distanceToSphere(sphere) {\n    return this.distanceToPoint(sphere.center) - sphere.radius;\n  },\n  projectPoint: function projectPoint(point, optionalTarget) {\n    return this.orthoPoint(point, optionalTarget).sub(point).negate();\n  },\n  orthoPoint: function orthoPoint(point, optionalTarget) {\n    var perpendicularMagnitude = this.distanceToPoint(point);\n    var result = optionalTarget || new THREE.Vector3();\n    return result.copy(this.normal).multiplyScalar(perpendicularMagnitude);\n  },\n  intersectLine: function () {\n    var v1 = new THREE.Vector3();\n    return function (line, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      var direction = line.delta(v1);\n      var denominator = this.normal.dot(direction);\n\n      if (denominator === 0) {\n        // line is coplanar, return origin\n        if (this.distanceToPoint(line.start) === 0) {\n          return result.copy(line.start);\n        } // Unsure if this is the correct method to handle this case.\n\n\n        return undefined;\n      }\n\n      var t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n      if (t < 0 || t > 1) {\n        return undefined;\n      }\n\n      return result.copy(direction).multiplyScalar(t).add(line.start);\n    };\n  }(),\n  intersectsLine: function intersectsLine(line) {\n    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n    var startSign = this.distanceToPoint(line.start);\n    var endSign = this.distanceToPoint(line.end);\n    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n  },\n  intersectsBox: function intersectsBox(box) {\n    return box.intersectsPlane(this);\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    return sphere.intersectsPlane(this);\n  },\n  coplanarPoint: function coplanarPoint(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.copy(this.normal).multiplyScalar(-this.constant);\n  },\n  applyMatrix4: function () {\n    var v1 = new THREE.Vector3();\n    var m1 = new THREE.Matrix3();\n    return function (matrix, optionalNormalMatrix) {\n      var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix); // transform normal based on theory here:\n      // http://www.songho.ca/opengl/gl_normaltransform.html\n\n      var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);\n      var normal = this.normal.applyMatrix3(normalMatrix).normalize(); // recalculate constant (like in setFromNormalAndCoplanarPoint)\n\n      this.constant = -referencePoint.dot(normal);\n      return this;\n    };\n  }(),\n  translate: function translate(offset) {\n    this.constant = this.constant - offset.dot(this.normal);\n    return this;\n  },\n  equals: function equals(plane) {\n    return plane.normal.equals(this.normal) && plane.constant === this.constant;\n  }\n}; // File:src/math/Spherical.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * The poles (phi) are at the positive and negative y axis.\r\n * The equator starts at positive z.\r\n */\n\nTHREE.Spherical = function (radius, phi, theta) {\n  this.radius = radius !== undefined ? radius : 1.0;\n  this.phi = phi !== undefined ? phi : 0; // up / down towards top and bottom pole\n\n  this.theta = theta !== undefined ? theta : 0; // around the equator of the sphere\n\n  return this;\n};\n\nTHREE.Spherical.prototype = {\n  constructor: THREE.Spherical,\n  set: function set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(other) {\n    this.radius.copy(other.radius);\n    this.phi.copy(other.phi);\n    this.theta.copy(other.theta);\n    return this;\n  },\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe: function makeSafe() {\n    var EPS = 0.000001;\n    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n    return this;\n  },\n  setFromVector3: function setFromVector3(vec3) {\n    this.radius = vec3.length();\n\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n\n      this.phi = Math.acos(THREE.Math.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n    }\n\n    return this;\n  }\n}; // File:src/math/Math.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Math = {\n  DEG2RAD: Math.PI / 180,\n  RAD2DEG: 180 / Math.PI,\n  generateUUID: function () {\n    // http://www.broofa.com/Tools/Math.uuid.htm\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0,\n        r;\n    return function () {\n      for (var i = 0; i < 36; i++) {\n        if (i === 8 || i === 13 || i === 18 || i === 23) {\n          uuid[i] = '-';\n        } else if (i === 14) {\n          uuid[i] = '4';\n        } else {\n          if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;\n          r = rnd & 0xf;\n          rnd = rnd >> 4;\n          uuid[i] = chars[i === 19 ? r & 0x3 | 0x8 : r];\n        }\n      }\n\n      return uuid.join('');\n    };\n  }(),\n  clamp: function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  },\n  // compute euclidian modulo of m % n\n  // https://en.wikipedia.org/wiki/Modulo_operation\n  euclideanModulo: function euclideanModulo(n, m) {\n    return (n % m + m) % m;\n  },\n  // Linear mapping from range <a1, a2> to range <b1, b2>\n  mapLinear: function mapLinear(x, a1, a2, b1, b2) {\n    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n  },\n  // http://en.wikipedia.org/wiki/Smoothstep\n  smoothstep: function smoothstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * (3 - 2 * x);\n  },\n  smootherstep: function smootherstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * x * (x * (x * 6 - 15) + 10);\n  },\n  random16: function random16() {\n    console.warn('THREE.Math.random16() has been deprecated. Use Math.random() instead.');\n    return Math.random();\n  },\n  // Random integer from <low, high> interval\n  randInt: function randInt(low, high) {\n    return low + Math.floor(Math.random() * (high - low + 1));\n  },\n  // Random float from <low, high> interval\n  randFloat: function randFloat(low, high) {\n    return low + Math.random() * (high - low);\n  },\n  // Random float from <-range/2, range/2> interval\n  randFloatSpread: function randFloatSpread(range) {\n    return range * (0.5 - Math.random());\n  },\n  degToRad: function degToRad(degrees) {\n    return degrees * THREE.Math.DEG2RAD;\n  },\n  radToDeg: function radToDeg(radians) {\n    return radians * THREE.Math.RAD2DEG;\n  },\n  isPowerOfTwo: function isPowerOfTwo(value) {\n    return (value & value - 1) === 0 && value !== 0;\n  },\n  nearestPowerOfTwo: function nearestPowerOfTwo(value) {\n    return Math.pow(2, Math.round(Math.log(value) / Math.LN2));\n  },\n  nextPowerOfTwo: function nextPowerOfTwo(value) {\n    value--;\n    value |= value >> 1;\n    value |= value >> 2;\n    value |= value >> 4;\n    value |= value >> 8;\n    value |= value >> 16;\n    value++;\n    return value;\n  }\n}; // File:src/math/Spline.js\n\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Spline = function (points) {\n  this.points = points;\n  var c = [],\n      v3 = {\n    x: 0,\n    y: 0,\n    z: 0\n  },\n      point,\n      intPoint,\n      weight,\n      w2,\n      w3,\n      pa,\n      pb,\n      pc,\n      pd;\n\n  this.initFromArray = function (a) {\n    this.points = [];\n\n    for (var i = 0; i < a.length; i++) {\n      this.points[i] = {\n        x: a[i][0],\n        y: a[i][1],\n        z: a[i][2]\n      };\n    }\n  };\n\n  this.getPoint = function (k) {\n    point = (this.points.length - 1) * k;\n    intPoint = Math.floor(point);\n    weight = point - intPoint;\n    c[0] = intPoint === 0 ? intPoint : intPoint - 1;\n    c[1] = intPoint;\n    c[2] = intPoint > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n    c[3] = intPoint > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n    pa = this.points[c[0]];\n    pb = this.points[c[1]];\n    pc = this.points[c[2]];\n    pd = this.points[c[3]];\n    w2 = weight * weight;\n    w3 = weight * w2;\n    v3.x = interpolate(pa.x, pb.x, pc.x, pd.x, weight, w2, w3);\n    v3.y = interpolate(pa.y, pb.y, pc.y, pd.y, weight, w2, w3);\n    v3.z = interpolate(pa.z, pb.z, pc.z, pd.z, weight, w2, w3);\n    return v3;\n  };\n\n  this.getControlPointsArray = function () {\n    var i,\n        p,\n        l = this.points.length,\n        coords = [];\n\n    for (i = 0; i < l; i++) {\n      p = this.points[i];\n      coords[i] = [p.x, p.y, p.z];\n    }\n\n    return coords;\n  }; // approximate length by summing linear segments\n\n\n  this.getLength = function (nSubDivisions) {\n    var i,\n        index,\n        nSamples,\n        position,\n        point = 0,\n        intPoint = 0,\n        oldIntPoint = 0,\n        oldPosition = new THREE.Vector3(),\n        tmpVec = new THREE.Vector3(),\n        chunkLengths = [],\n        totalLength = 0; // first point has 0 length\n\n    chunkLengths[0] = 0;\n    if (!nSubDivisions) nSubDivisions = 100;\n    nSamples = this.points.length * nSubDivisions;\n    oldPosition.copy(this.points[0]);\n\n    for (i = 1; i < nSamples; i++) {\n      index = i / nSamples;\n      position = this.getPoint(index);\n      tmpVec.copy(position);\n      totalLength += tmpVec.distanceTo(oldPosition);\n      oldPosition.copy(position);\n      point = (this.points.length - 1) * index;\n      intPoint = Math.floor(point);\n\n      if (intPoint !== oldIntPoint) {\n        chunkLengths[intPoint] = totalLength;\n        oldIntPoint = intPoint;\n      }\n    } // last point ends with total length\n\n\n    chunkLengths[chunkLengths.length] = totalLength;\n    return {\n      chunks: chunkLengths,\n      total: totalLength\n    };\n  };\n\n  this.reparametrizeByArcLength = function (samplingCoef) {\n    var i,\n        j,\n        index,\n        indexCurrent,\n        indexNext,\n        realDistance,\n        sampling,\n        position,\n        newpoints = [],\n        tmpVec = new THREE.Vector3(),\n        sl = this.getLength();\n    newpoints.push(tmpVec.copy(this.points[0]).clone());\n\n    for (i = 1; i < this.points.length; i++) {\n      //tmpVec.copy( this.points[ i - 1 ] );\n      //linearDistance = tmpVec.distanceTo( this.points[ i ] );\n      realDistance = sl.chunks[i] - sl.chunks[i - 1];\n      sampling = Math.ceil(samplingCoef * realDistance / sl.total);\n      indexCurrent = (i - 1) / (this.points.length - 1);\n      indexNext = i / (this.points.length - 1);\n\n      for (j = 1; j < sampling - 1; j++) {\n        index = indexCurrent + j * (1 / sampling) * (indexNext - indexCurrent);\n        position = this.getPoint(index);\n        newpoints.push(tmpVec.copy(position).clone());\n      }\n\n      newpoints.push(tmpVec.copy(this.points[i]).clone());\n    }\n\n    this.points = newpoints;\n  }; // Catmull-Rom\n\n\n  function interpolate(p0, p1, p2, p3, t, t2, t3) {\n    var v0 = (p2 - p0) * 0.5,\n        v1 = (p3 - p1) * 0.5;\n    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\n  }\n}; // File:src/math/Triangle.js\n\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.Triangle = function (a, b, c) {\n  this.a = a !== undefined ? a : new THREE.Vector3();\n  this.b = b !== undefined ? b : new THREE.Vector3();\n  this.c = c !== undefined ? c : new THREE.Vector3();\n};\n\nTHREE.Triangle.normal = function () {\n  var v0 = new THREE.Vector3();\n  return function (a, b, c, optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    result.subVectors(c, b);\n    v0.subVectors(a, b);\n    result.cross(v0);\n    var resultLengthSq = result.lengthSq();\n\n    if (resultLengthSq > 0) {\n      return result.multiplyScalar(1 / Math.sqrt(resultLengthSq));\n    }\n\n    return result.set(0, 0, 0);\n  };\n}(); // static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\nTHREE.Triangle.barycoordFromPoint = function () {\n  var v0 = new THREE.Vector3();\n  var v1 = new THREE.Vector3();\n  var v2 = new THREE.Vector3();\n  return function (point, a, b, c, optionalTarget) {\n    v0.subVectors(c, a);\n    v1.subVectors(b, a);\n    v2.subVectors(point, a);\n    var dot00 = v0.dot(v0);\n    var dot01 = v0.dot(v1);\n    var dot02 = v0.dot(v2);\n    var dot11 = v1.dot(v1);\n    var dot12 = v1.dot(v2);\n    var denom = dot00 * dot11 - dot01 * dot01;\n    var result = optionalTarget || new THREE.Vector3(); // collinear or singular triangle\n\n    if (denom === 0) {\n      // arbitrary location outside of triangle?\n      // not sure if this is the best idea, maybe should be returning undefined\n      return result.set(-2, -1, -1);\n    }\n\n    var invDenom = 1 / denom;\n    var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n    return result.set(1 - u - v, v, u);\n  };\n}();\n\nTHREE.Triangle.containsPoint = function () {\n  var v1 = new THREE.Vector3();\n  return function (point, a, b, c) {\n    var result = THREE.Triangle.barycoordFromPoint(point, a, b, c, v1);\n    return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1;\n  };\n}();\n\nTHREE.Triangle.prototype = {\n  constructor: THREE.Triangle,\n  set: function set(a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  },\n  setFromPointsAndIndices: function setFromPointsAndIndices(points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  },\n  area: function () {\n    var v0 = new THREE.Vector3();\n    var v1 = new THREE.Vector3();\n    return function () {\n      v0.subVectors(this.c, this.b);\n      v1.subVectors(this.a, this.b);\n      return v0.cross(v1).length() * 0.5;\n    };\n  }(),\n  midpoint: function midpoint(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    return result.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  },\n  normal: function normal(optionalTarget) {\n    return THREE.Triangle.normal(this.a, this.b, this.c, optionalTarget);\n  },\n  plane: function plane(optionalTarget) {\n    var result = optionalTarget || new THREE.Plane();\n    return result.setFromCoplanarPoints(this.a, this.b, this.c);\n  },\n  barycoordFromPoint: function barycoordFromPoint(point, optionalTarget) {\n    return THREE.Triangle.barycoordFromPoint(point, this.a, this.b, this.c, optionalTarget);\n  },\n  containsPoint: function containsPoint(point) {\n    return THREE.Triangle.containsPoint(point, this.a, this.b, this.c);\n  },\n  closestPointToPoint: function () {\n    var plane, edgeList, projectedPoint, closestPoint;\n    return function closestPointToPoint(point, optionalTarget) {\n      if (plane === undefined) {\n        plane = new THREE.Plane();\n        edgeList = [new THREE.Line3(), new THREE.Line3(), new THREE.Line3()];\n        projectedPoint = new THREE.Vector3();\n        closestPoint = new THREE.Vector3();\n      }\n\n      var result = optionalTarget || new THREE.Vector3();\n      var minDistance = Infinity; // project the point onto the plane of the triangle\n\n      plane.setFromCoplanarPoints(this.a, this.b, this.c);\n      plane.projectPoint(point, projectedPoint); // check if the projection lies within the triangle\n\n      if (this.containsPoint(projectedPoint) === true) {\n        // if so, this is the closest point\n        result.copy(projectedPoint);\n      } else {\n        // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n        edgeList[0].set(this.a, this.b);\n        edgeList[1].set(this.b, this.c);\n        edgeList[2].set(this.c, this.a);\n\n        for (var i = 0; i < edgeList.length; i++) {\n          edgeList[i].closestPointToPoint(projectedPoint, true, closestPoint);\n          var distance = projectedPoint.distanceToSquared(closestPoint);\n\n          if (distance < minDistance) {\n            minDistance = distance;\n            result.copy(closestPoint);\n          }\n        }\n      }\n\n      return result;\n    };\n  }(),\n  equals: function equals(triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n}; // File:src/math/Interpolant.js\n\n/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n * @author tschw\r\n */\n\nTHREE.Interpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  this.parameterPositions = parameterPositions;\n  this._cachedIndex = 0;\n  this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n  this.sampleValues = sampleValues;\n  this.valueSize = sampleSize;\n};\n\nTHREE.Interpolant.prototype = {\n  constructor: THREE.Interpolant,\n  evaluate: function evaluate(t) {\n    var pp = this.parameterPositions,\n        i1 = this._cachedIndex,\n        t1 = pp[i1],\n        t0 = pp[i1 - 1];\n\n    validate_interval: {\n      seek: {\n        var right;\n\n        linear_scan: {\n          //- See http://jsperf.com/comparison-to-undefined/3\n          //- slower code:\n          //-\n          //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n          forward_scan: if (!(t < t1)) {\n            for (var giveUpAt = i1 + 2;;) {\n              if (t1 === undefined) {\n                if (t < t0) break forward_scan; // after end\n\n                i1 = pp.length;\n                this._cachedIndex = i1;\n                return this.afterEnd_(i1 - 1, t, t0);\n              }\n\n              if (i1 === giveUpAt) break; // this loop\n\n              t0 = t1;\n              t1 = pp[++i1];\n\n              if (t < t1) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            } // prepare binary search on the right side of the index\n\n\n            right = pp.length;\n            break linear_scan;\n          } //- slower code:\n          //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n          if (!(t >= t0)) {\n            // looping?\n            var t1global = pp[1];\n\n            if (t < t1global) {\n              i1 = 2; // + 1, using the scan for the details\n\n              t0 = t1global;\n            } // linear reverse scan\n\n\n            for (var giveUpAt = i1 - 2;;) {\n              if (t0 === undefined) {\n                // before start\n                this._cachedIndex = 0;\n                return this.beforeStart_(0, t, t1);\n              }\n\n              if (i1 === giveUpAt) break; // this loop\n\n              t1 = t0;\n              t0 = pp[--i1 - 1];\n\n              if (t >= t0) {\n                // we have arrived at the sought interval\n                break seek;\n              }\n            } // prepare binary search on the left side of the index\n\n\n            right = i1;\n            i1 = 0;\n            break linear_scan;\n          } // the interval is valid\n\n\n          break validate_interval;\n        } // linear scan\n        // binary search\n\n\n        while (i1 < right) {\n          var mid = i1 + right >>> 1;\n\n          if (t < pp[mid]) {\n            right = mid;\n          } else {\n            i1 = mid + 1;\n          }\n        }\n\n        t1 = pp[i1];\n        t0 = pp[i1 - 1]; // check boundary cases, again\n\n        if (t0 === undefined) {\n          this._cachedIndex = 0;\n          return this.beforeStart_(0, t, t1);\n        }\n\n        if (t1 === undefined) {\n          i1 = pp.length;\n          this._cachedIndex = i1;\n          return this.afterEnd_(i1 - 1, t0, t);\n        }\n      } // seek\n\n\n      this._cachedIndex = i1;\n      this.intervalChanged_(i1, t0, t1);\n    } // validate_interval\n\n\n    return this.interpolate_(i1, t0, t, t1);\n  },\n  settings: null,\n  // optional, subclass-specific settings structure\n  // Note: The indirection allows central control of many interpolants.\n  // --- Protected interface\n  DefaultSettings_: {},\n  getSettings_: function getSettings_() {\n    return this.settings || this.DefaultSettings_;\n  },\n  copySampleValue_: function copySampleValue_(index) {\n    // copies a sample value to the result buffer\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset = index * stride;\n\n    for (var i = 0; i !== stride; ++i) {\n      result[i] = values[offset + i];\n    }\n\n    return result;\n  },\n  // Template methods for derived classes:\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    throw new Error(\"call to abstract method\"); // implementations shall return this.resultBuffer\n  },\n  intervalChanged_: function intervalChanged_(i1, t0, t1) {// empty\n  }\n};\nObject.assign(THREE.Interpolant.prototype, {\n  beforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n  THREE.Interpolant.prototype.copySampleValue_,\n  afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n  THREE.Interpolant.prototype.copySampleValue_\n}); // File:src/math/interpolants/CubicInterpolant.js\n\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n *\r\n * @author tschw\r\n */\n\nTHREE.CubicInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  this._weightPrev = -0;\n  this._offsetPrev = -0;\n  this._weightNext = -0;\n  this._offsetNext = -0;\n};\n\nTHREE.CubicInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n  constructor: THREE.CubicInterpolant,\n  DefaultSettings_: {\n    endingStart: THREE.ZeroCurvatureEnding,\n    endingEnd: THREE.ZeroCurvatureEnding\n  },\n  intervalChanged_: function intervalChanged_(i1, t0, t1) {\n    var pp = this.parameterPositions,\n        iPrev = i1 - 2,\n        iNext = i1 + 1,\n        tPrev = pp[iPrev],\n        tNext = pp[iNext];\n\n    if (tPrev === undefined) {\n      switch (this.getSettings_().endingStart) {\n        case THREE.ZeroSlopeEnding:\n          // f'(t0) = 0\n          iPrev = i1;\n          tPrev = 2 * t0 - t1;\n          break;\n\n        case THREE.WrapAroundEnding:\n          // use the other end of the curve\n          iPrev = pp.length - 2;\n          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n          break;\n\n        default:\n          // ZeroCurvatureEnding\n          // f''(t0) = 0 a.k.a. Natural Spline\n          iPrev = i1;\n          tPrev = t1;\n      }\n    }\n\n    if (tNext === undefined) {\n      switch (this.getSettings_().endingEnd) {\n        case THREE.ZeroSlopeEnding:\n          // f'(tN) = 0\n          iNext = i1;\n          tNext = 2 * t1 - t0;\n          break;\n\n        case THREE.WrapAroundEnding:\n          // use the other end of the curve\n          iNext = 1;\n          tNext = t1 + pp[1] - pp[0];\n          break;\n\n        default:\n          // ZeroCurvatureEnding\n          // f''(tN) = 0, a.k.a. Natural Spline\n          iNext = i1 - 1;\n          tNext = t0;\n      }\n    }\n\n    var halfDt = (t1 - t0) * 0.5,\n        stride = this.valueSize;\n    this._weightPrev = halfDt / (t0 - tPrev);\n    this._weightNext = halfDt / (tNext - t1);\n    this._offsetPrev = iPrev * stride;\n    this._offsetNext = iNext * stride;\n  },\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        o1 = i1 * stride,\n        o0 = o1 - stride,\n        oP = this._offsetPrev,\n        oN = this._offsetNext,\n        wP = this._weightPrev,\n        wN = this._weightNext,\n        p = (t - t0) / (t1 - t0),\n        pp = p * p,\n        ppp = pp * p; // evaluate polynomials\n\n    var sP = -wP * ppp + 2 * wP * pp - wP * p;\n    var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n    var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n    var sN = wN * ppp - wN * pp; // combine data linearly\n\n    for (var i = 0; i !== stride; ++i) {\n      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n    }\n\n    return result;\n  }\n}); // File:src/math/interpolants/DiscreteInterpolant.js\n\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceeding\r\n * the parameter.\r\n *\r\n * @author tschw\r\n */\n\nTHREE.DiscreteInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n};\n\nTHREE.DiscreteInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n  constructor: THREE.DiscreteInterpolant,\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    return this.copySampleValue_(i1 - 1);\n  }\n}); // File:src/math/interpolants/LinearInterpolant.js\n\n/**\r\n * @author tschw\r\n */\n\nTHREE.LinearInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n};\n\nTHREE.LinearInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n  constructor: THREE.LinearInterpolant,\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset1 = i1 * stride,\n        offset0 = offset1 - stride,\n        weight1 = (t - t0) / (t1 - t0),\n        weight0 = 1 - weight1;\n\n    for (var i = 0; i !== stride; ++i) {\n      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n    }\n\n    return result;\n  }\n}); // File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n *\r\n * @author tschw\r\n */\n\nTHREE.QuaternionLinearInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n};\n\nTHREE.QuaternionLinearInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n  constructor: THREE.QuaternionLinearInterpolant,\n  interpolate_: function interpolate_(i1, t0, t, t1) {\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset = i1 * stride,\n        alpha = (t - t0) / (t1 - t0);\n\n    for (var end = offset + stride; offset !== end; offset += 4) {\n      THREE.Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n    }\n\n    return result;\n  }\n}); // File:src/core/Clock.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Clock = function (autoStart) {\n  this.autoStart = autoStart !== undefined ? autoStart : true;\n  this.startTime = 0;\n  this.oldTime = 0;\n  this.elapsedTime = 0;\n  this.running = false;\n};\n\nTHREE.Clock.prototype = {\n  constructor: THREE.Clock,\n  start: function start() {\n    this.startTime = (performance || Date).now();\n    this.oldTime = this.startTime;\n    this.running = true;\n  },\n  stop: function stop() {\n    this.getElapsedTime();\n    this.running = false;\n  },\n  getElapsedTime: function getElapsedTime() {\n    this.getDelta();\n    return this.elapsedTime;\n  },\n  getDelta: function getDelta() {\n    var diff = 0;\n\n    if (this.autoStart && !this.running) {\n      this.start();\n    }\n\n    if (this.running) {\n      var newTime = (performance || Date).now();\n      diff = (newTime - this.oldTime) / 1000;\n      this.oldTime = newTime;\n      this.elapsedTime += diff;\n    }\n\n    return diff;\n  }\n}; // File:src/core/EventDispatcher.js\n\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\n\nTHREE.EventDispatcher = function () {};\n\nObject.assign(THREE.EventDispatcher.prototype, {\n  addEventListener: function addEventListener(type, listener) {\n    if (this._listeners === undefined) this._listeners = {};\n    var listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  },\n  hasEventListener: function hasEventListener(type, listener) {\n    if (this._listeners === undefined) return false;\n    var listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1) {\n      return true;\n    }\n\n    return false;\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (this._listeners === undefined) return;\n    var listeners = this._listeners;\n    var listenerArray = listeners[type];\n\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  },\n  dispatchEvent: function dispatchEvent(event) {\n    if (this._listeners === undefined) return;\n    var listeners = this._listeners;\n    var listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n      var array = [],\n          i = 0;\n      var length = listenerArray.length;\n\n      for (i = 0; i < length; i++) {\n        array[i] = listenerArray[i];\n      }\n\n      for (i = 0; i < length; i++) {\n        array[i].call(this, event);\n      }\n    }\n  }\n}); // File:src/core/Layers.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Layers = function () {\n  this.mask = 1;\n};\n\nTHREE.Layers.prototype = {\n  constructor: THREE.Layers,\n  set: function set(channel) {\n    this.mask = 1 << channel;\n  },\n  enable: function enable(channel) {\n    this.mask |= 1 << channel;\n  },\n  toggle: function toggle(channel) {\n    this.mask ^= 1 << channel;\n  },\n  disable: function disable(channel) {\n    this.mask &= ~(1 << channel);\n  },\n  test: function test(layers) {\n    return (this.mask & layers.mask) !== 0;\n  }\n}; // File:src/core/Raycaster.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\n\n(function (THREE) {\n  THREE.Raycaster = function (origin, direction, near, far) {\n    this.ray = new THREE.Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.near = near || 0;\n    this.far = far || Infinity;\n    this.params = {\n      Mesh: {},\n      Line: {},\n      LOD: {},\n      Points: {\n        threshold: 1\n      },\n      Sprite: {}\n    };\n    Object.defineProperties(this.params, {\n      PointCloud: {\n        get: function get() {\n          console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n          return this.Points;\n        }\n      }\n    });\n  };\n\n  function ascSort(a, b) {\n    return a.distance - b.distance;\n  }\n\n  function _intersectObject(object, raycaster, intersects, recursive) {\n    if (object.visible === false) return;\n    object.raycast(raycaster, intersects);\n\n    if (recursive === true) {\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        _intersectObject(children[i], raycaster, intersects, true);\n      }\n    }\n  } //\n\n\n  THREE.Raycaster.prototype = {\n    constructor: THREE.Raycaster,\n    linePrecision: 1,\n    set: function set(origin, direction) {\n      // direction is assumed to be normalized (for accurate distance calculations)\n      this.ray.set(origin, direction);\n    },\n    setFromCamera: function setFromCamera(coords, camera) {\n      if (camera instanceof THREE.PerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n      } else if (camera instanceof THREE.OrthographicCamera) {\n        this.ray.origin.set(coords.x, coords.y, -1).unproject(camera);\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n      } else {\n        console.error('THREE.Raycaster: Unsupported camera type.');\n      }\n    },\n    intersectObject: function intersectObject(object, recursive) {\n      var intersects = [];\n\n      _intersectObject(object, this, intersects, recursive);\n\n      intersects.sort(ascSort);\n      return intersects;\n    },\n    intersectObjects: function intersectObjects(objects, recursive) {\n      var intersects = [];\n\n      if (Array.isArray(objects) === false) {\n        console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n        return intersects;\n      }\n\n      for (var i = 0, l = objects.length; i < l; i++) {\n        _intersectObject(objects[i], this, intersects, recursive);\n      }\n\n      intersects.sort(ascSort);\n      return intersects;\n    }\n  };\n})(THREE); // File:src/core/Object3D.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\n\n\nTHREE.Object3D = function () {\n  Object.defineProperty(this, 'id', {\n    value: THREE.Object3DIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.type = 'Object3D';\n  this.parent = null;\n  this.children = [];\n  this.up = THREE.Object3D.DefaultUp.clone();\n  var position = new THREE.Vector3();\n  var rotation = new THREE.Euler();\n  var quaternion = new THREE.Quaternion();\n  var scale = new THREE.Vector3(1, 1, 1);\n\n  function onRotationChange() {\n    quaternion.setFromEuler(rotation, false);\n  }\n\n  function onQuaternionChange() {\n    rotation.setFromQuaternion(quaternion, undefined, false);\n  }\n\n  rotation.onChange(onRotationChange);\n  quaternion.onChange(onQuaternionChange);\n  Object.defineProperties(this, {\n    position: {\n      enumerable: true,\n      value: position\n    },\n    rotation: {\n      enumerable: true,\n      value: rotation\n    },\n    quaternion: {\n      enumerable: true,\n      value: quaternion\n    },\n    scale: {\n      enumerable: true,\n      value: scale\n    },\n    modelViewMatrix: {\n      value: new THREE.Matrix4()\n    },\n    normalMatrix: {\n      value: new THREE.Matrix3()\n    }\n  });\n  this.matrix = new THREE.Matrix4();\n  this.matrixWorld = new THREE.Matrix4();\n  this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n  this.matrixWorldNeedsUpdate = false;\n  this.layers = new THREE.Layers();\n  this.visible = true;\n  this.castShadow = false;\n  this.receiveShadow = false;\n  this.frustumCulled = true;\n  this.renderOrder = 0;\n  this.userData = {};\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\nObject.assign(THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n  applyMatrix: function applyMatrix(matrix) {\n    this.matrix.multiplyMatrices(matrix, this.matrix);\n    this.matrix.decompose(this.position, this.quaternion, this.scale);\n  },\n  setRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n    // assumes axis is normalized\n    this.quaternion.setFromAxisAngle(axis, angle);\n  },\n  setRotationFromEuler: function setRotationFromEuler(euler) {\n    this.quaternion.setFromEuler(euler, true);\n  },\n  setRotationFromMatrix: function setRotationFromMatrix(m) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    this.quaternion.setFromRotationMatrix(m);\n  },\n  setRotationFromQuaternion: function setRotationFromQuaternion(q) {\n    // assumes q is normalized\n    this.quaternion.copy(q);\n  },\n  rotateOnAxis: function () {\n    // rotate object on axis in object space\n    // axis is assumed to be normalized\n    var q1 = new THREE.Quaternion();\n    return function (axis, angle) {\n      q1.setFromAxisAngle(axis, angle);\n      this.quaternion.multiply(q1);\n      return this;\n    };\n  }(),\n  rotateX: function () {\n    var v1 = new THREE.Vector3(1, 0, 0);\n    return function (angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  rotateY: function () {\n    var v1 = new THREE.Vector3(0, 1, 0);\n    return function (angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  rotateZ: function () {\n    var v1 = new THREE.Vector3(0, 0, 1);\n    return function (angle) {\n      return this.rotateOnAxis(v1, angle);\n    };\n  }(),\n  translateOnAxis: function () {\n    // translate object by distance along axis in object space\n    // axis is assumed to be normalized\n    var v1 = new THREE.Vector3();\n    return function (axis, distance) {\n      v1.copy(axis).applyQuaternion(this.quaternion);\n      this.position.add(v1.multiplyScalar(distance));\n      return this;\n    };\n  }(),\n  translateX: function () {\n    var v1 = new THREE.Vector3(1, 0, 0);\n    return function (distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  translateY: function () {\n    var v1 = new THREE.Vector3(0, 1, 0);\n    return function (distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  translateZ: function () {\n    var v1 = new THREE.Vector3(0, 0, 1);\n    return function (distance) {\n      return this.translateOnAxis(v1, distance);\n    };\n  }(),\n  localToWorld: function localToWorld(vector) {\n    return vector.applyMatrix4(this.matrixWorld);\n  },\n  worldToLocal: function () {\n    var m1 = new THREE.Matrix4();\n    return function (vector) {\n      return vector.applyMatrix4(m1.getInverse(this.matrixWorld));\n    };\n  }(),\n  lookAt: function () {\n    // This routine does not support objects with rotated and/or translated parent(s)\n    var m1 = new THREE.Matrix4();\n    return function (vector) {\n      m1.lookAt(vector, this.position, this.up);\n      this.quaternion.setFromRotationMatrix(m1);\n    };\n  }(),\n  add: function add(object) {\n    if (arguments.length > 1) {\n      for (var i = 0; i < arguments.length; i++) {\n        this.add(arguments[i]);\n      }\n\n      return this;\n    }\n\n    if (object === this) {\n      console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\n      return this;\n    }\n\n    if (object instanceof THREE.Object3D) {\n      if (object.parent !== null) {\n        object.parent.remove(object);\n      }\n\n      object.parent = this;\n      object.dispatchEvent({\n        type: 'added'\n      });\n      this.children.push(object);\n    } else {\n      console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\n    }\n\n    return this;\n  },\n  remove: function remove(object) {\n    if (arguments.length > 1) {\n      for (var i = 0; i < arguments.length; i++) {\n        this.remove(arguments[i]);\n      }\n    }\n\n    var index = this.children.indexOf(object);\n\n    if (index !== -1) {\n      object.parent = null;\n      object.dispatchEvent({\n        type: 'removed'\n      });\n      this.children.splice(index, 1);\n    }\n  },\n  getObjectById: function getObjectById(id) {\n    return this.getObjectByProperty('id', id);\n  },\n  getObjectByName: function getObjectByName(name) {\n    return this.getObjectByProperty('name', name);\n  },\n  getObjectByProperty: function getObjectByProperty(name, value) {\n    if (this[name] === value) return this;\n\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      var child = this.children[i];\n      var object = child.getObjectByProperty(name, value);\n\n      if (object !== undefined) {\n        return object;\n      }\n    }\n\n    return undefined;\n  },\n  getWorldPosition: function getWorldPosition(optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    this.updateMatrixWorld(true);\n    return result.setFromMatrixPosition(this.matrixWorld);\n  },\n  getWorldQuaternion: function () {\n    var position = new THREE.Vector3();\n    var scale = new THREE.Vector3();\n    return function (optionalTarget) {\n      var result = optionalTarget || new THREE.Quaternion();\n      this.updateMatrixWorld(true);\n      this.matrixWorld.decompose(position, result, scale);\n      return result;\n    };\n  }(),\n  getWorldRotation: function () {\n    var quaternion = new THREE.Quaternion();\n    return function (optionalTarget) {\n      var result = optionalTarget || new THREE.Euler();\n      this.getWorldQuaternion(quaternion);\n      return result.setFromQuaternion(quaternion, this.rotation.order, false);\n    };\n  }(),\n  getWorldScale: function () {\n    var position = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n    return function (optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      this.updateMatrixWorld(true);\n      this.matrixWorld.decompose(position, quaternion, result);\n      return result;\n    };\n  }(),\n  getWorldDirection: function () {\n    var quaternion = new THREE.Quaternion();\n    return function (optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      this.getWorldQuaternion(quaternion);\n      return result.set(0, 0, 1).applyQuaternion(quaternion);\n    };\n  }(),\n  raycast: function raycast() {},\n  traverse: function traverse(callback) {\n    callback(this);\n    var children = this.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].traverse(callback);\n    }\n  },\n  traverseVisible: function traverseVisible(callback) {\n    if (this.visible === false) return;\n    callback(this);\n    var children = this.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].traverseVisible(callback);\n    }\n  },\n  traverseAncestors: function traverseAncestors(callback) {\n    var parent = this.parent;\n\n    if (parent !== null) {\n      callback(parent);\n      parent.traverseAncestors(callback);\n    }\n  },\n  updateMatrix: function updateMatrix() {\n    this.matrix.compose(this.position, this.quaternion, this.scale);\n    this.matrixWorldNeedsUpdate = true;\n  },\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    if (this.matrixAutoUpdate === true) this.updateMatrix();\n\n    if (this.matrixWorldNeedsUpdate === true || force === true) {\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    } // update children\n\n\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  },\n  toJSON: function toJSON(meta) {\n    // meta is '' when called from JSON.stringify\n    var isRootObject = meta === undefined || meta === '';\n    var output = {}; // meta is a hash used to collect geometries, materials.\n    // not providing it implies that this is the root object\n    // being serialized.\n\n    if (isRootObject) {\n      // initialize meta obj\n      meta = {\n        geometries: {},\n        materials: {},\n        textures: {},\n        images: {}\n      };\n      output.metadata = {\n        version: 4.4,\n        type: 'Object',\n        generator: 'Object3D.toJSON'\n      };\n    } // standard Object3D serialization\n\n\n    var object = {};\n    object.uuid = this.uuid;\n    object.type = this.type;\n    if (this.name !== '') object.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n    if (this.castShadow === true) object.castShadow = true;\n    if (this.receiveShadow === true) object.receiveShadow = true;\n    if (this.visible === false) object.visible = false;\n    object.matrix = this.matrix.toArray(); //\n\n    if (this.geometry !== undefined) {\n      if (meta.geometries[this.geometry.uuid] === undefined) {\n        meta.geometries[this.geometry.uuid] = this.geometry.toJSON(meta);\n      }\n\n      object.geometry = this.geometry.uuid;\n    }\n\n    if (this.material !== undefined) {\n      if (meta.materials[this.material.uuid] === undefined) {\n        meta.materials[this.material.uuid] = this.material.toJSON(meta);\n      }\n\n      object.material = this.material.uuid;\n    } //\n\n\n    if (this.children.length > 0) {\n      object.children = [];\n\n      for (var i = 0; i < this.children.length; i++) {\n        object.children.push(this.children[i].toJSON(meta).object);\n      }\n    }\n\n    if (isRootObject) {\n      var geometries = extractFromCache(meta.geometries);\n      var materials = extractFromCache(meta.materials);\n      var textures = extractFromCache(meta.textures);\n      var images = extractFromCache(meta.images);\n      if (geometries.length > 0) output.geometries = geometries;\n      if (materials.length > 0) output.materials = materials;\n      if (textures.length > 0) output.textures = textures;\n      if (images.length > 0) output.images = images;\n    }\n\n    output.object = object;\n    return output; // extract data from the cache hash\n    // remove metadata on each item\n    // and return as array\n\n    function extractFromCache(cache) {\n      var values = [];\n\n      for (var key in cache) {\n        var data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n  },\n  clone: function clone(recursive) {\n    return new this.constructor().copy(this, recursive);\n  },\n  copy: function copy(source, recursive) {\n    if (recursive === undefined) recursive = true;\n    this.name = source.name;\n    this.up.copy(source.up);\n    this.position.copy(source.position);\n    this.quaternion.copy(source.quaternion);\n    this.scale.copy(source.scale);\n    this.matrix.copy(source.matrix);\n    this.matrixWorld.copy(source.matrixWorld);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n    this.visible = source.visible;\n    this.castShadow = source.castShadow;\n    this.receiveShadow = source.receiveShadow;\n    this.frustumCulled = source.frustumCulled;\n    this.renderOrder = source.renderOrder;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n\n    if (recursive === true) {\n      for (var i = 0; i < source.children.length; i++) {\n        var child = source.children[i];\n        this.add(child.clone());\n      }\n    }\n\n    return this;\n  }\n});\nTHREE.Object3DIdCount = 0; // File:src/core/Face3.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Face3 = function (a, b, c, normal, color, materialIndex) {\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n  this.vertexNormals = Array.isArray(normal) ? normal : [];\n  this.color = color instanceof THREE.Color ? color : new THREE.Color();\n  this.vertexColors = Array.isArray(color) ? color : [];\n  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n};\n\nTHREE.Face3.prototype = {\n  constructor: THREE.Face3,\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.a = source.a;\n    this.b = source.b;\n    this.c = source.c;\n    this.normal.copy(source.normal);\n    this.color.copy(source.color);\n    this.materialIndex = source.materialIndex;\n\n    for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n      this.vertexNormals[i] = source.vertexNormals[i].clone();\n    }\n\n    for (var i = 0, il = source.vertexColors.length; i < il; i++) {\n      this.vertexColors[i] = source.vertexColors[i].clone();\n    }\n\n    return this;\n  }\n}; // File:src/core/BufferAttribute.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.BufferAttribute = function (array, itemSize, normalized) {\n  this.uuid = THREE.Math.generateUUID();\n  this.array = array;\n  this.itemSize = itemSize;\n  this.dynamic = false;\n  this.updateRange = {\n    offset: 0,\n    count: -1\n  };\n  this.version = 0;\n  this.normalized = normalized === true;\n};\n\nTHREE.BufferAttribute.prototype = {\n  constructor: THREE.BufferAttribute,\n\n  get count() {\n    return this.array.length / this.itemSize;\n  },\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  },\n\n  setDynamic: function setDynamic(value) {\n    this.dynamic = value;\n    return this;\n  },\n  copy: function copy(source) {\n    this.array = new source.array.constructor(source.array);\n    this.itemSize = source.itemSize;\n    this.dynamic = source.dynamic;\n    return this;\n  },\n  copyAt: function copyAt(index1, attribute, index2) {\n    index1 *= this.itemSize;\n    index2 *= attribute.itemSize;\n\n    for (var i = 0, l = this.itemSize; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n\n    return this;\n  },\n  copyArray: function copyArray(array) {\n    this.array.set(array);\n    return this;\n  },\n  copyColorsArray: function copyColorsArray(colors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = colors.length; i < l; i++) {\n      var color = colors[i];\n\n      if (color === undefined) {\n        console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n        color = new THREE.Color();\n      }\n\n      array[offset++] = color.r;\n      array[offset++] = color.g;\n      array[offset++] = color.b;\n    }\n\n    return this;\n  },\n  copyIndicesArray: function copyIndicesArray(indices) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = indices.length; i < l; i++) {\n      var index = indices[i];\n      array[offset++] = index.a;\n      array[offset++] = index.b;\n      array[offset++] = index.c;\n    }\n\n    return this;\n  },\n  copyVector2sArray: function copyVector2sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n        vector = new THREE.Vector2();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n    }\n\n    return this;\n  },\n  copyVector3sArray: function copyVector3sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n        vector = new THREE.Vector3();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n      array[offset++] = vector.z;\n    }\n\n    return this;\n  },\n  copyVector4sArray: function copyVector4sArray(vectors) {\n    var array = this.array,\n        offset = 0;\n\n    for (var i = 0, l = vectors.length; i < l; i++) {\n      var vector = vectors[i];\n\n      if (vector === undefined) {\n        console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n        vector = new THREE.Vector4();\n      }\n\n      array[offset++] = vector.x;\n      array[offset++] = vector.y;\n      array[offset++] = vector.z;\n      array[offset++] = vector.w;\n    }\n\n    return this;\n  },\n  set: function set(value, offset) {\n    if (offset === undefined) offset = 0;\n    this.array.set(value, offset);\n    return this;\n  },\n  getX: function getX(index) {\n    return this.array[index * this.itemSize];\n  },\n  setX: function setX(index, x) {\n    this.array[index * this.itemSize] = x;\n    return this;\n  },\n  getY: function getY(index) {\n    return this.array[index * this.itemSize + 1];\n  },\n  setY: function setY(index, y) {\n    this.array[index * this.itemSize + 1] = y;\n    return this;\n  },\n  getZ: function getZ(index) {\n    return this.array[index * this.itemSize + 2];\n  },\n  setZ: function setZ(index, z) {\n    this.array[index * this.itemSize + 2] = z;\n    return this;\n  },\n  getW: function getW(index) {\n    return this.array[index * this.itemSize + 3];\n  },\n  setW: function setW(index, w) {\n    this.array[index * this.itemSize + 3] = w;\n    return this;\n  },\n  setXY: function setXY(index, x, y) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    return this;\n  },\n  setXYZ: function setXYZ(index, x, y, z) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    return this;\n  },\n  setXYZW: function setXYZW(index, x, y, z, w) {\n    index *= this.itemSize;\n    this.array[index + 0] = x;\n    this.array[index + 1] = y;\n    this.array[index + 2] = z;\n    this.array[index + 3] = w;\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  }\n}; //\n\nTHREE.Int8Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Int8Array(array), itemSize);\n};\n\nTHREE.Uint8Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Uint8Array(array), itemSize);\n};\n\nTHREE.Uint8ClampedAttribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Uint8ClampedArray(array), itemSize);\n};\n\nTHREE.Int16Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Int16Array(array), itemSize);\n};\n\nTHREE.Uint16Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Uint16Array(array), itemSize);\n};\n\nTHREE.Int32Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Int32Array(array), itemSize);\n};\n\nTHREE.Uint32Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Uint32Array(array), itemSize);\n};\n\nTHREE.Float32Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Float32Array(array), itemSize);\n};\n\nTHREE.Float64Attribute = function (array, itemSize) {\n  return new THREE.BufferAttribute(new Float64Array(array), itemSize);\n}; // Deprecated\n\n\nTHREE.DynamicBufferAttribute = function (array, itemSize) {\n  console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');\n  return new THREE.BufferAttribute(array, itemSize).setDynamic(true);\n}; // File:src/core/InstancedBufferAttribute.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\n\nTHREE.InstancedBufferAttribute = function (array, itemSize, meshPerAttribute) {\n  THREE.BufferAttribute.call(this, array, itemSize);\n  this.meshPerAttribute = meshPerAttribute || 1;\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create(THREE.BufferAttribute.prototype);\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function (source) {\n  THREE.BufferAttribute.prototype.copy.call(this, source);\n  this.meshPerAttribute = source.meshPerAttribute;\n  return this;\n}; // File:src/core/InterleavedBuffer.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\n\nTHREE.InterleavedBuffer = function (array, stride) {\n  this.uuid = THREE.Math.generateUUID();\n  this.array = array;\n  this.stride = stride;\n  this.dynamic = false;\n  this.updateRange = {\n    offset: 0,\n    count: -1\n  };\n  this.version = 0;\n};\n\nTHREE.InterleavedBuffer.prototype = {\n  constructor: THREE.InterleavedBuffer,\n\n  get length() {\n    return this.array.length;\n  },\n\n  get count() {\n    return this.array.length / this.stride;\n  },\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  },\n\n  setDynamic: function setDynamic(value) {\n    this.dynamic = value;\n    return this;\n  },\n  copy: function copy(source) {\n    this.array = new source.array.constructor(source.array);\n    this.stride = source.stride;\n    this.dynamic = source.dynamic;\n    return this;\n  },\n  copyAt: function copyAt(index1, attribute, index2) {\n    index1 *= this.stride;\n    index2 *= attribute.stride;\n\n    for (var i = 0, l = this.stride; i < l; i++) {\n      this.array[index1 + i] = attribute.array[index2 + i];\n    }\n\n    return this;\n  },\n  set: function set(value, offset) {\n    if (offset === undefined) offset = 0;\n    this.array.set(value, offset);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  }\n}; // File:src/core/InstancedInterleavedBuffer.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\nTHREE.InstancedInterleavedBuffer = function (array, stride, meshPerAttribute) {\n  THREE.InterleavedBuffer.call(this, array, stride);\n  this.meshPerAttribute = meshPerAttribute || 1;\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create(THREE.InterleavedBuffer.prototype);\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function (source) {\n  THREE.InterleavedBuffer.prototype.copy.call(this, source);\n  this.meshPerAttribute = source.meshPerAttribute;\n  return this;\n}; // File:src/core/InterleavedBufferAttribute.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\n\nTHREE.InterleavedBufferAttribute = function (interleavedBuffer, itemSize, offset) {\n  this.uuid = THREE.Math.generateUUID();\n  this.data = interleavedBuffer;\n  this.itemSize = itemSize;\n  this.offset = offset;\n};\n\nTHREE.InterleavedBufferAttribute.prototype = {\n  constructor: THREE.InterleavedBufferAttribute,\n\n  get length() {\n    console.warn('THREE.BufferAttribute: .length has been deprecated. Please use .count.');\n    return this.array.length;\n  },\n\n  get count() {\n    return this.data.count;\n  },\n\n  setX: function setX(index, x) {\n    this.data.array[index * this.data.stride + this.offset] = x;\n    return this;\n  },\n  setY: function setY(index, y) {\n    this.data.array[index * this.data.stride + this.offset + 1] = y;\n    return this;\n  },\n  setZ: function setZ(index, z) {\n    this.data.array[index * this.data.stride + this.offset + 2] = z;\n    return this;\n  },\n  setW: function setW(index, w) {\n    this.data.array[index * this.data.stride + this.offset + 3] = w;\n    return this;\n  },\n  getX: function getX(index) {\n    return this.data.array[index * this.data.stride + this.offset];\n  },\n  getY: function getY(index) {\n    return this.data.array[index * this.data.stride + this.offset + 1];\n  },\n  getZ: function getZ(index) {\n    return this.data.array[index * this.data.stride + this.offset + 2];\n  },\n  getW: function getW(index) {\n    return this.data.array[index * this.data.stride + this.offset + 3];\n  },\n  setXY: function setXY(index, x, y) {\n    index = index * this.data.stride + this.offset;\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    return this;\n  },\n  setXYZ: function setXYZ(index, x, y, z) {\n    index = index * this.data.stride + this.offset;\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    return this;\n  },\n  setXYZW: function setXYZW(index, x, y, z, w) {\n    index = index * this.data.stride + this.offset;\n    this.data.array[index + 0] = x;\n    this.data.array[index + 1] = y;\n    this.data.array[index + 2] = z;\n    this.data.array[index + 3] = w;\n    return this;\n  }\n}; // File:src/core/Geometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\n\nTHREE.Geometry = function () {\n  Object.defineProperty(this, 'id', {\n    value: THREE.GeometryIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.type = 'Geometry';\n  this.vertices = [];\n  this.colors = [];\n  this.faces = [];\n  this.faceVertexUvs = [[]];\n  this.morphTargets = [];\n  this.morphNormals = [];\n  this.skinWeights = [];\n  this.skinIndices = [];\n  this.lineDistances = [];\n  this.boundingBox = null;\n  this.boundingSphere = null; // update flags\n\n  this.verticesNeedUpdate = false;\n  this.elementsNeedUpdate = false;\n  this.uvsNeedUpdate = false;\n  this.normalsNeedUpdate = false;\n  this.colorsNeedUpdate = false;\n  this.lineDistancesNeedUpdate = false;\n  this.groupsNeedUpdate = false;\n};\n\nObject.assign(THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n  applyMatrix: function applyMatrix(matrix) {\n    var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n\n    for (var i = 0, il = this.vertices.length; i < il; i++) {\n      var vertex = this.vertices[i];\n      vertex.applyMatrix4(matrix);\n    }\n\n    for (var i = 0, il = this.faces.length; i < il; i++) {\n      var face = this.faces[i];\n      face.normal.applyMatrix3(normalMatrix).normalize();\n\n      for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n      }\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    this.verticesNeedUpdate = true;\n    this.normalsNeedUpdate = true;\n    return this;\n  },\n  rotateX: function () {\n    // rotate geometry around world x-axis\n    var m1;\n    return function rotateX(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationX(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateY: function () {\n    // rotate geometry around world y-axis\n    var m1;\n    return function rotateY(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationY(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateZ: function () {\n    // rotate geometry around world z-axis\n    var m1;\n    return function rotateZ(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationZ(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  translate: function () {\n    // translate geometry\n    var m1;\n    return function translate(x, y, z) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeTranslation(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  scale: function () {\n    // scale geometry\n    var m1;\n    return function scale(x, y, z) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeScale(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  lookAt: function () {\n    var obj;\n    return function lookAt(vector) {\n      if (obj === undefined) obj = new THREE.Object3D();\n      obj.lookAt(vector);\n      obj.updateMatrix();\n      this.applyMatrix(obj.matrix);\n    };\n  }(),\n  fromBufferGeometry: function fromBufferGeometry(geometry) {\n    var scope = this;\n    var indices = geometry.index !== null ? geometry.index.array : undefined;\n    var attributes = geometry.attributes;\n    var positions = attributes.position.array;\n    var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n    var colors = attributes.color !== undefined ? attributes.color.array : undefined;\n    var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n    var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n    if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n    var tempNormals = [];\n    var tempUVs = [];\n    var tempUVs2 = [];\n\n    for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      scope.vertices.push(new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]));\n\n      if (normals !== undefined) {\n        tempNormals.push(new THREE.Vector3(normals[i], normals[i + 1], normals[i + 2]));\n      }\n\n      if (colors !== undefined) {\n        scope.colors.push(new THREE.Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      if (uvs !== undefined) {\n        tempUVs.push(new THREE.Vector2(uvs[j], uvs[j + 1]));\n      }\n\n      if (uvs2 !== undefined) {\n        tempUVs2.push(new THREE.Vector2(uvs2[j], uvs2[j + 1]));\n      }\n    }\n\n    function addFace(a, b, c, materialIndex) {\n      var vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];\n      var vertexColors = colors !== undefined ? [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()] : [];\n      var face = new THREE.Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n      scope.faces.push(face);\n\n      if (uvs !== undefined) {\n        scope.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);\n      }\n\n      if (uvs2 !== undefined) {\n        scope.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);\n      }\n    }\n\n    if (indices !== undefined) {\n      var groups = geometry.groups;\n\n      if (groups.length > 0) {\n        for (var i = 0; i < groups.length; i++) {\n          var group = groups[i];\n          var start = group.start;\n          var count = group.count;\n\n          for (var j = start, jl = start + count; j < jl; j += 3) {\n            addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n          }\n        }\n      } else {\n        for (var i = 0; i < indices.length; i += 3) {\n          addFace(indices[i], indices[i + 1], indices[i + 2]);\n        }\n      }\n    } else {\n      for (var i = 0; i < positions.length / 3; i += 3) {\n        addFace(i, i + 1, i + 2);\n      }\n    }\n\n    this.computeFaceNormals();\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    return this;\n  },\n  center: function center() {\n    this.computeBoundingBox();\n    var offset = this.boundingBox.center().negate();\n    this.translate(offset.x, offset.y, offset.z);\n    return offset;\n  },\n  normalize: function normalize() {\n    this.computeBoundingSphere();\n    var center = this.boundingSphere.center;\n    var radius = this.boundingSphere.radius;\n    var s = radius === 0 ? 1 : 1.0 / radius;\n    var matrix = new THREE.Matrix4();\n    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n    this.applyMatrix(matrix);\n    return this;\n  },\n  computeFaceNormals: function computeFaceNormals() {\n    var cb = new THREE.Vector3(),\n        ab = new THREE.Vector3();\n\n    for (var f = 0, fl = this.faces.length; f < fl; f++) {\n      var face = this.faces[f];\n      var vA = this.vertices[face.a];\n      var vB = this.vertices[face.b];\n      var vC = this.vertices[face.c];\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab);\n      cb.normalize();\n      face.normal.copy(cb);\n    }\n  },\n  computeVertexNormals: function computeVertexNormals(areaWeighted) {\n    if (areaWeighted === undefined) areaWeighted = true;\n    var v, vl, f, fl, face, vertices;\n    vertices = new Array(this.vertices.length);\n\n    for (v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v] = new THREE.Vector3();\n    }\n\n    if (areaWeighted) {\n      // vertex normals weighted by triangle areas\n      // http://www.iquilezles.org/www/articles/normals/normals.htm\n      var vA, vB, vC;\n      var cb = new THREE.Vector3(),\n          ab = new THREE.Vector3();\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        vA = this.vertices[face.a];\n        vB = this.vertices[face.b];\n        vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        vertices[face.a].add(cb);\n        vertices[face.b].add(cb);\n        vertices[face.c].add(cb);\n      }\n    } else {\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        vertices[face.a].add(face.normal);\n        vertices[face.b].add(face.normal);\n        vertices[face.c].add(face.normal);\n      }\n    }\n\n    for (v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v].normalize();\n    }\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(vertices[face.a]);\n        vertexNormals[1].copy(vertices[face.b]);\n        vertexNormals[2].copy(vertices[face.c]);\n      } else {\n        vertexNormals[0] = vertices[face.a].clone();\n        vertexNormals[1] = vertices[face.b].clone();\n        vertexNormals[2] = vertices[face.c].clone();\n      }\n    }\n\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  },\n  computeMorphNormals: function computeMorphNormals() {\n    var i, il, f, fl, face; // save original normals\n    // - create temp variables on first access\n    //   otherwise just copy (for faster repeated calls)\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n\n      if (!face.__originalFaceNormal) {\n        face.__originalFaceNormal = face.normal.clone();\n      } else {\n        face.__originalFaceNormal.copy(face.normal);\n      }\n\n      if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n      for (i = 0, il = face.vertexNormals.length; i < il; i++) {\n        if (!face.__originalVertexNormals[i]) {\n          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n        } else {\n          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n        }\n      }\n    } // use temp geometry to compute face and vertex normals for each morph\n\n\n    var tmpGeo = new THREE.Geometry();\n    tmpGeo.faces = this.faces;\n\n    for (i = 0, il = this.morphTargets.length; i < il; i++) {\n      // create on first access\n      if (!this.morphNormals[i]) {\n        this.morphNormals[i] = {};\n        this.morphNormals[i].faceNormals = [];\n        this.morphNormals[i].vertexNormals = [];\n        var dstNormalsFace = this.morphNormals[i].faceNormals;\n        var dstNormalsVertex = this.morphNormals[i].vertexNormals;\n        var faceNormal, vertexNormals;\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          faceNormal = new THREE.Vector3();\n          vertexNormals = {\n            a: new THREE.Vector3(),\n            b: new THREE.Vector3(),\n            c: new THREE.Vector3()\n          };\n          dstNormalsFace.push(faceNormal);\n          dstNormalsVertex.push(vertexNormals);\n        }\n      }\n\n      var morphNormals = this.morphNormals[i]; // set vertices to morph target\n\n      tmpGeo.vertices = this.morphTargets[i].vertices; // compute morph normals\n\n      tmpGeo.computeFaceNormals();\n      tmpGeo.computeVertexNormals(); // store morph normals\n\n      var faceNormal, vertexNormals;\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        faceNormal = morphNormals.faceNormals[f];\n        vertexNormals = morphNormals.vertexNormals[f];\n        faceNormal.copy(face.normal);\n        vertexNormals.a.copy(face.vertexNormals[0]);\n        vertexNormals.b.copy(face.vertexNormals[1]);\n        vertexNormals.c.copy(face.vertexNormals[2]);\n      }\n    } // restore original normals\n\n\n    for (f = 0, fl = this.faces.length; f < fl; f++) {\n      face = this.faces[f];\n      face.normal = face.__originalFaceNormal;\n      face.vertexNormals = face.__originalVertexNormals;\n    }\n  },\n  computeTangents: function computeTangents() {\n    console.warn('THREE.Geometry: .computeTangents() has been removed.');\n  },\n  computeLineDistances: function computeLineDistances() {\n    var d = 0;\n    var vertices = this.vertices;\n\n    for (var i = 0, il = vertices.length; i < il; i++) {\n      if (i > 0) {\n        d += vertices[i].distanceTo(vertices[i - 1]);\n      }\n\n      this.lineDistances[i] = d;\n    }\n  },\n  computeBoundingBox: function computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new THREE.Box3();\n    }\n\n    this.boundingBox.setFromPoints(this.vertices);\n  },\n  computeBoundingSphere: function computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new THREE.Sphere();\n    }\n\n    this.boundingSphere.setFromPoints(this.vertices);\n  },\n  merge: function merge(geometry, matrix, materialIndexOffset) {\n    if (geometry instanceof THREE.Geometry === false) {\n      console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n      return;\n    }\n\n    var normalMatrix,\n        vertexOffset = this.vertices.length,\n        vertices1 = this.vertices,\n        vertices2 = geometry.vertices,\n        faces1 = this.faces,\n        faces2 = geometry.faces,\n        uvs1 = this.faceVertexUvs[0],\n        uvs2 = geometry.faceVertexUvs[0];\n    if (materialIndexOffset === undefined) materialIndexOffset = 0;\n\n    if (matrix !== undefined) {\n      normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n    } // vertices\n\n\n    for (var i = 0, il = vertices2.length; i < il; i++) {\n      var vertex = vertices2[i];\n      var vertexCopy = vertex.clone();\n      if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n      vertices1.push(vertexCopy);\n    } // faces\n\n\n    for (i = 0, il = faces2.length; i < il; i++) {\n      var face = faces2[i],\n          faceCopy,\n          normal,\n          color,\n          faceVertexNormals = face.vertexNormals,\n          faceVertexColors = face.vertexColors;\n      faceCopy = new THREE.Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n      faceCopy.normal.copy(face.normal);\n\n      if (normalMatrix !== undefined) {\n        faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n      }\n\n      for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n        normal = faceVertexNormals[j].clone();\n\n        if (normalMatrix !== undefined) {\n          normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        faceCopy.vertexNormals.push(normal);\n      }\n\n      faceCopy.color.copy(face.color);\n\n      for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {\n        color = faceVertexColors[j];\n        faceCopy.vertexColors.push(color.clone());\n      }\n\n      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n      faces1.push(faceCopy);\n    } // uvs\n\n\n    for (i = 0, il = uvs2.length; i < il; i++) {\n      var uv = uvs2[i],\n          uvCopy = [];\n\n      if (uv === undefined) {\n        continue;\n      }\n\n      for (var j = 0, jl = uv.length; j < jl; j++) {\n        uvCopy.push(uv[j].clone());\n      }\n\n      uvs1.push(uvCopy);\n    }\n  },\n  mergeMesh: function mergeMesh(mesh) {\n    if (mesh instanceof THREE.Mesh === false) {\n      console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n      return;\n    }\n\n    mesh.matrixAutoUpdate && mesh.updateMatrix();\n    this.merge(mesh.geometry, mesh.matrix);\n  },\n\n  /*\r\n   * Checks for duplicate vertices with hashmap.\r\n   * Duplicated vertices are removed\r\n   * and faces' vertices are updated.\r\n   */\n  mergeVertices: function mergeVertices() {\n    var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n    var unique = [],\n        changes = [];\n    var v, key;\n    var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\n    var precision = Math.pow(10, precisionPoints);\n    var i, il, face;\n    var indices, j, jl;\n\n    for (i = 0, il = this.vertices.length; i < il; i++) {\n      v = this.vertices[i];\n      key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n\n      if (verticesMap[key] === undefined) {\n        verticesMap[key] = i;\n        unique.push(this.vertices[i]);\n        changes[i] = unique.length - 1;\n      } else {\n        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n        changes[i] = changes[verticesMap[key]];\n      }\n    } // if faces are completely degenerate after merging vertices, we\n    // have to remove them from the geometry.\n\n\n    var faceIndicesToRemove = [];\n\n    for (i = 0, il = this.faces.length; i < il; i++) {\n      face = this.faces[i];\n      face.a = changes[face.a];\n      face.b = changes[face.b];\n      face.c = changes[face.c];\n      indices = [face.a, face.b, face.c];\n      var dupIndex = -1; // if any duplicate vertices are found in a Face3\n      // we have to remove the face as nothing can be saved\n\n      for (var n = 0; n < 3; n++) {\n        if (indices[n] === indices[(n + 1) % 3]) {\n          dupIndex = n;\n          faceIndicesToRemove.push(i);\n          break;\n        }\n      }\n    }\n\n    for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n      var idx = faceIndicesToRemove[i];\n      this.faces.splice(idx, 1);\n\n      for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n        this.faceVertexUvs[j].splice(idx, 1);\n      }\n    } // Use unique set of vertices\n\n\n    var diff = this.vertices.length - unique.length;\n    this.vertices = unique;\n    return diff;\n  },\n  sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {\n    var faces = this.faces;\n    var length = faces.length; // tag faces\n\n    for (var i = 0; i < length; i++) {\n      faces[i]._id = i;\n    } // sort faces\n\n\n    function materialIndexSort(a, b) {\n      return a.materialIndex - b.materialIndex;\n    }\n\n    faces.sort(materialIndexSort); // sort uvs\n\n    var uvs1 = this.faceVertexUvs[0];\n    var uvs2 = this.faceVertexUvs[1];\n    var newUvs1, newUvs2;\n    if (uvs1 && uvs1.length === length) newUvs1 = [];\n    if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n    for (var i = 0; i < length; i++) {\n      var id = faces[i]._id;\n      if (newUvs1) newUvs1.push(uvs1[id]);\n      if (newUvs2) newUvs2.push(uvs2[id]);\n    }\n\n    if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n    if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n  },\n  toJSON: function toJSON() {\n    var data = {\n      metadata: {\n        version: 4.4,\n        type: 'Geometry',\n        generator: 'Geometry.toJSON'\n      }\n    }; // standard Geometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n\n    if (this.parameters !== undefined) {\n      var parameters = this.parameters;\n\n      for (var key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n\n      return data;\n    }\n\n    var vertices = [];\n\n    for (var i = 0; i < this.vertices.length; i++) {\n      var vertex = this.vertices[i];\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    var faces = [];\n    var normals = [];\n    var normalsHash = {};\n    var colors = [];\n    var colorsHash = {};\n    var uvs = [];\n    var uvsHash = {};\n\n    for (var i = 0; i < this.faces.length; i++) {\n      var face = this.faces[i];\n      var hasMaterial = true;\n      var hasFaceUv = false; // deprecated\n\n      var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n      var hasFaceNormal = face.normal.length() > 0;\n      var hasFaceVertexNormal = face.vertexNormals.length > 0;\n      var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n      var hasFaceVertexColor = face.vertexColors.length > 0;\n      var faceType = 0;\n      faceType = setBit(faceType, 0, 0); // isQuad\n\n      faceType = setBit(faceType, 1, hasMaterial);\n      faceType = setBit(faceType, 2, hasFaceUv);\n      faceType = setBit(faceType, 3, hasFaceVertexUv);\n      faceType = setBit(faceType, 4, hasFaceNormal);\n      faceType = setBit(faceType, 5, hasFaceVertexNormal);\n      faceType = setBit(faceType, 6, hasFaceColor);\n      faceType = setBit(faceType, 7, hasFaceVertexColor);\n      faces.push(faceType);\n      faces.push(face.a, face.b, face.c);\n      faces.push(face.materialIndex);\n\n      if (hasFaceVertexUv) {\n        var faceVertexUvs = this.faceVertexUvs[0][i];\n        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n      }\n\n      if (hasFaceNormal) {\n        faces.push(getNormalIndex(face.normal));\n      }\n\n      if (hasFaceVertexNormal) {\n        var vertexNormals = face.vertexNormals;\n        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n      }\n\n      if (hasFaceColor) {\n        faces.push(getColorIndex(face.color));\n      }\n\n      if (hasFaceVertexColor) {\n        var vertexColors = face.vertexColors;\n        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n      }\n    }\n\n    function setBit(value, position, enabled) {\n      return enabled ? value | 1 << position : value & ~(1 << position);\n    }\n\n    function getNormalIndex(normal) {\n      var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n      if (normalsHash[hash] !== undefined) {\n        return normalsHash[hash];\n      }\n\n      normalsHash[hash] = normals.length / 3;\n      normals.push(normal.x, normal.y, normal.z);\n      return normalsHash[hash];\n    }\n\n    function getColorIndex(color) {\n      var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n      if (colorsHash[hash] !== undefined) {\n        return colorsHash[hash];\n      }\n\n      colorsHash[hash] = colors.length;\n      colors.push(color.getHex());\n      return colorsHash[hash];\n    }\n\n    function getUvIndex(uv) {\n      var hash = uv.x.toString() + uv.y.toString();\n\n      if (uvsHash[hash] !== undefined) {\n        return uvsHash[hash];\n      }\n\n      uvsHash[hash] = uvs.length / 2;\n      uvs.push(uv.x, uv.y);\n      return uvsHash[hash];\n    }\n\n    data.data = {};\n    data.data.vertices = vertices;\n    data.data.normals = normals;\n    if (colors.length > 0) data.data.colors = colors;\n    if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n    data.data.faces = faces;\n    return data;\n  },\n  clone: function clone() {\n    /*\r\n    // Handle primitives\r\n    \t\tvar parameters = this.parameters;\r\n    \t\tif ( parameters !== undefined ) {\r\n    \t\t\tvar values = [];\r\n    \t\t\tfor ( var key in parameters ) {\r\n    \t\t\t\tvalues.push( parameters[ key ] );\r\n    \t\t\t}\r\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n    \tthis.constructor.apply( geometry, values );\r\n    \treturn geometry;\r\n    \t\t}\r\n    \t\treturn new this.constructor().copy( this );\r\n    */\n    return new THREE.Geometry().copy(this);\n  },\n  copy: function copy(source) {\n    this.vertices = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    var vertices = source.vertices;\n\n    for (var i = 0, il = vertices.length; i < il; i++) {\n      this.vertices.push(vertices[i].clone());\n    }\n\n    var faces = source.faces;\n\n    for (var i = 0, il = faces.length; i < il; i++) {\n      this.faces.push(faces[i].clone());\n    }\n\n    for (var i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n      var faceVertexUvs = source.faceVertexUvs[i];\n\n      if (this.faceVertexUvs[i] === undefined) {\n        this.faceVertexUvs[i] = [];\n      }\n\n      for (var j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n        var uvs = faceVertexUvs[j],\n            uvsCopy = [];\n\n        for (var k = 0, kl = uvs.length; k < kl; k++) {\n          var uv = uvs[k];\n          uvsCopy.push(uv.clone());\n        }\n\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nTHREE.GeometryIdCount = 0; // File:src/core/DirectGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.DirectGeometry = function () {\n  Object.defineProperty(this, 'id', {\n    value: THREE.GeometryIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.type = 'DirectGeometry';\n  this.indices = [];\n  this.vertices = [];\n  this.normals = [];\n  this.colors = [];\n  this.uvs = [];\n  this.uvs2 = [];\n  this.groups = [];\n  this.morphTargets = {};\n  this.skinWeights = [];\n  this.skinIndices = []; // this.lineDistances = [];\n\n  this.boundingBox = null;\n  this.boundingSphere = null; // update flags\n\n  this.verticesNeedUpdate = false;\n  this.normalsNeedUpdate = false;\n  this.colorsNeedUpdate = false;\n  this.uvsNeedUpdate = false;\n  this.groupsNeedUpdate = false;\n};\n\nObject.assign(THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n  computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n  computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n  computeFaceNormals: function computeFaceNormals() {\n    console.warn('THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.');\n  },\n  computeVertexNormals: function computeVertexNormals() {\n    console.warn('THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.');\n  },\n  computeGroups: function computeGroups(geometry) {\n    var group;\n    var groups = [];\n    var materialIndex;\n    var faces = geometry.faces;\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i]; // materials\n\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        group = {\n          start: i * 3,\n          materialIndex: materialIndex\n        };\n      }\n    }\n\n    if (group !== undefined) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n\n    this.groups = groups;\n  },\n  fromGeometry: function fromGeometry(geometry) {\n    var faces = geometry.faces;\n    var vertices = geometry.vertices;\n    var faceVertexUvs = geometry.faceVertexUvs;\n    var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n    var morphTargets = geometry.morphTargets;\n    var morphTargetsLength = morphTargets.length;\n    var morphTargetsPosition;\n\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n\n      for (var i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = [];\n      }\n\n      this.morphTargets.position = morphTargetsPosition;\n    }\n\n    var morphNormals = geometry.morphNormals;\n    var morphNormalsLength = morphNormals.length;\n    var morphTargetsNormal;\n\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n\n      for (var i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = [];\n      }\n\n      this.morphTargets.normal = morphTargetsNormal;\n    } // skins\n\n\n    var skinIndices = geometry.skinIndices;\n    var skinWeights = geometry.skinWeights;\n    var hasSkinIndices = skinIndices.length === vertices.length;\n    var hasSkinWeights = skinWeights.length === vertices.length; //\n\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      var vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        var normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n\n      var vertexColors = face.vertexColors;\n\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        var color = face.color;\n        this.colors.push(color, color, color);\n      }\n\n      if (hasFaceVertexUv === true) {\n        var vertexUvs = faceVertexUvs[0][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n          this.uvs.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2());\n        }\n      }\n\n      if (hasFaceVertexUv2 === true) {\n        var vertexUvs = faceVertexUvs[1][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n          this.uvs2.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2());\n        }\n      } // morphs\n\n\n      for (var j = 0; j < morphTargetsLength; j++) {\n        var morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n\n      for (var j = 0; j < morphNormalsLength; j++) {\n        var morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);\n      } // skins\n\n\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}); // File:src/core/BufferGeometry.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.BufferGeometry = function () {\n  Object.defineProperty(this, 'id', {\n    value: THREE.GeometryIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.type = 'BufferGeometry';\n  this.index = null;\n  this.attributes = {};\n  this.morphAttributes = {};\n  this.groups = [];\n  this.boundingBox = null;\n  this.boundingSphere = null;\n  this.drawRange = {\n    start: 0,\n    count: Infinity\n  };\n};\n\nObject.assign(THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n  getIndex: function getIndex() {\n    return this.index;\n  },\n  setIndex: function setIndex(index) {\n    this.index = index;\n  },\n  addAttribute: function addAttribute(name, attribute) {\n    if (attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false) {\n      console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n      this.addAttribute(name, new THREE.BufferAttribute(arguments[1], arguments[2]));\n      return;\n    }\n\n    if (name === 'index') {\n      console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n      this.setIndex(attribute);\n      return;\n    }\n\n    this.attributes[name] = attribute;\n    return this;\n  },\n  getAttribute: function getAttribute(name) {\n    return this.attributes[name];\n  },\n  removeAttribute: function removeAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  },\n  addGroup: function addGroup(start, count, materialIndex) {\n    this.groups.push({\n      start: start,\n      count: count,\n      materialIndex: materialIndex !== undefined ? materialIndex : 0\n    });\n  },\n  clearGroups: function clearGroups() {\n    this.groups = [];\n  },\n  setDrawRange: function setDrawRange(start, count) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  },\n  applyMatrix: function applyMatrix(matrix) {\n    var position = this.attributes.position;\n\n    if (position !== undefined) {\n      matrix.applyToVector3Array(position.array);\n      position.needsUpdate = true;\n    }\n\n    var normal = this.attributes.normal;\n\n    if (normal !== undefined) {\n      var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n      normalMatrix.applyToVector3Array(normal.array);\n      normal.needsUpdate = true;\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    return this;\n  },\n  rotateX: function () {\n    // rotate geometry around world x-axis\n    var m1;\n    return function rotateX(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationX(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateY: function () {\n    // rotate geometry around world y-axis\n    var m1;\n    return function rotateY(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationY(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  rotateZ: function () {\n    // rotate geometry around world z-axis\n    var m1;\n    return function rotateZ(angle) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeRotationZ(angle);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  translate: function () {\n    // translate geometry\n    var m1;\n    return function translate(x, y, z) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeTranslation(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  scale: function () {\n    // scale geometry\n    var m1;\n    return function scale(x, y, z) {\n      if (m1 === undefined) m1 = new THREE.Matrix4();\n      m1.makeScale(x, y, z);\n      this.applyMatrix(m1);\n      return this;\n    };\n  }(),\n  lookAt: function () {\n    var obj;\n    return function lookAt(vector) {\n      if (obj === undefined) obj = new THREE.Object3D();\n      obj.lookAt(vector);\n      obj.updateMatrix();\n      this.applyMatrix(obj.matrix);\n    };\n  }(),\n  center: function center() {\n    this.computeBoundingBox();\n    var offset = this.boundingBox.center().negate();\n    this.translate(offset.x, offset.y, offset.z);\n    return offset;\n  },\n  setFromObject: function setFromObject(object) {\n    // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n    var geometry = object.geometry;\n\n    if (object instanceof THREE.Points || object instanceof THREE.Line) {\n      var positions = new THREE.Float32Attribute(geometry.vertices.length * 3, 3);\n      var colors = new THREE.Float32Attribute(geometry.colors.length * 3, 3);\n      this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));\n      this.addAttribute('color', colors.copyColorsArray(geometry.colors));\n\n      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n        var lineDistances = new THREE.Float32Attribute(geometry.lineDistances.length, 1);\n        this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n      }\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n    } else if (object instanceof THREE.Mesh) {\n      if (geometry instanceof THREE.Geometry) {\n        this.fromGeometry(geometry);\n      }\n    }\n\n    return this;\n  },\n  updateFromObject: function updateFromObject(object) {\n    var geometry = object.geometry;\n\n    if (object instanceof THREE.Mesh) {\n      var direct = geometry.__directGeometry;\n\n      if (direct === undefined) {\n        return this.fromGeometry(geometry);\n      }\n\n      direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n      direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n      direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n      direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n      direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n      geometry.verticesNeedUpdate = false;\n      geometry.normalsNeedUpdate = false;\n      geometry.colorsNeedUpdate = false;\n      geometry.uvsNeedUpdate = false;\n      geometry.groupsNeedUpdate = false;\n      geometry = direct;\n    }\n\n    if (geometry.verticesNeedUpdate === true) {\n      var attribute = this.attributes.position;\n\n      if (attribute !== undefined) {\n        attribute.copyVector3sArray(geometry.vertices);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.verticesNeedUpdate = false;\n    }\n\n    if (geometry.normalsNeedUpdate === true) {\n      var attribute = this.attributes.normal;\n\n      if (attribute !== undefined) {\n        attribute.copyVector3sArray(geometry.normals);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.normalsNeedUpdate = false;\n    }\n\n    if (geometry.colorsNeedUpdate === true) {\n      var attribute = this.attributes.color;\n\n      if (attribute !== undefined) {\n        attribute.copyColorsArray(geometry.colors);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.colorsNeedUpdate = false;\n    }\n\n    if (geometry.uvsNeedUpdate) {\n      var attribute = this.attributes.uv;\n\n      if (attribute !== undefined) {\n        attribute.copyVector2sArray(geometry.uvs);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.uvsNeedUpdate = false;\n    }\n\n    if (geometry.lineDistancesNeedUpdate) {\n      var attribute = this.attributes.lineDistance;\n\n      if (attribute !== undefined) {\n        attribute.copyArray(geometry.lineDistances);\n        attribute.needsUpdate = true;\n      }\n\n      geometry.lineDistancesNeedUpdate = false;\n    }\n\n    if (geometry.groupsNeedUpdate) {\n      geometry.computeGroups(object.geometry);\n      this.groups = geometry.groups;\n      geometry.groupsNeedUpdate = false;\n    }\n\n    return this;\n  },\n  fromGeometry: function fromGeometry(geometry) {\n    geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry(geometry);\n    return this.fromDirectGeometry(geometry.__directGeometry);\n  },\n  fromDirectGeometry: function fromDirectGeometry(geometry) {\n    var positions = new Float32Array(geometry.vertices.length * 3);\n    this.addAttribute('position', new THREE.BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n    if (geometry.normals.length > 0) {\n      var normals = new Float32Array(geometry.normals.length * 3);\n      this.addAttribute('normal', new THREE.BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n    }\n\n    if (geometry.colors.length > 0) {\n      var colors = new Float32Array(geometry.colors.length * 3);\n      this.addAttribute('color', new THREE.BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n    }\n\n    if (geometry.uvs.length > 0) {\n      var uvs = new Float32Array(geometry.uvs.length * 2);\n      this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n    }\n\n    if (geometry.uvs2.length > 0) {\n      var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n      this.addAttribute('uv2', new THREE.BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n    }\n\n    if (geometry.indices.length > 0) {\n      var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n      var indices = new TypeArray(geometry.indices.length * 3);\n      this.setIndex(new THREE.BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n    } // groups\n\n\n    this.groups = geometry.groups; // morphs\n\n    for (var name in geometry.morphTargets) {\n      var array = [];\n      var morphTargets = geometry.morphTargets[name];\n\n      for (var i = 0, l = morphTargets.length; i < l; i++) {\n        var morphTarget = morphTargets[i];\n        var attribute = new THREE.Float32Attribute(morphTarget.length * 3, 3);\n        array.push(attribute.copyVector3sArray(morphTarget));\n      }\n\n      this.morphAttributes[name] = array;\n    } // skinning\n\n\n    if (geometry.skinIndices.length > 0) {\n      var skinIndices = new THREE.Float32Attribute(geometry.skinIndices.length * 4, 4);\n      this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n    }\n\n    if (geometry.skinWeights.length > 0) {\n      var skinWeights = new THREE.Float32Attribute(geometry.skinWeights.length * 4, 4);\n      this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n    } //\n\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return this;\n  },\n  computeBoundingBox: function computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new THREE.Box3();\n    }\n\n    var positions = this.attributes.position.array;\n\n    if (positions !== undefined) {\n      this.boundingBox.setFromArray(positions);\n    } else {\n      this.boundingBox.makeEmpty();\n    }\n\n    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n      console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n    }\n  },\n  computeBoundingSphere: function () {\n    var box = new THREE.Box3();\n    var vector = new THREE.Vector3();\n    return function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new THREE.Sphere();\n      }\n\n      var positions = this.attributes.position.array;\n\n      if (positions) {\n        var center = this.boundingSphere.center;\n        box.setFromArray(positions);\n        box.center(center); // hoping to find a boundingSphere with a radius smaller than the\n        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = positions.length; i < il; i += 3) {\n          vector.fromArray(positions, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n        }\n\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n        }\n      }\n    };\n  }(),\n  computeFaceNormals: function computeFaceNormals() {// backwards compatibility\n  },\n  computeVertexNormals: function computeVertexNormals() {\n    var index = this.index;\n    var attributes = this.attributes;\n    var groups = this.groups;\n\n    if (attributes.position) {\n      var positions = attributes.position.array;\n\n      if (attributes.normal === undefined) {\n        this.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(positions.length), 3));\n      } else {\n        // reset existing normals to zero\n        var array = attributes.normal.array;\n\n        for (var i = 0, il = array.length; i < il; i++) {\n          array[i] = 0;\n        }\n      }\n\n      var normals = attributes.normal.array;\n      var vA,\n          vB,\n          vC,\n          pA = new THREE.Vector3(),\n          pB = new THREE.Vector3(),\n          pC = new THREE.Vector3(),\n          cb = new THREE.Vector3(),\n          ab = new THREE.Vector3(); // indexed elements\n\n      if (index) {\n        var indices = index.array;\n\n        if (groups.length === 0) {\n          this.addGroup(0, indices.length);\n        }\n\n        for (var j = 0, jl = groups.length; j < jl; ++j) {\n          var group = groups[j];\n          var start = group.start;\n          var count = group.count;\n\n          for (var i = start, il = start + count; i < il; i += 3) {\n            vA = indices[i + 0] * 3;\n            vB = indices[i + 1] * 3;\n            vC = indices[i + 2] * 3;\n            pA.fromArray(positions, vA);\n            pB.fromArray(positions, vB);\n            pC.fromArray(positions, vC);\n            cb.subVectors(pC, pB);\n            ab.subVectors(pA, pB);\n            cb.cross(ab);\n            normals[vA] += cb.x;\n            normals[vA + 1] += cb.y;\n            normals[vA + 2] += cb.z;\n            normals[vB] += cb.x;\n            normals[vB + 1] += cb.y;\n            normals[vB + 2] += cb.z;\n            normals[vC] += cb.x;\n            normals[vC + 1] += cb.y;\n            normals[vC + 2] += cb.z;\n          }\n        }\n      } else {\n        // non-indexed elements (unconnected triangle soup)\n        for (var i = 0, il = positions.length; i < il; i += 9) {\n          pA.fromArray(positions, i);\n          pB.fromArray(positions, i + 3);\n          pC.fromArray(positions, i + 6);\n          cb.subVectors(pC, pB);\n          ab.subVectors(pA, pB);\n          cb.cross(ab);\n          normals[i] = cb.x;\n          normals[i + 1] = cb.y;\n          normals[i + 2] = cb.z;\n          normals[i + 3] = cb.x;\n          normals[i + 4] = cb.y;\n          normals[i + 5] = cb.z;\n          normals[i + 6] = cb.x;\n          normals[i + 7] = cb.y;\n          normals[i + 8] = cb.z;\n        }\n      }\n\n      this.normalizeNormals();\n      attributes.normal.needsUpdate = true;\n    }\n  },\n  merge: function merge(geometry, offset) {\n    if (geometry instanceof THREE.BufferGeometry === false) {\n      console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n      return;\n    }\n\n    if (offset === undefined) offset = 0;\n    var attributes = this.attributes;\n\n    for (var key in attributes) {\n      if (geometry.attributes[key] === undefined) continue;\n      var attribute1 = attributes[key];\n      var attributeArray1 = attribute1.array;\n      var attribute2 = geometry.attributes[key];\n      var attributeArray2 = attribute2.array;\n      var attributeSize = attribute2.itemSize;\n\n      for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {\n        attributeArray1[j] = attributeArray2[i];\n      }\n    }\n\n    return this;\n  },\n  normalizeNormals: function normalizeNormals() {\n    var normals = this.attributes.normal.array;\n    var x, y, z, n;\n\n    for (var i = 0, il = normals.length; i < il; i += 3) {\n      x = normals[i];\n      y = normals[i + 1];\n      z = normals[i + 2];\n      n = 1.0 / Math.sqrt(x * x + y * y + z * z);\n      normals[i] *= n;\n      normals[i + 1] *= n;\n      normals[i + 2] *= n;\n    }\n  },\n  toNonIndexed: function toNonIndexed() {\n    if (this.index === null) {\n      console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n      return this;\n    }\n\n    var geometry2 = new THREE.BufferGeometry();\n    var indices = this.index.array;\n    var attributes = this.attributes;\n\n    for (var name in attributes) {\n      var attribute = attributes[name];\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      var array2 = new array.constructor(indices.length * itemSize);\n      var index = 0,\n          index2 = 0;\n\n      for (var i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (var j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      geometry2.addAttribute(name, new THREE.BufferAttribute(array2, itemSize));\n    }\n\n    return geometry2;\n  },\n  toJSON: function toJSON() {\n    var data = {\n      metadata: {\n        version: 4.4,\n        type: 'BufferGeometry',\n        generator: 'BufferGeometry.toJSON'\n      }\n    }; // standard BufferGeometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n\n    if (this.parameters !== undefined) {\n      var parameters = this.parameters;\n\n      for (var key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n\n      return data;\n    }\n\n    data.data = {\n      attributes: {}\n    };\n    var index = this.index;\n\n    if (index !== null) {\n      var array = Array.prototype.slice.call(index.array);\n      data.data.index = {\n        type: index.array.constructor.name,\n        array: array\n      };\n    }\n\n    var attributes = this.attributes;\n\n    for (var key in attributes) {\n      var attribute = attributes[key];\n      var array = Array.prototype.slice.call(attribute.array);\n      data.data.attributes[key] = {\n        itemSize: attribute.itemSize,\n        type: attribute.array.constructor.name,\n        array: array,\n        normalized: attribute.normalized\n      };\n    }\n\n    var groups = this.groups;\n\n    if (groups.length > 0) {\n      data.data.groups = JSON.parse(JSON.stringify(groups));\n    }\n\n    var boundingSphere = this.boundingSphere;\n\n    if (boundingSphere !== null) {\n      data.data.boundingSphere = {\n        center: boundingSphere.center.toArray(),\n        radius: boundingSphere.radius\n      };\n    }\n\n    return data;\n  },\n  clone: function clone() {\n    /*\r\n    // Handle primitives\r\n    \t\tvar parameters = this.parameters;\r\n    \t\tif ( parameters !== undefined ) {\r\n    \t\t\tvar values = [];\r\n    \t\t\tfor ( var key in parameters ) {\r\n    \t\t\t\tvalues.push( parameters[ key ] );\r\n    \t\t\t}\r\n    \t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n    \tthis.constructor.apply( geometry, values );\r\n    \treturn geometry;\r\n    \t\t}\r\n    \t\treturn new this.constructor().copy( this );\r\n    */\n    return new THREE.BufferGeometry().copy(this);\n  },\n  copy: function copy(source) {\n    var index = source.index;\n\n    if (index !== null) {\n      this.setIndex(index.clone());\n    }\n\n    var attributes = source.attributes;\n\n    for (var name in attributes) {\n      var attribute = attributes[name];\n      this.addAttribute(name, attribute.clone());\n    }\n\n    var groups = source.groups;\n\n    for (var i = 0, l = groups.length; i < l; i++) {\n      var group = groups[i];\n      this.addGroup(group.start, group.count, group.materialIndex);\n    }\n\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nTHREE.BufferGeometry.MaxIndex = 65535; // File:src/core/InstancedBufferGeometry.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\nTHREE.InstancedBufferGeometry = function () {\n  THREE.BufferGeometry.call(this);\n  this.type = 'InstancedBufferGeometry';\n  this.maxInstancedCount = undefined;\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function (start, count, instances) {\n  this.groups.push({\n    start: start,\n    count: count,\n    instances: instances\n  });\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function (source) {\n  var index = source.index;\n\n  if (index !== null) {\n    this.setIndex(index.clone());\n  }\n\n  var attributes = source.attributes;\n\n  for (var name in attributes) {\n    var attribute = attributes[name];\n    this.addAttribute(name, attribute.clone());\n  }\n\n  var groups = source.groups;\n\n  for (var i = 0, l = groups.length; i < l; i++) {\n    var group = groups[i];\n    this.addGroup(group.start, group.count, group.instances);\n  }\n\n  return this;\n}; // File:src/core/Uniform.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.Uniform = function (value) {\n  if (typeof value === 'string') {\n    console.warn('THREE.Uniform: Type parameter is no longer needed.');\n    value = arguments[1];\n  }\n\n  this.value = value;\n  this.dynamic = false;\n};\n\nTHREE.Uniform.prototype = {\n  constructor: THREE.Uniform,\n  onUpdate: function onUpdate(callback) {\n    this.dynamic = true;\n    this.onUpdateCallback = callback;\n    return this;\n  }\n}; // File:src/animation/AnimationAction.js\n\n/**\r\n *\r\n * Action provided by AnimationMixer for scheduling clip playback on specific\r\n * objects.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n *\r\n */\n\nTHREE.AnimationAction = function () {\n  throw new Error(\"THREE.AnimationAction: \" + \"Use mixer.clipAction for construction.\");\n};\n\nTHREE.AnimationAction._new = function AnimationAction(mixer, clip, localRoot) {\n  this._mixer = mixer;\n  this._clip = clip;\n  this._localRoot = localRoot || null;\n  var tracks = clip.tracks,\n      nTracks = tracks.length,\n      interpolants = new Array(nTracks);\n  var interpolantSettings = {\n    endingStart: THREE.ZeroCurvatureEnding,\n    endingEnd: THREE.ZeroCurvatureEnding\n  };\n\n  for (var i = 0; i !== nTracks; ++i) {\n    var interpolant = tracks[i].createInterpolant(null);\n    interpolants[i] = interpolant;\n    interpolant.settings = interpolantSettings;\n  }\n\n  this._interpolantSettings = interpolantSettings;\n  this._interpolants = interpolants; // bound by the mixer\n  // inside: PropertyMixer (managed by the mixer)\n\n  this._propertyBindings = new Array(nTracks);\n  this._cacheIndex = null; // for the memory manager\n\n  this._byClipCacheIndex = null; // for the memory manager\n\n  this._timeScaleInterpolant = null;\n  this._weightInterpolant = null;\n  this.loop = THREE.LoopRepeat;\n  this._loopCount = -1; // global mixer time when the action is to be started\n  // it's set back to 'null' upon start of the action\n\n  this._startTime = null; // scaled local time of the action\n  // gets clamped or wrapped to 0..clip.duration according to loop\n\n  this.time = 0;\n  this.timeScale = 1;\n  this._effectiveTimeScale = 1;\n  this.weight = 1;\n  this._effectiveWeight = 1;\n  this.repetitions = Infinity; // no. of repetitions when looping\n\n  this.paused = false; // false -> zero effective time scale\n\n  this.enabled = true; // true -> zero effective weight\n\n  this.clampWhenFinished = false; // keep feeding the last frame?\n\n  this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n  this.zeroSlopeAtEnd = true; // clips for start, loop and end\n};\n\nTHREE.AnimationAction._new.prototype = {\n  constructor: THREE.AnimationAction._new,\n  // State & Scheduling\n  play: function play() {\n    this._mixer._activateAction(this);\n\n    return this;\n  },\n  stop: function stop() {\n    this._mixer._deactivateAction(this);\n\n    return this.reset();\n  },\n  reset: function reset() {\n    this.paused = false;\n    this.enabled = true;\n    this.time = 0; // restart clip\n\n    this._loopCount = -1; // forget previous loops\n\n    this._startTime = null; // forget scheduling\n\n    return this.stopFading().stopWarping();\n  },\n  isRunning: function isRunning() {\n    var start = this._startTime;\n    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n  },\n  // return true when play has been called\n  isScheduled: function isScheduled() {\n    return this._mixer._isActiveAction(this);\n  },\n  startAt: function startAt(time) {\n    this._startTime = time;\n    return this;\n  },\n  setLoop: function setLoop(mode, repetitions) {\n    this.loop = mode;\n    this.repetitions = repetitions;\n    return this;\n  },\n  // Weight\n  // set the weight stopping any scheduled fading\n  // although .enabled = false yields an effective weight of zero, this\n  // method does *not* change .enabled, because it would be confusing\n  setEffectiveWeight: function setEffectiveWeight(weight) {\n    this.weight = weight; // note: same logic as when updated at runtime\n\n    this._effectiveWeight = this.enabled ? weight : 0;\n    return this.stopFading();\n  },\n  // return the weight considering fading and .enabled\n  getEffectiveWeight: function getEffectiveWeight() {\n    return this._effectiveWeight;\n  },\n  fadeIn: function fadeIn(duration) {\n    return this._scheduleFading(duration, 0, 1);\n  },\n  fadeOut: function fadeOut(duration) {\n    return this._scheduleFading(duration, 1, 0);\n  },\n  crossFadeFrom: function crossFadeFrom(fadeOutAction, duration, warp) {\n    var mixer = this._mixer;\n    fadeOutAction.fadeOut(duration);\n    this.fadeIn(duration);\n\n    if (warp) {\n      var fadeInDuration = this._clip.duration,\n          fadeOutDuration = fadeOutAction._clip.duration,\n          startEndRatio = fadeOutDuration / fadeInDuration,\n          endStartRatio = fadeInDuration / fadeOutDuration;\n      fadeOutAction.warp(1.0, startEndRatio, duration);\n      this.warp(endStartRatio, 1.0, duration);\n    }\n\n    return this;\n  },\n  crossFadeTo: function crossFadeTo(fadeInAction, duration, warp) {\n    return fadeInAction.crossFadeFrom(this, duration, warp);\n  },\n  stopFading: function stopFading() {\n    var weightInterpolant = this._weightInterpolant;\n\n    if (weightInterpolant !== null) {\n      this._weightInterpolant = null;\n\n      this._mixer._takeBackControlInterpolant(weightInterpolant);\n    }\n\n    return this;\n  },\n  // Time Scale Control\n  // set the weight stopping any scheduled warping\n  // although .paused = true yields an effective time scale of zero, this\n  // method does *not* change .paused, because it would be confusing\n  setEffectiveTimeScale: function setEffectiveTimeScale(timeScale) {\n    this.timeScale = timeScale;\n    this._effectiveTimeScale = this.paused ? 0 : timeScale;\n    return this.stopWarping();\n  },\n  // return the time scale considering warping and .paused\n  getEffectiveTimeScale: function getEffectiveTimeScale() {\n    return this._effectiveTimeScale;\n  },\n  setDuration: function setDuration(duration) {\n    this.timeScale = this._clip.duration / duration;\n    return this.stopWarping();\n  },\n  syncWith: function syncWith(action) {\n    this.time = action.time;\n    this.timeScale = action.timeScale;\n    return this.stopWarping();\n  },\n  halt: function halt(duration) {\n    return this.warp(this._effectiveTimeScale, 0, duration);\n  },\n  warp: function warp(startTimeScale, endTimeScale, duration) {\n    var mixer = this._mixer,\n        now = mixer.time,\n        interpolant = this._timeScaleInterpolant,\n        timeScale = this.timeScale;\n\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant(), this._timeScaleInterpolant = interpolant;\n    }\n\n    var times = interpolant.parameterPositions,\n        values = interpolant.sampleValues;\n    times[0] = now;\n    times[1] = now + duration;\n    values[0] = startTimeScale / timeScale;\n    values[1] = endTimeScale / timeScale;\n    return this;\n  },\n  stopWarping: function stopWarping() {\n    var timeScaleInterpolant = this._timeScaleInterpolant;\n\n    if (timeScaleInterpolant !== null) {\n      this._timeScaleInterpolant = null;\n\n      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n    }\n\n    return this;\n  },\n  // Object Accessors\n  getMixer: function getMixer() {\n    return this._mixer;\n  },\n  getClip: function getClip() {\n    return this._clip;\n  },\n  getRoot: function getRoot() {\n    return this._localRoot || this._mixer._root;\n  },\n  // Interna\n  _update: function _update(time, deltaTime, timeDirection, accuIndex) {\n    // called by the mixer\n    var startTime = this._startTime;\n\n    if (startTime !== null) {\n      // check for scheduled start of action\n      var timeRunning = (time - startTime) * timeDirection;\n\n      if (timeRunning < 0 || timeDirection === 0) {\n        return; // yet to come / don't decide when delta = 0\n      } // start\n\n\n      this._startTime = null; // unschedule\n\n      deltaTime = timeDirection * timeRunning;\n    } // apply time scale and advance time\n\n\n    deltaTime *= this._updateTimeScale(time);\n\n    var clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n    // an effective weight of 0\n\n\n    var weight = this._updateWeight(time);\n\n    if (weight > 0) {\n      var interpolants = this._interpolants;\n      var propertyMixers = this._propertyBindings;\n\n      for (var j = 0, m = interpolants.length; j !== m; ++j) {\n        interpolants[j].evaluate(clipTime);\n        propertyMixers[j].accumulate(accuIndex, weight);\n      }\n    }\n  },\n  _updateWeight: function _updateWeight(time) {\n    var weight = 0;\n\n    if (this.enabled) {\n      weight = this.weight;\n      var interpolant = this._weightInterpolant;\n\n      if (interpolant !== null) {\n        var interpolantValue = interpolant.evaluate(time)[0];\n        weight *= interpolantValue;\n\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopFading();\n\n          if (interpolantValue === 0) {\n            // faded out, disable\n            this.enabled = false;\n          }\n        }\n      }\n    }\n\n    this._effectiveWeight = weight;\n    return weight;\n  },\n  _updateTimeScale: function _updateTimeScale(time) {\n    var timeScale = 0;\n\n    if (!this.paused) {\n      timeScale = this.timeScale;\n      var interpolant = this._timeScaleInterpolant;\n\n      if (interpolant !== null) {\n        var interpolantValue = interpolant.evaluate(time)[0];\n        timeScale *= interpolantValue;\n\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopWarping();\n\n          if (timeScale === 0) {\n            // motion has halted, pause\n            this.paused = true;\n          } else {\n            // warp done - apply final time scale\n            this.timeScale = timeScale;\n          }\n        }\n      }\n    }\n\n    this._effectiveTimeScale = timeScale;\n    return timeScale;\n  },\n  _updateTime: function _updateTime(deltaTime) {\n    var time = this.time + deltaTime;\n    if (deltaTime === 0) return time;\n    var duration = this._clip.duration,\n        loop = this.loop,\n        loopCount = this._loopCount;\n\n    if (loop === THREE.LoopOnce) {\n      if (loopCount === -1) {\n        // just started\n        this.loopCount = 0;\n\n        this._setEndings(true, true, false);\n      }\n\n      handle_stop: {\n        if (time >= duration) {\n          time = duration;\n        } else if (time < 0) {\n          time = 0;\n        } else break handle_stop;\n\n        if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\n        this._mixer.dispatchEvent({\n          type: 'finished',\n          action: this,\n          direction: deltaTime < 0 ? -1 : 1\n        });\n      }\n    } else {\n      // repetitive Repeat or PingPong\n      var pingPong = loop === THREE.LoopPingPong;\n\n      if (loopCount === -1) {\n        // just started\n        if (deltaTime >= 0) {\n          loopCount = 0;\n\n          this._setEndings(true, this.repetitions === 0, pingPong);\n        } else {\n          // when looping in reverse direction, the initial\n          // transition through zero counts as a repetition,\n          // so leave loopCount at -1\n          this._setEndings(this.repetitions === 0, true, pingPong);\n        }\n      }\n\n      if (time >= duration || time < 0) {\n        // wrap around\n        var loopDelta = Math.floor(time / duration); // signed\n\n        time -= duration * loopDelta;\n        loopCount += Math.abs(loopDelta);\n        var pending = this.repetitions - loopCount;\n\n        if (pending < 0) {\n          // have to stop (switch state, clamp time, fire event)\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n          time = deltaTime > 0 ? duration : 0;\n\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime > 0 ? 1 : -1\n          });\n        } else {\n          // keep running\n          if (pending === 0) {\n            // entering the last round\n            var atStart = deltaTime < 0;\n\n            this._setEndings(atStart, !atStart, pingPong);\n          } else {\n            this._setEndings(false, false, pingPong);\n          }\n\n          this._loopCount = loopCount;\n\n          this._mixer.dispatchEvent({\n            type: 'loop',\n            action: this,\n            loopDelta: loopDelta\n          });\n        }\n      }\n\n      if (pingPong && (loopCount & 1) === 1) {\n        // invert time for the \"pong round\"\n        this.time = time;\n        return duration - time;\n      }\n    }\n\n    this.time = time;\n    return time;\n  },\n  _setEndings: function _setEndings(atStart, atEnd, pingPong) {\n    var settings = this._interpolantSettings;\n\n    if (pingPong) {\n      settings.endingStart = THREE.ZeroSlopeEnding;\n      settings.endingEnd = THREE.ZeroSlopeEnding;\n    } else {\n      // assuming for LoopOnce atStart == atEnd == true\n      if (atStart) {\n        settings.endingStart = this.zeroSlopeAtStart ? THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n      } else {\n        settings.endingStart = THREE.WrapAroundEnding;\n      }\n\n      if (atEnd) {\n        settings.endingEnd = this.zeroSlopeAtEnd ? THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n      } else {\n        settings.endingEnd = THREE.WrapAroundEnding;\n      }\n    }\n  },\n  _scheduleFading: function _scheduleFading(duration, weightNow, weightThen) {\n    var mixer = this._mixer,\n        now = mixer.time,\n        interpolant = this._weightInterpolant;\n\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant(), this._weightInterpolant = interpolant;\n    }\n\n    var times = interpolant.parameterPositions,\n        values = interpolant.sampleValues;\n    times[0] = now;\n    values[0] = weightNow;\n    times[1] = now + duration;\n    values[1] = weightThen;\n    return this;\n  }\n}; // File:src/animation/AnimationClip.js\n\n/**\r\n *\r\n * Reusable set of Tracks that represent an animation.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\n\nTHREE.AnimationClip = function (name, duration, tracks) {\n  this.name = name;\n  this.tracks = tracks;\n  this.duration = duration !== undefined ? duration : -1;\n  this.uuid = THREE.Math.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n  if (this.duration < 0) {\n    this.resetDuration();\n  } // maybe only do these on demand, as doing them here could potentially slow down loading\n  // but leaving these here during development as this ensures a lot of testing of these functions\n\n\n  this.trim();\n  this.optimize();\n};\n\nTHREE.AnimationClip.prototype = {\n  constructor: THREE.AnimationClip,\n  resetDuration: function resetDuration() {\n    var tracks = this.tracks,\n        duration = 0;\n\n    for (var i = 0, n = tracks.length; i !== n; ++i) {\n      var track = this.tracks[i];\n      duration = Math.max(duration, track.times[track.times.length - 1]);\n    }\n\n    this.duration = duration;\n  },\n  trim: function trim() {\n    for (var i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].trim(0, this.duration);\n    }\n\n    return this;\n  },\n  optimize: function optimize() {\n    for (var i = 0; i < this.tracks.length; i++) {\n      this.tracks[i].optimize();\n    }\n\n    return this;\n  }\n}; // Static methods:\n\nObject.assign(THREE.AnimationClip, {\n  parse: function parse(json) {\n    var tracks = [],\n        jsonTracks = json.tracks,\n        frameTime = 1.0 / (json.fps || 1.0);\n\n    for (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n      tracks.push(THREE.KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));\n    }\n\n    return new THREE.AnimationClip(json.name, json.duration, tracks);\n  },\n  toJSON: function toJSON(clip) {\n    var tracks = [],\n        clipTracks = clip.tracks;\n    var json = {\n      'name': clip.name,\n      'duration': clip.duration,\n      'tracks': tracks\n    };\n\n    for (var i = 0, n = clipTracks.length; i !== n; ++i) {\n      tracks.push(THREE.KeyframeTrack.toJSON(clipTracks[i]));\n    }\n\n    return json;\n  },\n  CreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n    var numMorphTargets = morphTargetSequence.length;\n    var tracks = [];\n\n    for (var i = 0; i < numMorphTargets; i++) {\n      var times = [];\n      var values = [];\n      times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n      values.push(0, 1, 0);\n      var order = THREE.AnimationUtils.getKeyframeOrder(times);\n      times = THREE.AnimationUtils.sortedArray(times, 1, order);\n      values = THREE.AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n      // last frame as well for perfect loop.\n\n      if (!noLoop && times[0] === 0) {\n        times.push(numMorphTargets);\n        values.push(values[0]);\n      }\n\n      tracks.push(new THREE.NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n    }\n\n    return new THREE.AnimationClip(name, -1, tracks);\n  },\n  findByName: function findByName(objectOrClipArray, name) {\n    var clipArray = objectOrClipArray;\n\n    if (!Array.isArray(objectOrClipArray)) {\n      var o = objectOrClipArray;\n      clipArray = o.geometry && o.geometry.animations || o.animations;\n    }\n\n    for (var i = 0; i < clipArray.length; i++) {\n      if (clipArray[i].name === name) {\n        return clipArray[i];\n      }\n    }\n\n    return null;\n  },\n  CreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n    var animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n    // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n    var pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n    // patterns like Walk_001, Walk_002, Run_001, Run_002\n\n    for (var i = 0, il = morphTargets.length; i < il; i++) {\n      var morphTarget = morphTargets[i];\n      var parts = morphTarget.name.match(pattern);\n\n      if (parts && parts.length > 1) {\n        var name = parts[1];\n        var animationMorphTargets = animationToMorphTargets[name];\n\n        if (!animationMorphTargets) {\n          animationToMorphTargets[name] = animationMorphTargets = [];\n        }\n\n        animationMorphTargets.push(morphTarget);\n      }\n    }\n\n    var clips = [];\n\n    for (var name in animationToMorphTargets) {\n      clips.push(THREE.AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n    }\n\n    return clips;\n  },\n  // parse the animation.hierarchy format\n  parseAnimation: function parseAnimation(animation, bones, nodeName) {\n    if (!animation) {\n      console.error(\"  no animation in JSONLoader data\");\n      return null;\n    }\n\n    var addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n      // only return track if there are actually keys.\n      if (animationKeys.length !== 0) {\n        var times = [];\n        var values = [];\n        THREE.AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n        if (times.length !== 0) {\n          destTracks.push(new trackType(trackName, times, values));\n        }\n      }\n    };\n\n    var tracks = [];\n    var clipName = animation.name || 'default'; // automatic length determination in AnimationClip.\n\n    var duration = animation.length || -1;\n    var fps = animation.fps || 30;\n    var hierarchyTracks = animation.hierarchy || [];\n\n    for (var h = 0; h < hierarchyTracks.length; h++) {\n      var animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n      if (!animationKeys || animationKeys.length === 0) continue; // process morph targets in a way exactly compatible\n      // with AnimationHandler.init( animation )\n\n      if (animationKeys[0].morphTargets) {\n        // figure out all morph targets used in this track\n        var morphTargetNames = {};\n\n        for (var k = 0; k < animationKeys.length; k++) {\n          if (animationKeys[k].morphTargets) {\n            for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n            }\n          }\n        } // create a track for each morph target with all zero\n        // morphTargetInfluences except for the keys in which\n        // the morphTarget is named.\n\n\n        for (var morphTargetName in morphTargetNames) {\n          var times = [];\n          var values = [];\n\n          for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n            var animationKey = animationKeys[k];\n            times.push(animationKey.time);\n            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n          }\n\n          tracks.push(new THREE.NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n        }\n\n        duration = morphTargetNames.length * (fps || 1.0);\n      } else {\n        // ...assume skeletal animation\n        var boneName = '.bones[' + bones[h].name + ']';\n        addNonemptyTrack(THREE.VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n        addNonemptyTrack(THREE.QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n        addNonemptyTrack(THREE.VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n      }\n    }\n\n    if (tracks.length === 0) {\n      return null;\n    }\n\n    var clip = new THREE.AnimationClip(clipName, duration, tracks);\n    return clip;\n  }\n}); // File:src/animation/AnimationMixer.js\n\n/**\r\n *\r\n * Player for AnimationClips.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.AnimationMixer = function (root) {\n  this._root = root;\n\n  this._initMemoryManager();\n\n  this._accuIndex = 0;\n  this.time = 0;\n  this.timeScale = 1.0;\n};\n\nObject.assign(THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n  // return an action for a clip optionally using a custom root target\n  // object (this method allocates a lot of dynamic memory in case a\n  // previously unknown clip/root combination is specified)\n  clipAction: function clipAction(clip, optionalRoot) {\n    var root = optionalRoot || this._root,\n        rootUuid = root.uuid,\n        clipObject = typeof clip === 'string' ? THREE.AnimationClip.findByName(root, clip) : clip,\n        clipUuid = clipObject !== null ? clipObject.uuid : clip,\n        actionsForClip = this._actionsByClip[clipUuid],\n        prototypeAction = null;\n\n    if (actionsForClip !== undefined) {\n      var existingAction = actionsForClip.actionByRoot[rootUuid];\n\n      if (existingAction !== undefined) {\n        return existingAction;\n      } // we know the clip, so we don't have to parse all\n      // the bindings again but can just copy\n\n\n      prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n      if (clipObject === null) clipObject = prototypeAction._clip;\n    } // clip must be known when specified via string\n\n\n    if (clipObject === null) return null; // allocate all resources required to run it\n\n    var newAction = new THREE.AnimationMixer._Action(this, clipObject, optionalRoot);\n\n    this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n    this._addInactiveAction(newAction, clipUuid, rootUuid);\n\n    return newAction;\n  },\n  // get an existing action\n  existingAction: function existingAction(clip, optionalRoot) {\n    var root = optionalRoot || this._root,\n        rootUuid = root.uuid,\n        clipObject = typeof clip === 'string' ? THREE.AnimationClip.findByName(root, clip) : clip,\n        clipUuid = clipObject ? clipObject.uuid : clip,\n        actionsForClip = this._actionsByClip[clipUuid];\n\n    if (actionsForClip !== undefined) {\n      return actionsForClip.actionByRoot[rootUuid] || null;\n    }\n\n    return null;\n  },\n  // deactivates all previously scheduled actions\n  stopAllAction: function stopAllAction() {\n    var actions = this._actions,\n        nActions = this._nActiveActions,\n        bindings = this._bindings,\n        nBindings = this._nActiveBindings;\n    this._nActiveActions = 0;\n    this._nActiveBindings = 0;\n\n    for (var i = 0; i !== nActions; ++i) {\n      actions[i].reset();\n    }\n\n    for (var i = 0; i !== nBindings; ++i) {\n      bindings[i].useCount = 0;\n    }\n\n    return this;\n  },\n  // advance the time and update apply the animation\n  update: function update(deltaTime) {\n    deltaTime *= this.timeScale;\n    var actions = this._actions,\n        nActions = this._nActiveActions,\n        time = this.time += deltaTime,\n        timeDirection = Math.sign(deltaTime),\n        accuIndex = this._accuIndex ^= 1; // run active actions\n\n    for (var i = 0; i !== nActions; ++i) {\n      var action = actions[i];\n\n      if (action.enabled) {\n        action._update(time, deltaTime, timeDirection, accuIndex);\n      }\n    } // update scene graph\n\n\n    var bindings = this._bindings,\n        nBindings = this._nActiveBindings;\n\n    for (var i = 0; i !== nBindings; ++i) {\n      bindings[i].apply(accuIndex);\n    }\n\n    return this;\n  },\n  // return this mixer's root target object\n  getRoot: function getRoot() {\n    return this._root;\n  },\n  // free all resources specific to a particular clip\n  uncacheClip: function uncacheClip(clip) {\n    var actions = this._actions,\n        clipUuid = clip.uuid,\n        actionsByClip = this._actionsByClip,\n        actionsForClip = actionsByClip[clipUuid];\n\n    if (actionsForClip !== undefined) {\n      // note: just calling _removeInactiveAction would mess up the\n      // iteration state and also require updating the state we can\n      // just throw away\n      var actionsToRemove = actionsForClip.knownActions;\n\n      for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n        var action = actionsToRemove[i];\n\n        this._deactivateAction(action);\n\n        var cacheIndex = action._cacheIndex,\n            lastInactiveAction = actions[actions.length - 1];\n        action._cacheIndex = null;\n        action._byClipCacheIndex = null;\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n\n        this._removeInactiveBindingsForAction(action);\n      }\n\n      delete actionsByClip[clipUuid];\n    }\n  },\n  // free all resources specific to a particular root target object\n  uncacheRoot: function uncacheRoot(root) {\n    var rootUuid = root.uuid,\n        actionsByClip = this._actionsByClip;\n\n    for (var clipUuid in actionsByClip) {\n      var actionByRoot = actionsByClip[clipUuid].actionByRoot,\n          action = actionByRoot[rootUuid];\n\n      if (action !== undefined) {\n        this._deactivateAction(action);\n\n        this._removeInactiveAction(action);\n      }\n    }\n\n    var bindingsByRoot = this._bindingsByRootAndName,\n        bindingByName = bindingsByRoot[rootUuid];\n\n    if (bindingByName !== undefined) {\n      for (var trackName in bindingByName) {\n        var binding = bindingByName[trackName];\n        binding.restoreOriginalState();\n\n        this._removeInactiveBinding(binding);\n      }\n    }\n  },\n  // remove a targeted clip from the cache\n  uncacheAction: function uncacheAction(clip, optionalRoot) {\n    var action = this.existingAction(clip, optionalRoot);\n\n    if (action !== null) {\n      this._deactivateAction(action);\n\n      this._removeInactiveAction(action);\n    }\n  }\n});\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new; // Implementation details:\n\nObject.assign(THREE.AnimationMixer.prototype, {\n  _bindAction: function _bindAction(action, prototypeAction) {\n    var root = action._localRoot || this._root,\n        tracks = action._clip.tracks,\n        nTracks = tracks.length,\n        bindings = action._propertyBindings,\n        interpolants = action._interpolants,\n        rootUuid = root.uuid,\n        bindingsByRoot = this._bindingsByRootAndName,\n        bindingsByName = bindingsByRoot[rootUuid];\n\n    if (bindingsByName === undefined) {\n      bindingsByName = {};\n      bindingsByRoot[rootUuid] = bindingsByName;\n    }\n\n    for (var i = 0; i !== nTracks; ++i) {\n      var track = tracks[i],\n          trackName = track.name,\n          binding = bindingsByName[trackName];\n\n      if (binding !== undefined) {\n        bindings[i] = binding;\n      } else {\n        binding = bindings[i];\n\n        if (binding !== undefined) {\n          // existing binding, make sure the cache knows\n          if (binding._cacheIndex === null) {\n            ++binding.referenceCount;\n\n            this._addInactiveBinding(binding, rootUuid, trackName);\n          }\n\n          continue;\n        }\n\n        var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n        binding = new THREE.PropertyMixer(THREE.PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n        ++binding.referenceCount;\n\n        this._addInactiveBinding(binding, rootUuid, trackName);\n\n        bindings[i] = binding;\n      }\n\n      interpolants[i].resultBuffer = binding.buffer;\n    }\n  },\n  _activateAction: function _activateAction(action) {\n    if (!this._isActiveAction(action)) {\n      if (action._cacheIndex === null) {\n        // this action has been forgotten by the cache, but the user\n        // appears to be still using it -> rebind\n        var rootUuid = (action._localRoot || this._root).uuid,\n            clipUuid = action._clip.uuid,\n            actionsForClip = this._actionsByClip[clipUuid];\n\n        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n        this._addInactiveAction(action, clipUuid, rootUuid);\n      }\n\n      var bindings = action._propertyBindings; // increment reference counts / sort out state\n\n      for (var i = 0, n = bindings.length; i !== n; ++i) {\n        var binding = bindings[i];\n\n        if (binding.useCount++ === 0) {\n          this._lendBinding(binding);\n\n          binding.saveOriginalState();\n        }\n      }\n\n      this._lendAction(action);\n    }\n  },\n  _deactivateAction: function _deactivateAction(action) {\n    if (this._isActiveAction(action)) {\n      var bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n      for (var i = 0, n = bindings.length; i !== n; ++i) {\n        var binding = bindings[i];\n\n        if (--binding.useCount === 0) {\n          binding.restoreOriginalState();\n\n          this._takeBackBinding(binding);\n        }\n      }\n\n      this._takeBackAction(action);\n    }\n  },\n  // Memory manager\n  _initMemoryManager: function _initMemoryManager() {\n    this._actions = []; // 'nActiveActions' followed by inactive ones\n\n    this._nActiveActions = 0;\n    this._actionsByClip = {}; // inside:\n    // {\n    // \t\tknownActions: Array< _Action >\t- used as prototypes\n    // \t\tactionByRoot: _Action\t\t\t- lookup\n    // }\n\n    this._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n    this._nActiveBindings = 0;\n    this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n    this._controlInterpolants = []; // same game as above\n\n    this._nActiveControlInterpolants = 0;\n    var scope = this;\n    this.stats = {\n      actions: {\n        get total() {\n          return scope._actions.length;\n        },\n\n        get inUse() {\n          return scope._nActiveActions;\n        }\n\n      },\n      bindings: {\n        get total() {\n          return scope._bindings.length;\n        },\n\n        get inUse() {\n          return scope._nActiveBindings;\n        }\n\n      },\n      controlInterpolants: {\n        get total() {\n          return scope._controlInterpolants.length;\n        },\n\n        get inUse() {\n          return scope._nActiveControlInterpolants;\n        }\n\n      }\n    };\n  },\n  // Memory management for _Action objects\n  _isActiveAction: function _isActiveAction(action) {\n    var index = action._cacheIndex;\n    return index !== null && index < this._nActiveActions;\n  },\n  _addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n    var actions = this._actions,\n        actionsByClip = this._actionsByClip,\n        actionsForClip = actionsByClip[clipUuid];\n\n    if (actionsForClip === undefined) {\n      actionsForClip = {\n        knownActions: [action],\n        actionByRoot: {}\n      };\n      action._byClipCacheIndex = 0;\n      actionsByClip[clipUuid] = actionsForClip;\n    } else {\n      var knownActions = actionsForClip.knownActions;\n      action._byClipCacheIndex = knownActions.length;\n      knownActions.push(action);\n    }\n\n    action._cacheIndex = actions.length;\n    actions.push(action);\n    actionsForClip.actionByRoot[rootUuid] = action;\n  },\n  _removeInactiveAction: function _removeInactiveAction(action) {\n    var actions = this._actions,\n        lastInactiveAction = actions[actions.length - 1],\n        cacheIndex = action._cacheIndex;\n    lastInactiveAction._cacheIndex = cacheIndex;\n    actions[cacheIndex] = lastInactiveAction;\n    actions.pop();\n    action._cacheIndex = null;\n    var clipUuid = action._clip.uuid,\n        actionsByClip = this._actionsByClip,\n        actionsForClip = actionsByClip[clipUuid],\n        knownActionsForClip = actionsForClip.knownActions,\n        lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n        byClipCacheIndex = action._byClipCacheIndex;\n    lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n    knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n    knownActionsForClip.pop();\n    action._byClipCacheIndex = null;\n    var actionByRoot = actionsForClip.actionByRoot,\n        rootUuid = (actions._localRoot || this._root).uuid;\n    delete actionByRoot[rootUuid];\n\n    if (knownActionsForClip.length === 0) {\n      delete actionsByClip[clipUuid];\n    }\n\n    this._removeInactiveBindingsForAction(action);\n  },\n  _removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n    var bindings = action._propertyBindings;\n\n    for (var i = 0, n = bindings.length; i !== n; ++i) {\n      var binding = bindings[i];\n\n      if (--binding.referenceCount === 0) {\n        this._removeInactiveBinding(binding);\n      }\n    }\n  },\n  _lendAction: function _lendAction(action) {\n    // [ active actions |  inactive actions  ]\n    // [  active actions >| inactive actions ]\n    //                 s        a\n    //                  <-swap->\n    //                 a        s\n    var actions = this._actions,\n        prevIndex = action._cacheIndex,\n        lastActiveIndex = this._nActiveActions++,\n        firstInactiveAction = actions[lastActiveIndex];\n    action._cacheIndex = lastActiveIndex;\n    actions[lastActiveIndex] = action;\n    firstInactiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = firstInactiveAction;\n  },\n  _takeBackAction: function _takeBackAction(action) {\n    // [  active actions  | inactive actions ]\n    // [ active actions |< inactive actions  ]\n    //        a        s\n    //         <-swap->\n    //        s        a\n    var actions = this._actions,\n        prevIndex = action._cacheIndex,\n        firstInactiveIndex = --this._nActiveActions,\n        lastActiveAction = actions[firstInactiveIndex];\n    action._cacheIndex = firstInactiveIndex;\n    actions[firstInactiveIndex] = action;\n    lastActiveAction._cacheIndex = prevIndex;\n    actions[prevIndex] = lastActiveAction;\n  },\n  // Memory management for PropertyMixer objects\n  _addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n    var bindingsByRoot = this._bindingsByRootAndName,\n        bindingByName = bindingsByRoot[rootUuid],\n        bindings = this._bindings;\n\n    if (bindingByName === undefined) {\n      bindingByName = {};\n      bindingsByRoot[rootUuid] = bindingByName;\n    }\n\n    bindingByName[trackName] = binding;\n    binding._cacheIndex = bindings.length;\n    bindings.push(binding);\n  },\n  _removeInactiveBinding: function _removeInactiveBinding(binding) {\n    var bindings = this._bindings,\n        propBinding = binding.binding,\n        rootUuid = propBinding.rootNode.uuid,\n        trackName = propBinding.path,\n        bindingsByRoot = this._bindingsByRootAndName,\n        bindingByName = bindingsByRoot[rootUuid],\n        lastInactiveBinding = bindings[bindings.length - 1],\n        cacheIndex = binding._cacheIndex;\n    lastInactiveBinding._cacheIndex = cacheIndex;\n    bindings[cacheIndex] = lastInactiveBinding;\n    bindings.pop();\n    delete bindingByName[trackName];\n\n    remove_empty_map: {\n      for (var _ in bindingByName) {\n        break remove_empty_map;\n      }\n\n      delete bindingsByRoot[rootUuid];\n    }\n  },\n  _lendBinding: function _lendBinding(binding) {\n    var bindings = this._bindings,\n        prevIndex = binding._cacheIndex,\n        lastActiveIndex = this._nActiveBindings++,\n        firstInactiveBinding = bindings[lastActiveIndex];\n    binding._cacheIndex = lastActiveIndex;\n    bindings[lastActiveIndex] = binding;\n    firstInactiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = firstInactiveBinding;\n  },\n  _takeBackBinding: function _takeBackBinding(binding) {\n    var bindings = this._bindings,\n        prevIndex = binding._cacheIndex,\n        firstInactiveIndex = --this._nActiveBindings,\n        lastActiveBinding = bindings[firstInactiveIndex];\n    binding._cacheIndex = firstInactiveIndex;\n    bindings[firstInactiveIndex] = binding;\n    lastActiveBinding._cacheIndex = prevIndex;\n    bindings[prevIndex] = lastActiveBinding;\n  },\n  // Memory management of Interpolants for weight and time scale\n  _lendControlInterpolant: function _lendControlInterpolant() {\n    var interpolants = this._controlInterpolants,\n        lastActiveIndex = this._nActiveControlInterpolants++,\n        interpolant = interpolants[lastActiveIndex];\n\n    if (interpolant === undefined) {\n      interpolant = new THREE.LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n      interpolant.__cacheIndex = lastActiveIndex;\n      interpolants[lastActiveIndex] = interpolant;\n    }\n\n    return interpolant;\n  },\n  _takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n    var interpolants = this._controlInterpolants,\n        prevIndex = interpolant.__cacheIndex,\n        firstInactiveIndex = --this._nActiveControlInterpolants,\n        lastActiveInterpolant = interpolants[firstInactiveIndex];\n    interpolant.__cacheIndex = firstInactiveIndex;\n    interpolants[firstInactiveIndex] = interpolant;\n    lastActiveInterpolant.__cacheIndex = prevIndex;\n    interpolants[prevIndex] = lastActiveInterpolant;\n  },\n  _controlInterpolantsResultBuffer: new Float32Array(1)\n}); // File:src/animation/AnimationObjectGroup.js\n\n/**\r\n *\r\n * A group of objects that receives a shared animation state.\r\n *\r\n * Usage:\r\n *\r\n * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n *\r\n * \t-\tInstead pass this object as 'root'.\r\n *\r\n * \t-\tYou can also add and remove objects later when the mixer\r\n * \t\tis running.\r\n *\r\n * Note:\r\n *\r\n *  \tObjects of this class appear as one object to the mixer,\r\n *  \tso cache control of the individual objects must be done\r\n *  \ton the group.\r\n *\r\n * Limitation:\r\n *\r\n * \t- \tThe animated properties must be compatible among the\r\n * \t\tall objects in the group.\r\n *\r\n *  -\tA single property can either be controlled through a\r\n *  \ttarget group or directly, but not both.\r\n *\r\n * @author tschw\r\n */\n\nTHREE.AnimationObjectGroup = function (var_args) {\n  this.uuid = THREE.Math.generateUUID(); // cached objects followed by the active ones\n\n  this._objects = Array.prototype.slice.call(arguments);\n  this.nCachedObjects_ = 0; // threshold\n  // note: read by PropertyBinding.Composite\n\n  var indices = {};\n  this._indicesByUUID = indices; // for bookkeeping\n\n  for (var i = 0, n = arguments.length; i !== n; ++i) {\n    indices[arguments[i].uuid] = i;\n  }\n\n  this._paths = []; // inside: string\n\n  this._parsedPaths = []; // inside: { we don't care, here }\n\n  this._bindings = []; // inside: Array< PropertyBinding >\n\n  this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n  var scope = this;\n  this.stats = {\n    objects: {\n      get total() {\n        return scope._objects.length;\n      },\n\n      get inUse() {\n        return this.total - scope.nCachedObjects_;\n      }\n\n    },\n\n    get bindingsPerObject() {\n      return scope._bindings.length;\n    }\n\n  };\n};\n\nTHREE.AnimationObjectGroup.prototype = {\n  constructor: THREE.AnimationObjectGroup,\n  add: function add(var_args) {\n    var objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        bindings = this._bindings,\n        nBindings = bindings.length;\n\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n      var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n      if (index === undefined) {\n        // unknown object -> add it to the ACTIVE region\n        index = nObjects++;\n        indicesByUUID[uuid] = index;\n        objects.push(object); // accounting is done, now do the same for all bindings\n\n        for (var j = 0, m = nBindings; j !== m; ++j) {\n          bindings[j].push(new THREE.PropertyBinding(object, paths[j], parsedPaths[j]));\n        }\n      } else if (index < nCachedObjects) {\n        var knownObject = objects[index]; // move existing object to the ACTIVE region\n\n        var firstActiveIndex = --nCachedObjects,\n            lastCachedObject = objects[firstActiveIndex];\n        indicesByUUID[lastCachedObject.uuid] = index;\n        objects[index] = lastCachedObject;\n        indicesByUUID[uuid] = firstActiveIndex;\n        objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n        for (var j = 0, m = nBindings; j !== m; ++j) {\n          var bindingsForPath = bindings[j],\n              lastCached = bindingsForPath[firstActiveIndex],\n              binding = bindingsForPath[index];\n          bindingsForPath[index] = lastCached;\n\n          if (binding === undefined) {\n            // since we do not bother to create new bindings\n            // for objects that are cached, the binding may\n            // or may not exist\n            binding = new THREE.PropertyBinding(object, paths[j], parsedPaths[j]);\n          }\n\n          bindingsForPath[firstActiveIndex] = binding;\n        }\n      } else if (objects[index] !== knownObject) {\n        console.error(\"Different objects with the same UUID \" + \"detected. Clean the caches or recreate your \" + \"infrastructure when reloading scenes...\");\n      } // else the object is already where we want it to be\n\n    } // for arguments\n\n\n    this.nCachedObjects_ = nCachedObjects;\n  },\n  remove: function remove(var_args) {\n    var objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        bindings = this._bindings,\n        nBindings = bindings.length;\n\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n      var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n      if (index !== undefined && index >= nCachedObjects) {\n        // move existing object into the CACHED region\n        var lastCachedIndex = nCachedObjects++,\n            firstActiveObject = objects[lastCachedIndex];\n        indicesByUUID[firstActiveObject.uuid] = index;\n        objects[index] = firstActiveObject;\n        indicesByUUID[uuid] = lastCachedIndex;\n        objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n        for (var j = 0, m = nBindings; j !== m; ++j) {\n          var bindingsForPath = bindings[j],\n              firstActive = bindingsForPath[lastCachedIndex],\n              binding = bindingsForPath[index];\n          bindingsForPath[index] = firstActive;\n          bindingsForPath[lastCachedIndex] = binding;\n        }\n      }\n    } // for arguments\n\n\n    this.nCachedObjects_ = nCachedObjects;\n  },\n  // remove & forget\n  uncache: function uncache(var_args) {\n    var objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        bindings = this._bindings,\n        nBindings = bindings.length;\n\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n      var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n      if (index !== undefined) {\n        delete indicesByUUID[uuid];\n\n        if (index < nCachedObjects) {\n          // object is cached, shrink the CACHED region\n          var firstActiveIndex = --nCachedObjects,\n              lastCachedObject = objects[firstActiveIndex],\n              lastIndex = --nObjects,\n              lastObject = objects[lastIndex]; // last cached object takes this object's place\n\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n          indicesByUUID[lastObject.uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = lastObject;\n          objects.pop(); // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j],\n                lastCached = bindingsForPath[firstActiveIndex],\n                last = bindingsForPath[lastIndex];\n            bindingsForPath[index] = lastCached;\n            bindingsForPath[firstActiveIndex] = last;\n            bindingsForPath.pop();\n          }\n        } else {\n          // object is active, just swap with the last and pop\n          var lastIndex = --nObjects,\n              lastObject = objects[lastIndex];\n          indicesByUUID[lastObject.uuid] = index;\n          objects[index] = lastObject;\n          objects.pop(); // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j];\n            bindingsForPath[index] = bindingsForPath[lastIndex];\n            bindingsForPath.pop();\n          }\n        } // cached or active\n\n      } // if object is known\n\n    } // for arguments\n\n\n    this.nCachedObjects_ = nCachedObjects;\n  },\n  // Internal interface used by befriended PropertyBinding.Composite:\n  subscribe_: function subscribe_(path, parsedPath) {\n    // returns an array of bindings for the given path that is changed\n    // according to the contained objects in the group\n    var indicesByPath = this._bindingsIndicesByPath,\n        index = indicesByPath[path],\n        bindings = this._bindings;\n    if (index !== undefined) return bindings[index];\n    var paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        bindingsForPath = new Array(nObjects);\n    index = bindings.length;\n    indicesByPath[path] = index;\n    paths.push(path);\n    parsedPaths.push(parsedPath);\n    bindings.push(bindingsForPath);\n\n    for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n      var object = objects[i];\n      bindingsForPath[i] = new THREE.PropertyBinding(object, path, parsedPath);\n    }\n\n    return bindingsForPath;\n  },\n  unsubscribe_: function unsubscribe_(path) {\n    // tells the group to forget about a property path and no longer\n    // update the array previously obtained with 'subscribe_'\n    var indicesByPath = this._bindingsIndicesByPath,\n        index = indicesByPath[path];\n\n    if (index !== undefined) {\n      var paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          bindings = this._bindings,\n          lastBindingsIndex = bindings.length - 1,\n          lastBindings = bindings[lastBindingsIndex],\n          lastBindingsPath = path[lastBindingsIndex];\n      indicesByPath[lastBindingsPath] = index;\n      bindings[index] = lastBindings;\n      bindings.pop();\n      parsedPaths[index] = parsedPaths[lastBindingsIndex];\n      parsedPaths.pop();\n      paths[index] = paths[lastBindingsIndex];\n      paths.pop();\n    }\n  }\n}; // File:src/animation/AnimationUtils.js\n\n/**\r\n * @author tschw\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\n\nTHREE.AnimationUtils = {\n  // same as Array.prototype.slice, but also works on typed arrays\n  arraySlice: function arraySlice(array, from, to) {\n    if (THREE.AnimationUtils.isTypedArray(array)) {\n      return new array.constructor(array.subarray(from, to));\n    }\n\n    return array.slice(from, to);\n  },\n  // converts an array to a specific type\n  convertArray: function convertArray(array, type, forceClone) {\n    if (!array || // let 'undefined' and 'null' pass\n    !forceClone && array.constructor === type) return array;\n\n    if (typeof type.BYTES_PER_ELEMENT === 'number') {\n      return new type(array); // create typed array\n    }\n\n    return Array.prototype.slice.call(array); // create Array\n  },\n  isTypedArray: function isTypedArray(object) {\n    return ArrayBuffer.isView(object) && !(object instanceof DataView);\n  },\n  // returns an array by which times and values can be sorted\n  getKeyframeOrder: function getKeyframeOrder(times) {\n    function compareTime(i, j) {\n      return times[i] - times[j];\n    }\n\n    var n = times.length;\n    var result = new Array(n);\n\n    for (var i = 0; i !== n; ++i) {\n      result[i] = i;\n    }\n\n    result.sort(compareTime);\n    return result;\n  },\n  // uses the array previously returned by 'getKeyframeOrder' to sort data\n  sortedArray: function sortedArray(values, stride, order) {\n    var nValues = values.length;\n    var result = new values.constructor(nValues);\n\n    for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n      var srcOffset = order[i] * stride;\n\n      for (var j = 0; j !== stride; ++j) {\n        result[dstOffset++] = values[srcOffset + j];\n      }\n    }\n\n    return result;\n  },\n  // function for parsing AOS keyframe formats\n  flattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n    var i = 1,\n        key = jsonKeys[0];\n\n    while (key !== undefined && key[valuePropertyName] === undefined) {\n      key = jsonKeys[i++];\n    }\n\n    if (key === undefined) return; // no data\n\n    var value = key[valuePropertyName];\n    if (value === undefined) return; // no data\n\n    if (Array.isArray(value)) {\n      do {\n        value = key[valuePropertyName];\n\n        if (value !== undefined) {\n          times.push(key.time);\n          values.push.apply(values, value); // push all elements\n        }\n\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    } else if (value.toArray !== undefined) {\n      // ...assume THREE.Math-ish\n      do {\n        value = key[valuePropertyName];\n\n        if (value !== undefined) {\n          times.push(key.time);\n          value.toArray(values, values.length);\n        }\n\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    } else {\n      // otherwise push as-is\n      do {\n        value = key[valuePropertyName];\n\n        if (value !== undefined) {\n          times.push(key.time);\n          values.push(value);\n        }\n\n        key = jsonKeys[i++];\n      } while (key !== undefined);\n    }\n  }\n}; // File:src/animation/KeyframeTrack.js\n\n/**\r\n *\r\n * A timed sequence of keyframes for a specific property.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.KeyframeTrack = function (name, times, values, interpolation) {\n  if (name === undefined) throw new Error(\"track name is undefined\");\n\n  if (times === undefined || times.length === 0) {\n    throw new Error(\"no keyframes in track named \" + name);\n  }\n\n  this.name = name;\n  this.times = THREE.AnimationUtils.convertArray(times, this.TimeBufferType);\n  this.values = THREE.AnimationUtils.convertArray(values, this.ValueBufferType);\n  this.setInterpolation(interpolation || this.DefaultInterpolation);\n  this.validate();\n  this.optimize();\n};\n\nTHREE.KeyframeTrack.prototype = {\n  constructor: THREE.KeyframeTrack,\n  TimeBufferType: Float32Array,\n  ValueBufferType: Float32Array,\n  DefaultInterpolation: THREE.InterpolateLinear,\n  InterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n    return new THREE.DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n  },\n  InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n    return new THREE.LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  },\n  InterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n    return new THREE.CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n  },\n  setInterpolation: function setInterpolation(interpolation) {\n    var factoryMethod;\n\n    switch (interpolation) {\n      case THREE.InterpolateDiscrete:\n        factoryMethod = this.InterpolantFactoryMethodDiscrete;\n        break;\n\n      case THREE.InterpolateLinear:\n        factoryMethod = this.InterpolantFactoryMethodLinear;\n        break;\n\n      case THREE.InterpolateSmooth:\n        factoryMethod = this.InterpolantFactoryMethodSmooth;\n        break;\n    }\n\n    if (factoryMethod === undefined) {\n      var message = \"unsupported interpolation for \" + this.ValueTypeName + \" keyframe track named \" + this.name;\n\n      if (this.createInterpolant === undefined) {\n        // fall back to default, unless the default itself is messed up\n        if (interpolation !== this.DefaultInterpolation) {\n          this.setInterpolation(this.DefaultInterpolation);\n        } else {\n          throw new Error(message); // fatal, in this case\n        }\n      }\n\n      console.warn(message);\n      return;\n    }\n\n    this.createInterpolant = factoryMethod;\n  },\n  getInterpolation: function getInterpolation() {\n    switch (this.createInterpolant) {\n      case this.InterpolantFactoryMethodDiscrete:\n        return THREE.InterpolateDiscrete;\n\n      case this.InterpolantFactoryMethodLinear:\n        return THREE.InterpolateLinear;\n\n      case this.InterpolantFactoryMethodSmooth:\n        return THREE.InterpolateSmooth;\n    }\n  },\n  getValueSize: function getValueSize() {\n    return this.values.length / this.times.length;\n  },\n  // move all keyframes either forwards or backwards in time\n  shift: function shift(timeOffset) {\n    if (timeOffset !== 0.0) {\n      var times = this.times;\n\n      for (var i = 0, n = times.length; i !== n; ++i) {\n        times[i] += timeOffset;\n      }\n    }\n\n    return this;\n  },\n  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n  scale: function scale(timeScale) {\n    if (timeScale !== 1.0) {\n      var times = this.times;\n\n      for (var i = 0, n = times.length; i !== n; ++i) {\n        times[i] *= timeScale;\n      }\n    }\n\n    return this;\n  },\n  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n  trim: function trim(startTime, endTime) {\n    var times = this.times,\n        nKeys = times.length,\n        from = 0,\n        to = nKeys - 1;\n\n    while (from !== nKeys && times[from] < startTime) {\n      ++from;\n    }\n\n    while (to !== -1 && times[to] > endTime) {\n      --to;\n    }\n\n    ++to; // inclusive -> exclusive bound\n\n    if (from !== 0 || to !== nKeys) {\n      // empty tracks are forbidden, so keep at least one keyframe\n      if (from >= to) to = Math.max(to, 1), from = to - 1;\n      var stride = this.getValueSize();\n      this.times = THREE.AnimationUtils.arraySlice(times, from, to);\n      this.values = THREE.AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n    }\n\n    return this;\n  },\n  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n  validate: function validate() {\n    var valid = true;\n    var valueSize = this.getValueSize();\n\n    if (valueSize - Math.floor(valueSize) !== 0) {\n      console.error(\"invalid value size in track\", this);\n      valid = false;\n    }\n\n    var times = this.times,\n        values = this.values,\n        nKeys = times.length;\n\n    if (nKeys === 0) {\n      console.error(\"track is empty\", this);\n      valid = false;\n    }\n\n    var prevTime = null;\n\n    for (var i = 0; i !== nKeys; i++) {\n      var currTime = times[i];\n\n      if (typeof currTime === 'number' && isNaN(currTime)) {\n        console.error(\"time is not a valid number\", this, i, currTime);\n        valid = false;\n        break;\n      }\n\n      if (prevTime !== null && prevTime > currTime) {\n        console.error(\"out of order keys\", this, i, currTime, prevTime);\n        valid = false;\n        break;\n      }\n\n      prevTime = currTime;\n    }\n\n    if (values !== undefined) {\n      if (THREE.AnimationUtils.isTypedArray(values)) {\n        for (var i = 0, n = values.length; i !== n; ++i) {\n          var value = values[i];\n\n          if (isNaN(value)) {\n            console.error(\"value is not a valid number\", this, i, value);\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    return valid;\n  },\n  // removes equivalent sequential keys as common in morph target sequences\n  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n  optimize: function optimize() {\n    var times = this.times,\n        values = this.values,\n        stride = this.getValueSize(),\n        writeIndex = 1;\n\n    for (var i = 1, n = times.length - 1; i <= n; ++i) {\n      var keep = false;\n      var time = times[i];\n      var timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n      if (time !== timeNext && (i !== 1 || time !== time[0])) {\n        // remove unnecessary keyframes same as their neighbors\n        var offset = i * stride,\n            offsetP = offset - stride,\n            offsetN = offset + stride;\n\n        for (var j = 0; j !== stride; ++j) {\n          var value = values[offset + j];\n\n          if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n            keep = true;\n            break;\n          }\n        }\n      } // in-place compaction\n\n\n      if (keep) {\n        if (i !== writeIndex) {\n          times[writeIndex] = times[i];\n          var readOffset = i * stride,\n              writeOffset = writeIndex * stride;\n\n          for (var j = 0; j !== stride; ++j) {\n            values[writeOffset + j] = values[readOffset + j];\n          }\n        }\n\n        ++writeIndex;\n      }\n    }\n\n    if (writeIndex !== times.length) {\n      this.times = THREE.AnimationUtils.arraySlice(times, 0, writeIndex);\n      this.values = THREE.AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n    }\n\n    return this;\n  }\n}; // Static methods:\n\nObject.assign(THREE.KeyframeTrack, {\n  // Serialization (in static context, because of constructor invocation\n  // and automatic invocation of .toJSON):\n  parse: function parse(json) {\n    if (json.type === undefined) {\n      throw new Error(\"track type undefined, can not parse\");\n    }\n\n    var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName(json.type);\n\n    if (json.times === undefined) {\n      var times = [],\n          values = [];\n      THREE.AnimationUtils.flattenJSON(json.keys, times, values, 'value');\n      json.times = times;\n      json.values = values;\n    } // derived classes can define a static parse method\n\n\n    if (trackType.parse !== undefined) {\n      return trackType.parse(json);\n    } else {\n      // by default, we asssume a constructor compatible with the base\n      return new trackType(json.name, json.times, json.values, json.interpolation);\n    }\n  },\n  toJSON: function toJSON(track) {\n    var trackType = track.constructor;\n    var json; // derived classes can define a static toJSON method\n\n    if (trackType.toJSON !== undefined) {\n      json = trackType.toJSON(track);\n    } else {\n      // by default, we assume the data can be serialized as-is\n      json = {\n        'name': track.name,\n        'times': THREE.AnimationUtils.convertArray(track.times, Array),\n        'values': THREE.AnimationUtils.convertArray(track.values, Array)\n      };\n      var interpolation = track.getInterpolation();\n\n      if (interpolation !== track.DefaultInterpolation) {\n        json.interpolation = interpolation;\n      }\n    }\n\n    json.type = track.ValueTypeName; // mandatory\n\n    return json;\n  },\n  _getTrackTypeForValueTypeName: function _getTrackTypeForValueTypeName(typeName) {\n    switch (typeName.toLowerCase()) {\n      case \"scalar\":\n      case \"double\":\n      case \"float\":\n      case \"number\":\n      case \"integer\":\n        return THREE.NumberKeyframeTrack;\n\n      case \"vector\":\n      case \"vector2\":\n      case \"vector3\":\n      case \"vector4\":\n        return THREE.VectorKeyframeTrack;\n\n      case \"color\":\n        return THREE.ColorKeyframeTrack;\n\n      case \"quaternion\":\n        return THREE.QuaternionKeyframeTrack;\n\n      case \"bool\":\n      case \"boolean\":\n        return THREE.BooleanKeyframeTrack;\n\n      case \"string\":\n        return THREE.StringKeyframeTrack;\n    }\n\n    throw new Error(\"Unsupported typeName: \" + typeName);\n  }\n}); // File:src/animation/PropertyBinding.js\n\n/**\r\n *\r\n * A reference to a real property in the scene graph.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.PropertyBinding = function (rootNode, path, parsedPath) {\n  this.path = path;\n  this.parsedPath = parsedPath || THREE.PropertyBinding.parseTrackName(path);\n  this.node = THREE.PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n  this.rootNode = rootNode;\n};\n\nTHREE.PropertyBinding.prototype = {\n  constructor: THREE.PropertyBinding,\n  getValue: function getValue_unbound(targetArray, offset) {\n    this.bind();\n    this.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n    // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n    // prototype version of these methods with one that represents\n    // the bound state. When the property is not found, the methods\n    // become no-ops.\n  },\n  setValue: function getValue_unbound(sourceArray, offset) {\n    this.bind();\n    this.setValue(sourceArray, offset);\n  },\n  // create getter / setter pair for a property in the scene graph\n  bind: function bind() {\n    var targetObject = this.node,\n        parsedPath = this.parsedPath,\n        objectName = parsedPath.objectName,\n        propertyName = parsedPath.propertyName,\n        propertyIndex = parsedPath.propertyIndex;\n\n    if (!targetObject) {\n      targetObject = THREE.PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n      this.node = targetObject;\n    } // set fail state so we can just 'return' on error\n\n\n    this.getValue = this._getValue_unavailable;\n    this.setValue = this._setValue_unavailable; // ensure there is a value node\n\n    if (!targetObject) {\n      console.error(\"  trying to update node for track: \" + this.path + \" but it wasn't found.\");\n      return;\n    }\n\n    if (objectName) {\n      var objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n      switch (objectName) {\n        case 'materials':\n          if (!targetObject.material) {\n            console.error('  can not bind to material as node does not have a material', this);\n            return;\n          }\n\n          if (!targetObject.material.materials) {\n            console.error('  can not bind to material.materials as node.material does not have a materials array', this);\n            return;\n          }\n\n          targetObject = targetObject.material.materials;\n          break;\n\n        case 'bones':\n          if (!targetObject.skeleton) {\n            console.error('  can not bind to bones as node does not have a skeleton', this);\n            return;\n          } // potential future optimization: skip this if propertyIndex is already an integer\n          // and convert the integer string to a true integer.\n\n\n          targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n          for (var i = 0; i < targetObject.length; i++) {\n            if (targetObject[i].name === objectIndex) {\n              objectIndex = i;\n              break;\n            }\n          }\n\n          break;\n\n        default:\n          if (targetObject[objectName] === undefined) {\n            console.error('  can not bind to objectName of node, undefined', this);\n            return;\n          }\n\n          targetObject = targetObject[objectName];\n      }\n\n      if (objectIndex !== undefined) {\n        if (targetObject[objectIndex] === undefined) {\n          console.error(\"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject);\n          return;\n        }\n\n        targetObject = targetObject[objectIndex];\n      }\n    } // resolve property\n\n\n    var nodeProperty = targetObject[propertyName];\n\n    if (!nodeProperty) {\n      var nodeName = parsedPath.nodeName;\n      console.error(\"  trying to update property for track: \" + nodeName + '.' + propertyName + \" but it wasn't found.\", targetObject);\n      return;\n    } // determine versioning scheme\n\n\n    var versioning = this.Versioning.None;\n\n    if (targetObject.needsUpdate !== undefined) {\n      // material\n      versioning = this.Versioning.NeedsUpdate;\n      this.targetObject = targetObject;\n    } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n      // node transform\n      versioning = this.Versioning.MatrixWorldNeedsUpdate;\n      this.targetObject = targetObject;\n    } // determine how the property gets bound\n\n\n    var bindingType = this.BindingType.Direct;\n\n    if (propertyIndex !== undefined) {\n      // access a sub element of the property array (only primitives are supported right now)\n      if (propertyName === \"morphTargetInfluences\") {\n        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n        // support resolving morphTarget names into indices.\n        if (!targetObject.geometry) {\n          console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry', this);\n          return;\n        }\n\n        if (!targetObject.geometry.morphTargets) {\n          console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this);\n          return;\n        }\n\n        for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {\n          if (targetObject.geometry.morphTargets[i].name === propertyIndex) {\n            propertyIndex = i;\n            break;\n          }\n        }\n      }\n\n      bindingType = this.BindingType.ArrayElement;\n      this.resolvedProperty = nodeProperty;\n      this.propertyIndex = propertyIndex;\n    } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n      // must use copy for Object3D.Euler/Quaternion\n      bindingType = this.BindingType.HasFromToArray;\n      this.resolvedProperty = nodeProperty;\n    } else if (nodeProperty.length !== undefined) {\n      bindingType = this.BindingType.EntireArray;\n      this.resolvedProperty = nodeProperty;\n    } else {\n      this.propertyName = propertyName;\n    } // select getter / setter\n\n\n    this.getValue = this.GetterByBindingType[bindingType];\n    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n  },\n  unbind: function unbind() {\n    this.node = null; // back to the prototype version of getValue / setValue\n    // note: avoiding to mutate the shape of 'this' via 'delete'\n\n    this.getValue = this._getValue_unbound;\n    this.setValue = this._setValue_unbound;\n  }\n};\nObject.assign(THREE.PropertyBinding.prototype, {\n  // prototype, continued\n  // these are used to \"bind\" a nonexistent property\n  _getValue_unavailable: function _getValue_unavailable() {},\n  _setValue_unavailable: function _setValue_unavailable() {},\n  // initial state of these methods that calls 'bind'\n  _getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n  _setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n  BindingType: {\n    Direct: 0,\n    EntireArray: 1,\n    ArrayElement: 2,\n    HasFromToArray: 3\n  },\n  Versioning: {\n    None: 0,\n    NeedsUpdate: 1,\n    MatrixWorldNeedsUpdate: 2\n  },\n  GetterByBindingType: [function getValue_direct(buffer, offset) {\n    buffer[offset] = this.node[this.propertyName];\n  }, function getValue_array(buffer, offset) {\n    var source = this.resolvedProperty;\n\n    for (var i = 0, n = source.length; i !== n; ++i) {\n      buffer[offset++] = source[i];\n    }\n  }, function getValue_arrayElement(buffer, offset) {\n    buffer[offset] = this.resolvedProperty[this.propertyIndex];\n  }, function getValue_toArray(buffer, offset) {\n    this.resolvedProperty.toArray(buffer, offset);\n  }],\n  SetterByBindingTypeAndVersioning: [[// Direct\n  function setValue_direct(buffer, offset) {\n    this.node[this.propertyName] = buffer[offset];\n  }, function setValue_direct_setNeedsUpdate(buffer, offset) {\n    this.node[this.propertyName] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.node[this.propertyName] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }], [// EntireArray\n  function setValue_array(buffer, offset) {\n    var dest = this.resolvedProperty;\n\n    for (var i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n  }, function setValue_array_setNeedsUpdate(buffer, offset) {\n    var dest = this.resolvedProperty;\n\n    for (var i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n\n    this.targetObject.needsUpdate = true;\n  }, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n    var dest = this.resolvedProperty;\n\n    for (var i = 0, n = dest.length; i !== n; ++i) {\n      dest[i] = buffer[offset++];\n    }\n\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }], [// ArrayElement\n  function setValue_arrayElement(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n  }, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.needsUpdate = true;\n  }, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }], [// HasToFromArray\n  function setValue_fromArray(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n  }, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.needsUpdate = true;\n  }, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n    this.resolvedProperty.fromArray(buffer, offset);\n    this.targetObject.matrixWorldNeedsUpdate = true;\n  }]]\n});\n\nTHREE.PropertyBinding.Composite = function (targetGroup, path, optionalParsedPath) {\n  var parsedPath = optionalParsedPath || THREE.PropertyBinding.parseTrackName(path);\n  this._targetGroup = targetGroup;\n  this._bindings = targetGroup.subscribe_(path, parsedPath);\n};\n\nTHREE.PropertyBinding.Composite.prototype = {\n  constructor: THREE.PropertyBinding.Composite,\n  getValue: function getValue(array, offset) {\n    this.bind(); // bind all binding\n\n    var firstValidIndex = this._targetGroup.nCachedObjects_,\n        binding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n    if (binding !== undefined) binding.getValue(array, offset);\n  },\n  setValue: function setValue(array, offset) {\n    var bindings = this._bindings;\n\n    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].setValue(array, offset);\n    }\n  },\n  bind: function bind() {\n    var bindings = this._bindings;\n\n    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].bind();\n    }\n  },\n  unbind: function unbind() {\n    var bindings = this._bindings;\n\n    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n      bindings[i].unbind();\n    }\n  }\n};\n\nTHREE.PropertyBinding.create = function (root, path, parsedPath) {\n  if (!(root instanceof THREE.AnimationObjectGroup)) {\n    return new THREE.PropertyBinding(root, path, parsedPath);\n  } else {\n    return new THREE.PropertyBinding.Composite(root, path, parsedPath);\n  }\n};\n\nTHREE.PropertyBinding.parseTrackName = function (trackName) {\n  // matches strings in the form of:\n  //    nodeName.property\n  //    nodeName.property[accessor]\n  //    nodeName.material.property[accessor]\n  //    uuid.property[accessor]\n  //    uuid.objectName[objectIndex].propertyName[propertyIndex]\n  //    parentName/nodeName.property\n  //    parentName/parentName/nodeName.property[index]\n  //\t  .bone[Armature.DEF_cog].position\n  // created and tested via https://regex101.com/#javascript\n  var re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n  var matches = re.exec(trackName);\n\n  if (!matches) {\n    throw new Error(\"cannot parse trackName at all: \" + trackName);\n  }\n\n  if (matches.index === re.lastIndex) {\n    re.lastIndex++;\n  }\n\n  var results = {\n    // directoryName: matches[1], // (tschw) currently unused\n    nodeName: matches[3],\n    // allowed to be null, specified root node.\n    objectName: matches[5],\n    objectIndex: matches[7],\n    propertyName: matches[9],\n    propertyIndex: matches[11] // allowed to be null, specifies that the whole property is set.\n\n  };\n\n  if (results.propertyName === null || results.propertyName.length === 0) {\n    throw new Error(\"can not parse propertyName from trackName: \" + trackName);\n  }\n\n  return results;\n};\n\nTHREE.PropertyBinding.findNode = function (root, nodeName) {\n  if (!nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n    return root;\n  } // search into skeleton bones.\n\n\n  if (root.skeleton) {\n    var searchSkeleton = function searchSkeleton(skeleton) {\n      for (var i = 0; i < skeleton.bones.length; i++) {\n        var bone = skeleton.bones[i];\n\n        if (bone.name === nodeName) {\n          return bone;\n        }\n      }\n\n      return null;\n    };\n\n    var bone = searchSkeleton(root.skeleton);\n\n    if (bone) {\n      return bone;\n    }\n  } // search into node subtree.\n\n\n  if (root.children) {\n    var searchNodeSubtree = function searchNodeSubtree(children) {\n      for (var i = 0; i < children.length; i++) {\n        var childNode = children[i];\n\n        if (childNode.name === nodeName || childNode.uuid === nodeName) {\n          return childNode;\n        }\n\n        var result = searchNodeSubtree(childNode.children);\n        if (result) return result;\n      }\n\n      return null;\n    };\n\n    var subTreeNode = searchNodeSubtree(root.children);\n\n    if (subTreeNode) {\n      return subTreeNode;\n    }\n  }\n\n  return null;\n}; // File:src/animation/PropertyMixer.js\n\n/**\r\n *\r\n * Buffered scene graph property that allows weighted accumulation.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\n\nTHREE.PropertyMixer = function (binding, typeName, valueSize) {\n  this.binding = binding;\n  this.valueSize = valueSize;\n  var bufferType = Float64Array,\n      mixFunction;\n\n  switch (typeName) {\n    case 'quaternion':\n      mixFunction = this._slerp;\n      break;\n\n    case 'string':\n    case 'bool':\n      bufferType = Array, mixFunction = this._select;\n      break;\n\n    default:\n      mixFunction = this._lerp;\n  }\n\n  this.buffer = new bufferType(valueSize * 4); // layout: [ incoming | accu0 | accu1 | orig ]\n  //\n  // interpolators can use .buffer as their .result\n  // the data then goes to 'incoming'\n  //\n  // 'accu0' and 'accu1' are used frame-interleaved for\n  // the cumulative result and are compared to detect\n  // changes\n  //\n  // 'orig' stores the original state of the property\n\n  this._mixBufferRegion = mixFunction;\n  this.cumulativeWeight = 0;\n  this.useCount = 0;\n  this.referenceCount = 0;\n};\n\nTHREE.PropertyMixer.prototype = {\n  constructor: THREE.PropertyMixer,\n  // accumulate data in the 'incoming' region into 'accu<i>'\n  accumulate: function accumulate(accuIndex, weight) {\n    // note: happily accumulating nothing when weight = 0, the caller knows\n    // the weight and shouldn't have made the call in the first place\n    var buffer = this.buffer,\n        stride = this.valueSize,\n        offset = accuIndex * stride + stride,\n        currentWeight = this.cumulativeWeight;\n\n    if (currentWeight === 0) {\n      // accuN := incoming * weight\n      for (var i = 0; i !== stride; ++i) {\n        buffer[offset + i] = buffer[i];\n      }\n\n      currentWeight = weight;\n    } else {\n      // accuN := accuN + incoming * weight\n      currentWeight += weight;\n      var mix = weight / currentWeight;\n\n      this._mixBufferRegion(buffer, offset, 0, mix, stride);\n    }\n\n    this.cumulativeWeight = currentWeight;\n  },\n  // apply the state of 'accu<i>' to the binding when accus differ\n  apply: function apply(accuIndex) {\n    var stride = this.valueSize,\n        buffer = this.buffer,\n        offset = accuIndex * stride + stride,\n        weight = this.cumulativeWeight,\n        binding = this.binding;\n    this.cumulativeWeight = 0;\n\n    if (weight < 1) {\n      // accuN := accuN + original * ( 1 - cumulativeWeight )\n      var originalValueOffset = stride * 3;\n\n      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n    }\n\n    for (var i = stride, e = stride + stride; i !== e; ++i) {\n      if (buffer[i] !== buffer[i + stride]) {\n        // value has changed -> update scene graph\n        binding.setValue(buffer, offset);\n        break;\n      }\n    }\n  },\n  // remember the state of the bound property and copy it to both accus\n  saveOriginalState: function saveOriginalState() {\n    var binding = this.binding;\n    var buffer = this.buffer,\n        stride = this.valueSize,\n        originalValueOffset = stride * 3;\n    binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n    for (var i = stride, e = originalValueOffset; i !== e; ++i) {\n      buffer[i] = buffer[originalValueOffset + i % stride];\n    }\n\n    this.cumulativeWeight = 0;\n  },\n  // apply the state previously taken via 'saveOriginalState' to the binding\n  restoreOriginalState: function restoreOriginalState() {\n    var originalValueOffset = this.valueSize * 3;\n    this.binding.setValue(this.buffer, originalValueOffset);\n  },\n  // mix functions\n  _select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n    if (t >= 0.5) {\n      for (var i = 0; i !== stride; ++i) {\n        buffer[dstOffset + i] = buffer[srcOffset + i];\n      }\n    }\n  },\n  _slerp: function _slerp(buffer, dstOffset, srcOffset, t, stride) {\n    THREE.Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n  },\n  _lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n    var s = 1 - t;\n\n    for (var i = 0; i !== stride; ++i) {\n      var j = dstOffset + i;\n      buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n    }\n  }\n}; // File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\r\n *\r\n * A Track of Boolean keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.BooleanKeyframeTrack = function (name, times, values) {\n  THREE.KeyframeTrack.call(this, name, times, values);\n};\n\nTHREE.BooleanKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.BooleanKeyframeTrack,\n  ValueTypeName: 'bool',\n  ValueBufferType: Array,\n  DefaultInterpolation: THREE.InterpolateDiscrete,\n  InterpolantFactoryMethodLinear: undefined,\n  InterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n  // representation of a single value and a custom interpolant that\n  // computes \"firstValue ^ isOdd( index )\".\n\n}); // File:src/animation/tracks/ColorKeyframeTrack.js\n\n/**\r\n *\r\n * A Track of keyframe values that represent color.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.ColorKeyframeTrack = function (name, times, values, interpolation) {\n  THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n};\n\nTHREE.ColorKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.ColorKeyframeTrack,\n  ValueTypeName: 'color' // ValueBufferType is inherited\n  // DefaultInterpolation is inherited\n  // Note: Very basic implementation and nothing special yet.\n  // However, this is the place for color space parameterization.\n\n}); // File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\r\n *\r\n * A Track of numeric keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.NumberKeyframeTrack = function (name, times, values, interpolation) {\n  THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n};\n\nTHREE.NumberKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.NumberKeyframeTrack,\n  ValueTypeName: 'number' // ValueBufferType is inherited\n  // DefaultInterpolation is inherited\n\n}); // File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\r\n *\r\n * A Track of quaternion keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.QuaternionKeyframeTrack = function (name, times, values, interpolation) {\n  THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n};\n\nTHREE.QuaternionKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.QuaternionKeyframeTrack,\n  ValueTypeName: 'quaternion',\n  // ValueBufferType is inherited\n  DefaultInterpolation: THREE.InterpolateLinear,\n  InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n    return new THREE.QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n  },\n  InterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n}); // File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\r\n *\r\n * A Track that interpolates Strings\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.StringKeyframeTrack = function (name, times, values, interpolation) {\n  THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n};\n\nTHREE.StringKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.StringKeyframeTrack,\n  ValueTypeName: 'string',\n  ValueBufferType: Array,\n  DefaultInterpolation: THREE.InterpolateDiscrete,\n  InterpolantFactoryMethodLinear: undefined,\n  InterpolantFactoryMethodSmooth: undefined\n}); // File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\r\n *\r\n * A Track of vectored keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\n\nTHREE.VectorKeyframeTrack = function (name, times, values, interpolation) {\n  THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n};\n\nTHREE.VectorKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n  constructor: THREE.VectorKeyframeTrack,\n  ValueTypeName: 'vector' // ValueBufferType is inherited\n  // DefaultInterpolation is inherited\n\n}); // File:src/audio/Audio.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\n\nTHREE.Audio = function (listener) {\n  THREE.Object3D.call(this);\n  this.type = 'Audio';\n  this.context = listener.context;\n  this.source = this.context.createBufferSource();\n  this.source.onended = this.onEnded.bind(this);\n  this.gain = this.context.createGain();\n  this.gain.connect(listener.getInput());\n  this.autoplay = false;\n  this.startTime = 0;\n  this.playbackRate = 1;\n  this.isPlaying = false;\n  this.hasPlaybackControl = true;\n  this.sourceType = 'empty';\n  this.filters = [];\n};\n\nTHREE.Audio.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Audio,\n  getOutput: function getOutput() {\n    return this.gain;\n  },\n  setNodeSource: function setNodeSource(audioNode) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'audioNode';\n    this.source = audioNode;\n    this.connect();\n    return this;\n  },\n  setBuffer: function setBuffer(audioBuffer) {\n    this.source.buffer = audioBuffer;\n    this.sourceType = 'buffer';\n    if (this.autoplay) this.play();\n    return this;\n  },\n  play: function play() {\n    if (this.isPlaying === true) {\n      console.warn('THREE.Audio: Audio is already playing.');\n      return;\n    }\n\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    var source = this.context.createBufferSource();\n    source.buffer = this.source.buffer;\n    source.loop = this.source.loop;\n    source.onended = this.source.onended;\n    source.start(0, this.startTime);\n    source.playbackRate.value = this.playbackRate;\n    this.isPlaying = true;\n    this.source = source;\n    return this.connect();\n  },\n  pause: function pause() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.source.stop();\n    this.startTime = this.context.currentTime;\n    return this;\n  },\n  stop: function stop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.source.stop();\n    this.startTime = 0;\n    return this;\n  },\n  connect: function connect() {\n    if (this.filters.length > 0) {\n      this.source.connect(this.filters[0]);\n\n      for (var i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].connect(this.filters[i]);\n      }\n\n      this.filters[this.filters.length - 1].connect(this.getOutput());\n    } else {\n      this.source.connect(this.getOutput());\n    }\n\n    return this;\n  },\n  disconnect: function disconnect() {\n    if (this.filters.length > 0) {\n      this.source.disconnect(this.filters[0]);\n\n      for (var i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].disconnect(this.filters[i]);\n      }\n\n      this.filters[this.filters.length - 1].disconnect(this.getOutput());\n    } else {\n      this.source.disconnect(this.getOutput());\n    }\n\n    return this;\n  },\n  getFilters: function getFilters() {\n    return this.filters;\n  },\n  setFilters: function setFilters(value) {\n    if (!value) value = [];\n\n    if (this.isPlaying === true) {\n      this.disconnect();\n      this.filters = value;\n      this.connect();\n    } else {\n      this.filters = value;\n    }\n\n    return this;\n  },\n  getFilter: function getFilter() {\n    return this.getFilters()[0];\n  },\n  setFilter: function setFilter(filter) {\n    return this.setFilters(filter ? [filter] : []);\n  },\n  setPlaybackRate: function setPlaybackRate(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.playbackRate = value;\n\n    if (this.isPlaying === true) {\n      this.source.playbackRate.value = this.playbackRate;\n    }\n\n    return this;\n  },\n  getPlaybackRate: function getPlaybackRate() {\n    return this.playbackRate;\n  },\n  onEnded: function onEnded() {\n    this.isPlaying = false;\n  },\n  getLoop: function getLoop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return false;\n    }\n\n    return this.source.loop;\n  },\n  setLoop: function setLoop(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.source.loop = value;\n  },\n  getVolume: function getVolume() {\n    return this.gain.gain.value;\n  },\n  setVolume: function setVolume(value) {\n    this.gain.gain.value = value;\n    return this;\n  }\n}); // File:src/audio/AudioAnalyser.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.AudioAnalyser = function (audio, fftSize) {\n  this.analyser = audio.context.createAnalyser();\n  this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n  this.data = new Uint8Array(this.analyser.frequencyBinCount);\n  audio.getOutput().connect(this.analyser);\n};\n\nObject.assign(THREE.AudioAnalyser.prototype, {\n  getFrequencyData: function getFrequencyData() {\n    this.analyser.getByteFrequencyData(this.data);\n    return this.data;\n  },\n  getAverageFrequency: function getAverageFrequency() {\n    var value = 0,\n        data = this.getFrequencyData();\n\n    for (var i = 0; i < data.length; i++) {\n      value += data[i];\n    }\n\n    return value / data.length;\n  }\n}); // File:src/audio/AudioContext.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nObject.defineProperty(THREE, 'AudioContext', {\n  get: function () {\n    var context;\n    return function () {\n      if (context === undefined) {\n        context = new (window.AudioContext || window.webkitAudioContext)();\n      }\n\n      return context;\n    };\n  }()\n}); // File:src/audio/PositionalAudio.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.PositionalAudio = function (listener) {\n  THREE.Audio.call(this, listener);\n  this.panner = this.context.createPanner();\n  this.panner.connect(this.gain);\n};\n\nTHREE.PositionalAudio.prototype = Object.assign(Object.create(THREE.Audio.prototype), {\n  constructor: THREE.PositionalAudio,\n  getOutput: function getOutput() {\n    return this.panner;\n  },\n  getRefDistance: function getRefDistance() {\n    return this.panner.refDistance;\n  },\n  setRefDistance: function setRefDistance(value) {\n    this.panner.refDistance = value;\n  },\n  getRolloffFactor: function getRolloffFactor() {\n    return this.panner.rolloffFactor;\n  },\n  setRolloffFactor: function setRolloffFactor(value) {\n    this.panner.rolloffFactor = value;\n  },\n  getDistanceModel: function getDistanceModel() {\n    return this.panner.distanceModel;\n  },\n  setDistanceModel: function setDistanceModel(value) {\n    this.panner.distanceModel = value;\n  },\n  getMaxDistance: function getMaxDistance() {\n    return this.panner.maxDistance;\n  },\n  setMaxDistance: function setMaxDistance(value) {\n    this.panner.maxDistance = value;\n  },\n  updateMatrixWorld: function () {\n    var position = new THREE.Vector3();\n    return function updateMatrixWorld(force) {\n      THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n      position.setFromMatrixPosition(this.matrixWorld);\n      this.panner.setPosition(position.x, position.y, position.z);\n    };\n  }()\n}); // File:src/audio/AudioListener.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.AudioListener = function () {\n  THREE.Object3D.call(this);\n  this.type = 'AudioListener';\n  this.context = THREE.AudioContext;\n  this.gain = this.context.createGain();\n  this.gain.connect(this.context.destination);\n  this.filter = null;\n};\n\nTHREE.AudioListener.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.AudioListener,\n  getInput: function getInput() {\n    return this.gain;\n  },\n  removeFilter: function removeFilter() {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n      this.gain.connect(this.context.destination);\n      this.filter = null;\n    }\n  },\n  getFilter: function getFilter() {\n    return this.filter;\n  },\n  setFilter: function setFilter(value) {\n    if (this.filter !== null) {\n      this.gain.disconnect(this.filter);\n      this.filter.disconnect(this.context.destination);\n    } else {\n      this.gain.disconnect(this.context.destination);\n    }\n\n    this.filter = value;\n    this.gain.connect(this.filter);\n    this.filter.connect(this.context.destination);\n  },\n  getMasterVolume: function getMasterVolume() {\n    return this.gain.gain.value;\n  },\n  setMasterVolume: function setMasterVolume(value) {\n    this.gain.gain.value = value;\n  },\n  updateMatrixWorld: function () {\n    var position = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n    var scale = new THREE.Vector3();\n    var orientation = new THREE.Vector3();\n    return function updateMatrixWorld(force) {\n      THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n      var listener = this.context.listener;\n      var up = this.up;\n      this.matrixWorld.decompose(position, quaternion, scale);\n      orientation.set(0, 0, -1).applyQuaternion(quaternion);\n      listener.setPosition(position.x, position.y, position.z);\n      listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);\n    };\n  }()\n}); // File:src/cameras/Camera.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\n\nTHREE.Camera = function () {\n  THREE.Object3D.call(this);\n  this.type = 'Camera';\n  this.matrixWorldInverse = new THREE.Matrix4();\n  this.projectionMatrix = new THREE.Matrix4();\n};\n\nTHREE.Camera.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n  var quaternion = new THREE.Quaternion();\n  return function (optionalTarget) {\n    var result = optionalTarget || new THREE.Vector3();\n    this.getWorldQuaternion(quaternion);\n    return result.set(0, 0, -1).applyQuaternion(quaternion);\n  };\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n  // This routine does not support cameras with rotated and/or translated parent(s)\n  var m1 = new THREE.Matrix4();\n  return function (vector) {\n    m1.lookAt(this.position, vector, this.up);\n    this.quaternion.setFromRotationMatrix(m1);\n  };\n}();\n\nTHREE.Camera.prototype.clone = function () {\n  return new this.constructor().copy(this);\n};\n\nTHREE.Camera.prototype.copy = function (source) {\n  THREE.Object3D.prototype.copy.call(this, source);\n  this.matrixWorldInverse.copy(source.matrixWorldInverse);\n  this.projectionMatrix.copy(source.projectionMatrix);\n  return this;\n}; // File:src/cameras/CubeCamera.js\n\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n\nTHREE.CubeCamera = function (near, far, cubeResolution) {\n  THREE.Object3D.call(this);\n  this.type = 'CubeCamera';\n  var fov = 90,\n      aspect = 1;\n  var cameraPX = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraPX.up.set(0, -1, 0);\n  cameraPX.lookAt(new THREE.Vector3(1, 0, 0));\n  this.add(cameraPX);\n  var cameraNX = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraNX.up.set(0, -1, 0);\n  cameraNX.lookAt(new THREE.Vector3(-1, 0, 0));\n  this.add(cameraNX);\n  var cameraPY = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraPY.up.set(0, 0, 1);\n  cameraPY.lookAt(new THREE.Vector3(0, 1, 0));\n  this.add(cameraPY);\n  var cameraNY = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraNY.up.set(0, 0, -1);\n  cameraNY.lookAt(new THREE.Vector3(0, -1, 0));\n  this.add(cameraNY);\n  var cameraPZ = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraPZ.up.set(0, -1, 0);\n  cameraPZ.lookAt(new THREE.Vector3(0, 0, 1));\n  this.add(cameraPZ);\n  var cameraNZ = new THREE.PerspectiveCamera(fov, aspect, near, far);\n  cameraNZ.up.set(0, -1, 0);\n  cameraNZ.lookAt(new THREE.Vector3(0, 0, -1));\n  this.add(cameraNZ);\n  var options = {\n    format: THREE.RGBFormat,\n    magFilter: THREE.LinearFilter,\n    minFilter: THREE.LinearFilter\n  };\n  this.renderTarget = new THREE.WebGLRenderTargetCube(cubeResolution, cubeResolution, options);\n\n  this.updateCubeMap = function (renderer, scene) {\n    if (this.parent === null) this.updateMatrixWorld();\n    var renderTarget = this.renderTarget;\n    var generateMipmaps = renderTarget.texture.generateMipmaps;\n    renderTarget.texture.generateMipmaps = false;\n    renderTarget.activeCubeFace = 0;\n    renderer.render(scene, cameraPX, renderTarget);\n    renderTarget.activeCubeFace = 1;\n    renderer.render(scene, cameraNX, renderTarget);\n    renderTarget.activeCubeFace = 2;\n    renderer.render(scene, cameraPY, renderTarget);\n    renderTarget.activeCubeFace = 3;\n    renderer.render(scene, cameraNY, renderTarget);\n    renderTarget.activeCubeFace = 4;\n    renderer.render(scene, cameraPZ, renderTarget);\n    renderTarget.texture.generateMipmaps = generateMipmaps;\n    renderTarget.activeCubeFace = 5;\n    renderer.render(scene, cameraNZ, renderTarget);\n    renderer.setRenderTarget(null);\n  };\n};\n\nTHREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera; // File:src/cameras/OrthographicCamera.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.OrthographicCamera = function (left, right, top, bottom, near, far) {\n  THREE.Camera.call(this);\n  this.type = 'OrthographicCamera';\n  this.zoom = 1;\n  this.left = left;\n  this.right = right;\n  this.top = top;\n  this.bottom = bottom;\n  this.near = near !== undefined ? near : 0.1;\n  this.far = far !== undefined ? far : 2000;\n  this.updateProjectionMatrix();\n};\n\nTHREE.OrthographicCamera.prototype = Object.assign(Object.create(THREE.Camera.prototype), {\n  constructor: THREE.OrthographicCamera,\n  copy: function copy(source) {\n    THREE.Camera.prototype.copy.call(this, source);\n    this.left = source.left;\n    this.right = source.right;\n    this.top = source.top;\n    this.bottom = source.bottom;\n    this.near = source.near;\n    this.far = source.far;\n    this.zoom = source.zoom;\n    return this;\n  },\n  updateProjectionMatrix: function updateProjectionMatrix() {\n    var dx = (this.right - this.left) / (2 * this.zoom);\n    var dy = (this.top - this.bottom) / (2 * this.zoom);\n    var cx = (this.right + this.left) / 2;\n    var cy = (this.top + this.bottom) / 2;\n    this.projectionMatrix.makeOrthographic(cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far);\n  },\n  toJSON: function toJSON(meta) {\n    var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n    data.object.zoom = this.zoom;\n    data.object.left = this.left;\n    data.object.right = this.right;\n    data.object.top = this.top;\n    data.object.bottom = this.bottom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    return data;\n  }\n}); // File:src/cameras/PerspectiveCamera.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author tschw\r\n */\n\nTHREE.PerspectiveCamera = function (fov, aspect, near, far) {\n  THREE.Camera.call(this);\n  this.type = 'PerspectiveCamera';\n  this.fov = fov !== undefined ? fov : 50;\n  this.zoom = 1;\n  this.near = near !== undefined ? near : 0.1;\n  this.far = far !== undefined ? far : 2000;\n  this.focus = 10;\n  this.aspect = aspect !== undefined ? aspect : 1;\n  this.view = null;\n  this.filmGauge = 35; // width of the film (default in millimeters)\n\n  this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n  this.updateProjectionMatrix();\n};\n\nTHREE.PerspectiveCamera.prototype = Object.assign(Object.create(THREE.Camera.prototype), {\n  constructor: THREE.PerspectiveCamera,\n  copy: function copy(source) {\n    THREE.Camera.prototype.copy.call(this, source);\n    this.fov = source.fov;\n    this.zoom = source.zoom;\n    this.near = source.near;\n    this.far = source.far;\n    this.focus = source.focus;\n    this.aspect = source.aspect;\n    this.view = source.view === null ? null : Object.assign({}, source.view);\n    this.filmGauge = source.filmGauge;\n    this.filmOffset = source.filmOffset;\n    return this;\n  },\n\n  /**\r\n   * Sets the FOV by focal length in respect to the current .filmGauge.\r\n   *\r\n   * The default film gauge is 35, so that the focal length can be specified for\r\n   * a 35mm (full frame) camera.\r\n   *\r\n   * Values for focal length and film gauge must have the same unit.\r\n   */\n  setFocalLength: function setFocalLength(focalLength) {\n    // see http://www.bobatkins.com/photography/technical/field_of_view.html\n    var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n    this.fov = THREE.Math.RAD2DEG * 2 * Math.atan(vExtentSlope);\n    this.updateProjectionMatrix();\n  },\n\n  /**\r\n   * Calculates the focal length from the current .fov and .filmGauge.\r\n   */\n  getFocalLength: function getFocalLength() {\n    var vExtentSlope = Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov);\n    return 0.5 * this.getFilmHeight() / vExtentSlope;\n  },\n  getEffectiveFOV: function getEffectiveFOV() {\n    return THREE.Math.RAD2DEG * 2 * Math.atan(Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / this.zoom);\n  },\n  getFilmWidth: function getFilmWidth() {\n    // film not completely covered in portrait format (aspect < 1)\n    return this.filmGauge * Math.min(this.aspect, 1);\n  },\n  getFilmHeight: function getFilmHeight() {\n    // film not completely covered in landscape format (aspect > 1)\n    return this.filmGauge / Math.max(this.aspect, 1);\n  },\n\n  /**\r\n   * Sets an offset in a larger frustum. This is useful for multi-window or\r\n   * multi-monitor/multi-machine setups.\r\n   *\r\n   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n   * the monitors are in grid like this\r\n   *\r\n   *   +---+---+---+\r\n   *   | A | B | C |\r\n   *   +---+---+---+\r\n   *   | D | E | F |\r\n   *   +---+---+---+\r\n   *\r\n   * then for each monitor you would call it like this\r\n   *\r\n   *   var w = 1920;\r\n   *   var h = 1080;\r\n   *   var fullWidth = w * 3;\r\n   *   var fullHeight = h * 2;\r\n   *\r\n   *   --A--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n   *   --B--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n   *   --C--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n   *   --D--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n   *   --E--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n   *   --F--\r\n   *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n   *\r\n   *   Note there is no reason monitors have to be the same size or in a grid.\r\n   */\n  setViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n    this.aspect = fullWidth / fullHeight;\n    this.view = {\n      fullWidth: fullWidth,\n      fullHeight: fullHeight,\n      offsetX: x,\n      offsetY: y,\n      width: width,\n      height: height\n    };\n    this.updateProjectionMatrix();\n  },\n  clearViewOffset: function clearViewOffset() {\n    this.view = null;\n    this.updateProjectionMatrix();\n  },\n  updateProjectionMatrix: function updateProjectionMatrix() {\n    var near = this.near,\n        top = near * Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / this.zoom,\n        height = 2 * top,\n        width = this.aspect * height,\n        left = -0.5 * width,\n        view = this.view;\n\n    if (view !== null) {\n      var fullWidth = view.fullWidth,\n          fullHeight = view.fullHeight;\n      left += view.offsetX * width / fullWidth;\n      top -= view.offsetY * height / fullHeight;\n      width *= view.width / fullWidth;\n      height *= view.height / fullHeight;\n    }\n\n    var skew = this.filmOffset;\n    if (skew !== 0) left += near * skew / this.getFilmWidth();\n    this.projectionMatrix.makeFrustum(left, left + width, top - height, top, near, this.far);\n  },\n  toJSON: function toJSON(meta) {\n    var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n    data.object.fov = this.fov;\n    data.object.zoom = this.zoom;\n    data.object.near = this.near;\n    data.object.far = this.far;\n    data.object.focus = this.focus;\n    data.object.aspect = this.aspect;\n    if (this.view !== null) data.object.view = Object.assign({}, this.view);\n    data.object.filmGauge = this.filmGauge;\n    data.object.filmOffset = this.filmOffset;\n    return data;\n  }\n}); // File:src/cameras/StereoCamera.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.StereoCamera = function () {\n  this.type = 'StereoCamera';\n  this.aspect = 1;\n  this.cameraL = new THREE.PerspectiveCamera();\n  this.cameraL.layers.enable(1);\n  this.cameraL.matrixAutoUpdate = false;\n  this.cameraR = new THREE.PerspectiveCamera();\n  this.cameraR.layers.enable(2);\n  this.cameraR.matrixAutoUpdate = false;\n};\n\nObject.assign(THREE.StereoCamera.prototype, {\n  update: function () {\n    var focus, fov, aspect, near, far;\n    var eyeRight = new THREE.Matrix4();\n    var eyeLeft = new THREE.Matrix4();\n    return function update(camera) {\n      var needsUpdate = focus !== camera.focus || fov !== camera.fov || aspect !== camera.aspect * this.aspect || near !== camera.near || far !== camera.far;\n\n      if (needsUpdate) {\n        focus = camera.focus;\n        fov = camera.fov;\n        aspect = camera.aspect * this.aspect;\n        near = camera.near;\n        far = camera.far; // Off-axis stereoscopic effect based on\n        // http://paulbourke.net/stereographics/stereorender/\n\n        var projectionMatrix = camera.projectionMatrix.clone();\n        var eyeSep = 0.064 / 2;\n        var eyeSepOnProjection = eyeSep * near / focus;\n        var ymax = near * Math.tan(THREE.Math.DEG2RAD * fov * 0.5);\n        var xmin, xmax; // translate xOffset\n\n        eyeLeft.elements[12] = -eyeSep;\n        eyeRight.elements[12] = eyeSep; // for left eye\n\n        xmin = -ymax * aspect + eyeSepOnProjection;\n        xmax = ymax * aspect + eyeSepOnProjection;\n        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n        this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n        xmin = -ymax * aspect - eyeSepOnProjection;\n        xmax = ymax * aspect - eyeSepOnProjection;\n        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n        this.cameraR.projectionMatrix.copy(projectionMatrix);\n      }\n\n      this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);\n      this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);\n    };\n  }()\n}); // File:src/lights/Light.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Light = function (color, intensity) {\n  THREE.Object3D.call(this);\n  this.type = 'Light';\n  this.color = new THREE.Color(color);\n  this.intensity = intensity !== undefined ? intensity : 1;\n  this.receiveShadow = undefined;\n};\n\nTHREE.Light.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Light,\n  copy: function copy(source) {\n    THREE.Object3D.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.intensity = source.intensity;\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n    data.object.color = this.color.getHex();\n    data.object.intensity = this.intensity;\n    if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n    if (this.distance !== undefined) data.object.distance = this.distance;\n    if (this.angle !== undefined) data.object.angle = this.angle;\n    if (this.decay !== undefined) data.object.decay = this.decay;\n    if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n    return data;\n  }\n}); // File:src/lights/LightShadow.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.LightShadow = function (camera) {\n  this.camera = camera;\n  this.bias = 0;\n  this.radius = 1;\n  this.mapSize = new THREE.Vector2(512, 512);\n  this.map = null;\n  this.matrix = new THREE.Matrix4();\n};\n\nObject.assign(THREE.LightShadow.prototype, {\n  copy: function copy(source) {\n    this.camera = source.camera.clone();\n    this.bias = source.bias;\n    this.radius = source.radius;\n    this.mapSize.copy(source.mapSize);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  }\n}); // File:src/lights/AmbientLight.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.AmbientLight = function (color, intensity) {\n  THREE.Light.call(this, color, intensity);\n  this.type = 'AmbientLight';\n  this.castShadow = undefined;\n};\n\nTHREE.AmbientLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n  constructor: THREE.AmbientLight\n}); // File:src/lights/DirectionalLight.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.DirectionalLight = function (color, intensity) {\n  THREE.Light.call(this, color, intensity);\n  this.type = 'DirectionalLight';\n  this.position.set(0, 1, 0);\n  this.updateMatrix();\n  this.target = new THREE.Object3D();\n  this.shadow = new THREE.DirectionalLightShadow();\n};\n\nTHREE.DirectionalLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n  constructor: THREE.DirectionalLight,\n  copy: function copy(source) {\n    THREE.Light.prototype.copy.call(this, source);\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}); // File:src/lights/DirectionalLightShadow.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.DirectionalLightShadow = function (light) {\n  THREE.LightShadow.call(this, new THREE.OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n};\n\nTHREE.DirectionalLightShadow.prototype = Object.assign(Object.create(THREE.LightShadow.prototype), {\n  constructor: THREE.DirectionalLightShadow\n}); // File:src/lights/HemisphereLight.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.HemisphereLight = function (skyColor, groundColor, intensity) {\n  THREE.Light.call(this, skyColor, intensity);\n  this.type = 'HemisphereLight';\n  this.castShadow = undefined;\n  this.position.set(0, 1, 0);\n  this.updateMatrix();\n  this.groundColor = new THREE.Color(groundColor);\n};\n\nTHREE.HemisphereLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n  constructor: THREE.HemisphereLight,\n  copy: function copy(source) {\n    THREE.Light.prototype.copy.call(this, source);\n    this.groundColor.copy(source.groundColor);\n    return this;\n  }\n}); // File:src/lights/PointLight.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.PointLight = function (color, intensity, distance, decay) {\n  THREE.Light.call(this, color, intensity);\n  this.type = 'PointLight';\n  Object.defineProperty(this, 'power', {\n    get: function get() {\n      // intensity = power per solid angle.\n      // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n      return this.intensity * 4 * Math.PI;\n    },\n    set: function set(power) {\n      // intensity = power per solid angle.\n      // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n      this.intensity = power / (4 * Math.PI);\n    }\n  });\n  this.distance = distance !== undefined ? distance : 0;\n  this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n  this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(90, 1, 0.5, 500));\n};\n\nTHREE.PointLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n  constructor: THREE.PointLight,\n  copy: function copy(source) {\n    THREE.Light.prototype.copy.call(this, source);\n    this.distance = source.distance;\n    this.decay = source.decay;\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}); // File:src/lights/SpotLight.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.SpotLight = function (color, intensity, distance, angle, penumbra, decay) {\n  THREE.Light.call(this, color, intensity);\n  this.type = 'SpotLight';\n  this.position.set(0, 1, 0);\n  this.updateMatrix();\n  this.target = new THREE.Object3D();\n  Object.defineProperty(this, 'power', {\n    get: function get() {\n      // intensity = power per solid angle.\n      // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n      return this.intensity * Math.PI;\n    },\n    set: function set(power) {\n      // intensity = power per solid angle.\n      // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n      this.intensity = power / Math.PI;\n    }\n  });\n  this.distance = distance !== undefined ? distance : 0;\n  this.angle = angle !== undefined ? angle : Math.PI / 3;\n  this.penumbra = penumbra !== undefined ? penumbra : 0;\n  this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n  this.shadow = new THREE.SpotLightShadow();\n};\n\nTHREE.SpotLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n  constructor: THREE.SpotLight,\n  copy: function copy(source) {\n    THREE.Light.prototype.copy.call(this, source);\n    this.distance = source.distance;\n    this.angle = source.angle;\n    this.penumbra = source.penumbra;\n    this.decay = source.decay;\n    this.target = source.target.clone();\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}); // File:src/lights/SpotLightShadow.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.SpotLightShadow = function () {\n  THREE.LightShadow.call(this, new THREE.PerspectiveCamera(50, 1, 0.5, 500));\n};\n\nTHREE.SpotLightShadow.prototype = Object.assign(Object.create(THREE.LightShadow.prototype), {\n  constructor: THREE.SpotLightShadow,\n  update: function update(light) {\n    var fov = THREE.Math.RAD2DEG * 2 * light.angle;\n    var aspect = this.mapSize.width / this.mapSize.height;\n    var far = light.distance || 500;\n    var camera = this.camera;\n\n    if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n      camera.fov = fov;\n      camera.aspect = aspect;\n      camera.far = far;\n      camera.updateProjectionMatrix();\n    }\n  }\n}); // File:src/loaders/AudioLoader.js\n\n/**\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\n\nTHREE.AudioLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.AudioLoader.prototype = {\n  constructor: THREE.AudioLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var loader = new THREE.XHRLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      var context = THREE.AudioContext;\n      context.decodeAudioData(buffer, function (audioBuffer) {\n        onLoad(audioBuffer);\n      });\n    }, onProgress, onError);\n  }\n}; // File:src/loaders/Cache.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Cache = {\n  enabled: false,\n  files: {},\n  add: function add(key, file) {\n    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n    this.files[key] = file;\n  },\n  get: function get(key) {\n    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n    return this.files[key];\n  },\n  remove: function remove(key) {\n    delete this.files[key];\n  },\n  clear: function clear() {\n    this.files = {};\n  }\n}; // File:src/loaders/Loader.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Loader = function () {\n  this.onLoadStart = function () {};\n\n  this.onLoadProgress = function () {};\n\n  this.onLoadComplete = function () {};\n};\n\nTHREE.Loader.prototype = {\n  constructor: THREE.Loader,\n  crossOrigin: undefined,\n  extractUrlBase: function extractUrlBase(url) {\n    var parts = url.split('/');\n    if (parts.length === 1) return './';\n    parts.pop();\n    return parts.join('/') + '/';\n  },\n  initMaterials: function initMaterials(materials, texturePath, crossOrigin) {\n    var array = [];\n\n    for (var i = 0; i < materials.length; ++i) {\n      array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);\n    }\n\n    return array;\n  },\n  createMaterial: function () {\n    var color, textureLoader, materialLoader;\n    return function (m, texturePath, crossOrigin) {\n      if (color === undefined) color = new THREE.Color();\n      if (textureLoader === undefined) textureLoader = new THREE.TextureLoader();\n      if (materialLoader === undefined) materialLoader = new THREE.MaterialLoader(); // convert from old material format\n\n      var textures = {};\n\n      function loadTexture(path, repeat, offset, wrap, anisotropy) {\n        var fullPath = texturePath + path;\n        var loader = THREE.Loader.Handlers.get(fullPath);\n        var texture;\n\n        if (loader !== null) {\n          texture = loader.load(fullPath);\n        } else {\n          textureLoader.setCrossOrigin(crossOrigin);\n          texture = textureLoader.load(fullPath);\n        }\n\n        if (repeat !== undefined) {\n          texture.repeat.fromArray(repeat);\n          if (repeat[0] !== 1) texture.wrapS = THREE.RepeatWrapping;\n          if (repeat[1] !== 1) texture.wrapT = THREE.RepeatWrapping;\n        }\n\n        if (offset !== undefined) {\n          texture.offset.fromArray(offset);\n        }\n\n        if (wrap !== undefined) {\n          if (wrap[0] === 'repeat') texture.wrapS = THREE.RepeatWrapping;\n          if (wrap[0] === 'mirror') texture.wrapS = THREE.MirroredRepeatWrapping;\n          if (wrap[1] === 'repeat') texture.wrapT = THREE.RepeatWrapping;\n          if (wrap[1] === 'mirror') texture.wrapT = THREE.MirroredRepeatWrapping;\n        }\n\n        if (anisotropy !== undefined) {\n          texture.anisotropy = anisotropy;\n        }\n\n        var uuid = THREE.Math.generateUUID();\n        textures[uuid] = texture;\n        return uuid;\n      } //\n\n\n      var json = {\n        uuid: THREE.Math.generateUUID(),\n        type: 'MeshLambertMaterial'\n      };\n\n      for (var name in m) {\n        var value = m[name];\n\n        switch (name) {\n          case 'DbgColor':\n          case 'DbgIndex':\n          case 'opticalDensity':\n          case 'illumination':\n            break;\n\n          case 'DbgName':\n            json.name = value;\n            break;\n\n          case 'blending':\n            json.blending = THREE[value];\n            break;\n\n          case 'colorAmbient':\n          case 'mapAmbient':\n            console.warn('THREE.Loader.createMaterial:', name, 'is no longer supported.');\n            break;\n\n          case 'colorDiffuse':\n            json.color = color.fromArray(value).getHex();\n            break;\n\n          case 'colorSpecular':\n            json.specular = color.fromArray(value).getHex();\n            break;\n\n          case 'colorEmissive':\n            json.emissive = color.fromArray(value).getHex();\n            break;\n\n          case 'specularCoef':\n            json.shininess = value;\n            break;\n\n          case 'shading':\n            if (value.toLowerCase() === 'basic') json.type = 'MeshBasicMaterial';\n            if (value.toLowerCase() === 'phong') json.type = 'MeshPhongMaterial';\n            break;\n\n          case 'mapDiffuse':\n            json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);\n            break;\n\n          case 'mapDiffuseRepeat':\n          case 'mapDiffuseOffset':\n          case 'mapDiffuseWrap':\n          case 'mapDiffuseAnisotropy':\n            break;\n\n          case 'mapLight':\n            json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);\n            break;\n\n          case 'mapLightRepeat':\n          case 'mapLightOffset':\n          case 'mapLightWrap':\n          case 'mapLightAnisotropy':\n            break;\n\n          case 'mapAO':\n            json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);\n            break;\n\n          case 'mapAORepeat':\n          case 'mapAOOffset':\n          case 'mapAOWrap':\n          case 'mapAOAnisotropy':\n            break;\n\n          case 'mapBump':\n            json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);\n            break;\n\n          case 'mapBumpScale':\n            json.bumpScale = value;\n            break;\n\n          case 'mapBumpRepeat':\n          case 'mapBumpOffset':\n          case 'mapBumpWrap':\n          case 'mapBumpAnisotropy':\n            break;\n\n          case 'mapNormal':\n            json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);\n            break;\n\n          case 'mapNormalFactor':\n            json.normalScale = [value, value];\n            break;\n\n          case 'mapNormalRepeat':\n          case 'mapNormalOffset':\n          case 'mapNormalWrap':\n          case 'mapNormalAnisotropy':\n            break;\n\n          case 'mapSpecular':\n            json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);\n            break;\n\n          case 'mapSpecularRepeat':\n          case 'mapSpecularOffset':\n          case 'mapSpecularWrap':\n          case 'mapSpecularAnisotropy':\n            break;\n\n          case 'mapAlpha':\n            json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);\n            break;\n\n          case 'mapAlphaRepeat':\n          case 'mapAlphaOffset':\n          case 'mapAlphaWrap':\n          case 'mapAlphaAnisotropy':\n            break;\n\n          case 'flipSided':\n            json.side = THREE.BackSide;\n            break;\n\n          case 'doubleSided':\n            json.side = THREE.DoubleSide;\n            break;\n\n          case 'transparency':\n            console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');\n            json.opacity = value;\n            break;\n\n          case 'depthTest':\n          case 'depthWrite':\n          case 'colorWrite':\n          case 'opacity':\n          case 'reflectivity':\n          case 'transparent':\n          case 'visible':\n          case 'wireframe':\n            json[name] = value;\n            break;\n\n          case 'vertexColors':\n            if (value === true) json.vertexColors = THREE.VertexColors;\n            if (value === 'face') json.vertexColors = THREE.FaceColors;\n            break;\n\n          default:\n            console.error('THREE.Loader.createMaterial: Unsupported', name, value);\n            break;\n        }\n      }\n\n      if (json.type === 'MeshBasicMaterial') delete json.emissive;\n      if (json.type !== 'MeshPhongMaterial') delete json.specular;\n      if (json.opacity < 1) json.transparent = true;\n      materialLoader.setTextures(textures);\n      return materialLoader.parse(json);\n    };\n  }()\n};\nTHREE.Loader.Handlers = {\n  handlers: [],\n  add: function add(regex, loader) {\n    this.handlers.push(regex, loader);\n  },\n  get: function get(file) {\n    var handlers = this.handlers;\n\n    for (var i = 0, l = handlers.length; i < l; i += 2) {\n      var regex = handlers[i];\n      var loader = handlers[i + 1];\n\n      if (regex.test(file)) {\n        return loader;\n      }\n    }\n\n    return null;\n  }\n}; // File:src/loaders/XHRLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.XHRLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.XHRLoader.prototype = {\n  constructor: THREE.XHRLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    if (this.path !== undefined) url = this.path + url;\n    var scope = this;\n    var cached = THREE.Cache.get(url);\n\n    if (cached !== undefined) {\n      if (onLoad) {\n        setTimeout(function () {\n          onLoad(cached);\n        }, 0);\n      }\n\n      return cached;\n    }\n\n    var request = new XMLHttpRequest();\n    request.overrideMimeType('text/plain');\n    request.open('GET', url, true);\n    request.addEventListener('load', function (event) {\n      var response = event.target.response;\n      THREE.Cache.add(url, response);\n\n      if (this.status === 200) {\n        if (onLoad) onLoad(response);\n        scope.manager.itemEnd(url);\n      } else if (this.status === 0) {\n        // Some browsers return HTTP Status 0 when using non-http protocol\n        // e.g. 'file://' or 'data://'. Handle as success.\n        console.warn('THREE.XHRLoader: HTTP Status 0 received.');\n        if (onLoad) onLoad(response);\n        scope.manager.itemEnd(url);\n      } else {\n        if (onError) onError(event);\n        scope.manager.itemError(url);\n      }\n    }, false);\n\n    if (onProgress !== undefined) {\n      request.addEventListener('progress', function (event) {\n        onProgress(event);\n      }, false);\n    }\n\n    request.addEventListener('error', function (event) {\n      if (onError) onError(event);\n      scope.manager.itemError(url);\n    }, false);\n    if (this.responseType !== undefined) request.responseType = this.responseType;\n    if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n    request.send(null);\n    scope.manager.itemStart(url);\n    return request;\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n  },\n  setResponseType: function setResponseType(value) {\n    this.responseType = value;\n  },\n  setWithCredentials: function setWithCredentials(value) {\n    this.withCredentials = value;\n  }\n}; // File:src/loaders/FontLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.FontLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.FontLoader.prototype = {\n  constructor: THREE.FontLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.XHRLoader(this.manager);\n    loader.load(url, function (text) {\n      var json;\n\n      try {\n        json = JSON.parse(text);\n      } catch (e) {\n        console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n        json = JSON.parse(text.substring(65, text.length - 2));\n      }\n\n      var font = scope.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  },\n  parse: function parse(json) {\n    return new THREE.Font(json);\n  }\n}; // File:src/loaders/ImageLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.ImageLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.ImageLoader.prototype = {\n  constructor: THREE.ImageLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    if (this.path !== undefined) url = this.path + url;\n    var scope = this;\n    var cached = THREE.Cache.get(url);\n\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n\n      if (onLoad) {\n        setTimeout(function () {\n          onLoad(cached);\n          scope.manager.itemEnd(url);\n        }, 0);\n      } else {\n        scope.manager.itemEnd(url);\n      }\n\n      return cached;\n    }\n\n    var image = document.createElement('img');\n    image.addEventListener('load', function (event) {\n      THREE.Cache.add(url, this);\n      if (onLoad) onLoad(this);\n      scope.manager.itemEnd(url);\n    }, false);\n\n    if (onProgress !== undefined) {\n      image.addEventListener('progress', function (event) {\n        onProgress(event);\n      }, false);\n    }\n\n    image.addEventListener('error', function (event) {\n      if (onError) onError(event);\n      scope.manager.itemError(url);\n    }, false);\n    if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n    scope.manager.itemStart(url);\n    image.src = url;\n    return image;\n  },\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n  }\n}; // File:src/loaders/JSONLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.JSONLoader = function (manager) {\n  if (typeof manager === 'boolean') {\n    console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');\n    manager = undefined;\n  }\n\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  this.withCredentials = false;\n};\n\nTHREE.JSONLoader.prototype = {\n  constructor: THREE.JSONLoader,\n\n  // Deprecated\n  get statusDomElement() {\n    if (this._statusDomElement === undefined) {\n      this._statusDomElement = document.createElement('div');\n    }\n\n    console.warn('THREE.JSONLoader: .statusDomElement has been removed.');\n    return this._statusDomElement;\n  },\n\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texturePath = this.texturePath && typeof this.texturePath === \"string\" ? this.texturePath : THREE.Loader.prototype.extractUrlBase(url);\n    var loader = new THREE.XHRLoader(this.manager);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      var json = JSON.parse(text);\n      var metadata = json.metadata;\n\n      if (metadata !== undefined) {\n        var type = metadata.type;\n\n        if (type !== undefined) {\n          if (type.toLowerCase() === 'object') {\n            console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.');\n            return;\n          }\n\n          if (type.toLowerCase() === 'scene') {\n            console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.');\n            return;\n          }\n        }\n      }\n\n      var object = scope.parse(json, texturePath);\n      onLoad(object.geometry, object.materials);\n    }, onProgress, onError);\n  },\n  setTexturePath: function setTexturePath(value) {\n    this.texturePath = value;\n  },\n  parse: function parse(json, texturePath) {\n    var geometry = new THREE.Geometry(),\n        scale = json.scale !== undefined ? 1.0 / json.scale : 1.0;\n    parseModel(scale);\n    parseSkin();\n    parseMorphing(scale);\n    parseAnimations();\n    geometry.computeFaceNormals();\n    geometry.computeBoundingSphere();\n\n    function parseModel(scale) {\n      function isBitSet(value, position) {\n        return value & 1 << position;\n      }\n\n      var i,\n          j,\n          fi,\n          offset,\n          zLength,\n          colorIndex,\n          normalIndex,\n          uvIndex,\n          materialIndex,\n          type,\n          isQuad,\n          hasMaterial,\n          hasFaceVertexUv,\n          hasFaceNormal,\n          hasFaceVertexNormal,\n          hasFaceColor,\n          hasFaceVertexColor,\n          vertex,\n          face,\n          faceA,\n          faceB,\n          hex,\n          normal,\n          uvLayer,\n          uv,\n          u,\n          v,\n          faces = json.faces,\n          vertices = json.vertices,\n          normals = json.normals,\n          colors = json.colors,\n          nUvLayers = 0;\n\n      if (json.uvs !== undefined) {\n        // disregard empty arrays\n        for (i = 0; i < json.uvs.length; i++) {\n          if (json.uvs[i].length) nUvLayers++;\n        }\n\n        for (i = 0; i < nUvLayers; i++) {\n          geometry.faceVertexUvs[i] = [];\n        }\n      }\n\n      offset = 0;\n      zLength = vertices.length;\n\n      while (offset < zLength) {\n        vertex = new THREE.Vector3();\n        vertex.x = vertices[offset++] * scale;\n        vertex.y = vertices[offset++] * scale;\n        vertex.z = vertices[offset++] * scale;\n        geometry.vertices.push(vertex);\n      }\n\n      offset = 0;\n      zLength = faces.length;\n\n      while (offset < zLength) {\n        type = faces[offset++];\n        isQuad = isBitSet(type, 0);\n        hasMaterial = isBitSet(type, 1);\n        hasFaceVertexUv = isBitSet(type, 3);\n        hasFaceNormal = isBitSet(type, 4);\n        hasFaceVertexNormal = isBitSet(type, 5);\n        hasFaceColor = isBitSet(type, 6);\n        hasFaceVertexColor = isBitSet(type, 7); // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n        if (isQuad) {\n          faceA = new THREE.Face3();\n          faceA.a = faces[offset];\n          faceA.b = faces[offset + 1];\n          faceA.c = faces[offset + 3];\n          faceB = new THREE.Face3();\n          faceB.a = faces[offset + 1];\n          faceB.b = faces[offset + 2];\n          faceB.c = faces[offset + 3];\n          offset += 4;\n\n          if (hasMaterial) {\n            materialIndex = faces[offset++];\n            faceA.materialIndex = materialIndex;\n            faceB.materialIndex = materialIndex;\n          } // to get face <=> uv index correspondence\n\n\n          fi = geometry.faces.length;\n\n          if (hasFaceVertexUv) {\n            for (i = 0; i < nUvLayers; i++) {\n              uvLayer = json.uvs[i];\n              geometry.faceVertexUvs[i][fi] = [];\n              geometry.faceVertexUvs[i][fi + 1] = [];\n\n              for (j = 0; j < 4; j++) {\n                uvIndex = faces[offset++];\n                u = uvLayer[uvIndex * 2];\n                v = uvLayer[uvIndex * 2 + 1];\n                uv = new THREE.Vector2(u, v);\n                if (j !== 2) geometry.faceVertexUvs[i][fi].push(uv);\n                if (j !== 0) geometry.faceVertexUvs[i][fi + 1].push(uv);\n              }\n            }\n          }\n\n          if (hasFaceNormal) {\n            normalIndex = faces[offset++] * 3;\n            faceA.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n            faceB.normal.copy(faceA.normal);\n          }\n\n          if (hasFaceVertexNormal) {\n            for (i = 0; i < 4; i++) {\n              normalIndex = faces[offset++] * 3;\n              normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n              if (i !== 2) faceA.vertexNormals.push(normal);\n              if (i !== 0) faceB.vertexNormals.push(normal);\n            }\n          }\n\n          if (hasFaceColor) {\n            colorIndex = faces[offset++];\n            hex = colors[colorIndex];\n            faceA.color.setHex(hex);\n            faceB.color.setHex(hex);\n          }\n\n          if (hasFaceVertexColor) {\n            for (i = 0; i < 4; i++) {\n              colorIndex = faces[offset++];\n              hex = colors[colorIndex];\n              if (i !== 2) faceA.vertexColors.push(new THREE.Color(hex));\n              if (i !== 0) faceB.vertexColors.push(new THREE.Color(hex));\n            }\n          }\n\n          geometry.faces.push(faceA);\n          geometry.faces.push(faceB);\n        } else {\n          face = new THREE.Face3();\n          face.a = faces[offset++];\n          face.b = faces[offset++];\n          face.c = faces[offset++];\n\n          if (hasMaterial) {\n            materialIndex = faces[offset++];\n            face.materialIndex = materialIndex;\n          } // to get face <=> uv index correspondence\n\n\n          fi = geometry.faces.length;\n\n          if (hasFaceVertexUv) {\n            for (i = 0; i < nUvLayers; i++) {\n              uvLayer = json.uvs[i];\n              geometry.faceVertexUvs[i][fi] = [];\n\n              for (j = 0; j < 3; j++) {\n                uvIndex = faces[offset++];\n                u = uvLayer[uvIndex * 2];\n                v = uvLayer[uvIndex * 2 + 1];\n                uv = new THREE.Vector2(u, v);\n                geometry.faceVertexUvs[i][fi].push(uv);\n              }\n            }\n          }\n\n          if (hasFaceNormal) {\n            normalIndex = faces[offset++] * 3;\n            face.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n          }\n\n          if (hasFaceVertexNormal) {\n            for (i = 0; i < 3; i++) {\n              normalIndex = faces[offset++] * 3;\n              normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n              face.vertexNormals.push(normal);\n            }\n          }\n\n          if (hasFaceColor) {\n            colorIndex = faces[offset++];\n            face.color.setHex(colors[colorIndex]);\n          }\n\n          if (hasFaceVertexColor) {\n            for (i = 0; i < 3; i++) {\n              colorIndex = faces[offset++];\n              face.vertexColors.push(new THREE.Color(colors[colorIndex]));\n            }\n          }\n\n          geometry.faces.push(face);\n        }\n      }\n    }\n\n    function parseSkin() {\n      var influencesPerVertex = json.influencesPerVertex !== undefined ? json.influencesPerVertex : 2;\n\n      if (json.skinWeights) {\n        for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {\n          var x = json.skinWeights[i];\n          var y = influencesPerVertex > 1 ? json.skinWeights[i + 1] : 0;\n          var z = influencesPerVertex > 2 ? json.skinWeights[i + 2] : 0;\n          var w = influencesPerVertex > 3 ? json.skinWeights[i + 3] : 0;\n          geometry.skinWeights.push(new THREE.Vector4(x, y, z, w));\n        }\n      }\n\n      if (json.skinIndices) {\n        for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {\n          var a = json.skinIndices[i];\n          var b = influencesPerVertex > 1 ? json.skinIndices[i + 1] : 0;\n          var c = influencesPerVertex > 2 ? json.skinIndices[i + 2] : 0;\n          var d = influencesPerVertex > 3 ? json.skinIndices[i + 3] : 0;\n          geometry.skinIndices.push(new THREE.Vector4(a, b, c, d));\n        }\n      }\n\n      geometry.bones = json.bones;\n\n      if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {\n        console.warn('When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' + geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.');\n      }\n    }\n\n    function parseMorphing(scale) {\n      if (json.morphTargets !== undefined) {\n        for (var i = 0, l = json.morphTargets.length; i < l; i++) {\n          geometry.morphTargets[i] = {};\n          geometry.morphTargets[i].name = json.morphTargets[i].name;\n          geometry.morphTargets[i].vertices = [];\n          var dstVertices = geometry.morphTargets[i].vertices;\n          var srcVertices = json.morphTargets[i].vertices;\n\n          for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {\n            var vertex = new THREE.Vector3();\n            vertex.x = srcVertices[v] * scale;\n            vertex.y = srcVertices[v + 1] * scale;\n            vertex.z = srcVertices[v + 2] * scale;\n            dstVertices.push(vertex);\n          }\n        }\n      }\n\n      if (json.morphColors !== undefined && json.morphColors.length > 0) {\n        console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');\n        var faces = geometry.faces;\n        var morphColors = json.morphColors[0].colors;\n\n        for (var i = 0, l = faces.length; i < l; i++) {\n          faces[i].color.fromArray(morphColors, i * 3);\n        }\n      }\n    }\n\n    function parseAnimations() {\n      var outputAnimations = []; // parse old style Bone/Hierarchy animations\n\n      var animations = [];\n\n      if (json.animation !== undefined) {\n        animations.push(json.animation);\n      }\n\n      if (json.animations !== undefined) {\n        if (json.animations.length) {\n          animations = animations.concat(json.animations);\n        } else {\n          animations.push(json.animations);\n        }\n      }\n\n      for (var i = 0; i < animations.length; i++) {\n        var clip = THREE.AnimationClip.parseAnimation(animations[i], geometry.bones);\n        if (clip) outputAnimations.push(clip);\n      } // parse implicit morph animations\n\n\n      if (geometry.morphTargets) {\n        // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n        var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);\n        outputAnimations = outputAnimations.concat(morphAnimationClips);\n      }\n\n      if (outputAnimations.length > 0) geometry.animations = outputAnimations;\n    }\n\n    if (json.materials === undefined || json.materials.length === 0) {\n      return {\n        geometry: geometry\n      };\n    } else {\n      var materials = THREE.Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);\n      return {\n        geometry: geometry,\n        materials: materials\n      };\n    }\n  }\n}; // File:src/loaders/LoadingManager.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.LoadingManager = function (onLoad, onProgress, onError) {\n  var scope = this;\n  var isLoading = false,\n      itemsLoaded = 0,\n      itemsTotal = 0;\n  this.onStart = undefined;\n  this.onLoad = onLoad;\n  this.onProgress = onProgress;\n  this.onError = onError;\n\n  this.itemStart = function (url) {\n    itemsTotal++;\n\n    if (isLoading === false) {\n      if (scope.onStart !== undefined) {\n        scope.onStart(url, itemsLoaded, itemsTotal);\n      }\n    }\n\n    isLoading = true;\n  };\n\n  this.itemEnd = function (url) {\n    itemsLoaded++;\n\n    if (scope.onProgress !== undefined) {\n      scope.onProgress(url, itemsLoaded, itemsTotal);\n    }\n\n    if (itemsLoaded === itemsTotal) {\n      isLoading = false;\n\n      if (scope.onLoad !== undefined) {\n        scope.onLoad();\n      }\n    }\n  };\n\n  this.itemError = function (url) {\n    if (scope.onError !== undefined) {\n      scope.onError(url);\n    }\n  };\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager(); // File:src/loaders/BufferGeometryLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.BufferGeometryLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.BufferGeometryLoader.prototype = {\n  constructor: THREE.BufferGeometryLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(JSON.parse(text)));\n    }, onProgress, onError);\n  },\n  parse: function parse(json) {\n    var geometry = new THREE.BufferGeometry();\n    var index = json.data.index;\n    var TYPED_ARRAYS = {\n      'Int8Array': Int8Array,\n      'Uint8Array': Uint8Array,\n      'Uint8ClampedArray': Uint8ClampedArray,\n      'Int16Array': Int16Array,\n      'Uint16Array': Uint16Array,\n      'Int32Array': Int32Array,\n      'Uint32Array': Uint32Array,\n      'Float32Array': Float32Array,\n      'Float64Array': Float64Array\n    };\n\n    if (index !== undefined) {\n      var typedArray = new TYPED_ARRAYS[index.type](index.array);\n      geometry.setIndex(new THREE.BufferAttribute(typedArray, 1));\n    }\n\n    var attributes = json.data.attributes;\n\n    for (var key in attributes) {\n      var attribute = attributes[key];\n      var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);\n      geometry.addAttribute(key, new THREE.BufferAttribute(typedArray, attribute.itemSize, attribute.normalized));\n    }\n\n    var groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n    if (groups !== undefined) {\n      for (var i = 0, n = groups.length; i !== n; ++i) {\n        var group = groups[i];\n        geometry.addGroup(group.start, group.count, group.materialIndex);\n      }\n    }\n\n    var boundingSphere = json.data.boundingSphere;\n\n    if (boundingSphere !== undefined) {\n      var center = new THREE.Vector3();\n\n      if (boundingSphere.center !== undefined) {\n        center.fromArray(boundingSphere.center);\n      }\n\n      geometry.boundingSphere = new THREE.Sphere(center, boundingSphere.radius);\n    }\n\n    return geometry;\n  }\n}; // File:src/loaders/MaterialLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.MaterialLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  this.textures = {};\n};\n\nTHREE.MaterialLoader.prototype = {\n  constructor: THREE.MaterialLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(JSON.parse(text)));\n    }, onProgress, onError);\n  },\n  setTextures: function setTextures(value) {\n    this.textures = value;\n  },\n  getTexture: function getTexture(name) {\n    var textures = this.textures;\n\n    if (textures[name] === undefined) {\n      console.warn('THREE.MaterialLoader: Undefined texture', name);\n    }\n\n    return textures[name];\n  },\n  parse: function parse(json) {\n    var material = new THREE[json.type]();\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.uniforms !== undefined) material.uniforms = json.uniforms;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n    if (json.vertexColors !== undefined) material.vertexColors = json.vertexColors;\n    if (json.shading !== undefined) material.shading = json.shading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth; // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n    if (json.map !== undefined) material.map = this.getTexture(json.map);\n\n    if (json.alphaMap !== undefined) {\n      material.alphaMap = this.getTexture(json.alphaMap);\n      material.transparent = true;\n    }\n\n    if (json.bumpMap !== undefined) material.bumpMap = this.getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = this.getTexture(json.normalMap);\n\n    if (json.normalScale !== undefined) {\n      var normalScale = json.normalScale;\n\n      if (Array.isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n        normalScale = [normalScale, normalScale];\n      }\n\n      material.normalScale = new THREE.Vector2().fromArray(normalScale);\n    }\n\n    if (json.displacementMap !== undefined) material.displacementMap = this.getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = this.getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = this.getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = this.getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = this.getTexture(json.specularMap);\n\n    if (json.envMap !== undefined) {\n      material.envMap = this.getTexture(json.envMap);\n      material.combine = THREE.MultiplyOperation;\n    }\n\n    if (json.reflectivity) material.reflectivity = json.reflectivity;\n    if (json.lightMap !== undefined) material.lightMap = this.getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = this.getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity; // MultiMaterial\n\n    if (json.materials !== undefined) {\n      for (var i = 0, l = json.materials.length; i < l; i++) {\n        material.materials.push(this.parse(json.materials[i]));\n      }\n    }\n\n    return material;\n  }\n}; // File:src/loaders/ObjectLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.ObjectLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  this.texturePath = '';\n};\n\nTHREE.ObjectLoader.prototype = {\n  constructor: THREE.ObjectLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    if (this.texturePath === '') {\n      this.texturePath = url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    var scope = this;\n    var loader = new THREE.XHRLoader(scope.manager);\n    loader.load(url, function (text) {\n      scope.parse(JSON.parse(text), onLoad);\n    }, onProgress, onError);\n  },\n  setTexturePath: function setTexturePath(value) {\n    this.texturePath = value;\n  },\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n  },\n  parse: function parse(json, onLoad) {\n    var geometries = this.parseGeometries(json.geometries);\n    var images = this.parseImages(json.images, function () {\n      if (onLoad !== undefined) onLoad(object);\n    });\n    var textures = this.parseTextures(json.textures, images);\n    var materials = this.parseMaterials(json.materials, textures);\n    var object = this.parseObject(json.object, geometries, materials);\n\n    if (json.animations) {\n      object.animations = this.parseAnimations(json.animations);\n    }\n\n    if (json.images === undefined || json.images.length === 0) {\n      if (onLoad !== undefined) onLoad(object);\n    }\n\n    return object;\n  },\n  parseGeometries: function parseGeometries(json) {\n    var geometries = {};\n\n    if (json !== undefined) {\n      var geometryLoader = new THREE.JSONLoader();\n      var bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n      for (var i = 0, l = json.length; i < l; i++) {\n        var geometry;\n        var data = json[i];\n\n        switch (data.type) {\n          case 'PlaneGeometry':\n          case 'PlaneBufferGeometry':\n            geometry = new THREE[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n            break;\n\n          case 'BoxGeometry':\n          case 'BoxBufferGeometry':\n          case 'CubeGeometry':\n            // backwards compatible\n            geometry = new THREE[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n            break;\n\n          case 'CircleGeometry':\n          case 'CircleBufferGeometry':\n            geometry = new THREE[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n            break;\n\n          case 'CylinderGeometry':\n          case 'CylinderBufferGeometry':\n            geometry = new THREE[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n            break;\n\n          case 'ConeGeometry':\n          case 'ConeBufferGeometry':\n            geometry = new THREE[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n            break;\n\n          case 'SphereGeometry':\n          case 'SphereBufferGeometry':\n            geometry = new THREE[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n            break;\n\n          case 'DodecahedronGeometry':\n          case 'IcosahedronGeometry':\n          case 'OctahedronGeometry':\n          case 'TetrahedronGeometry':\n            geometry = new THREE[data.type](data.radius, data.detail);\n            break;\n\n          case 'RingGeometry':\n          case 'RingBufferGeometry':\n            geometry = new THREE[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n            break;\n\n          case 'TorusGeometry':\n          case 'TorusBufferGeometry':\n            geometry = new THREE[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n            break;\n\n          case 'TorusKnotGeometry':\n          case 'TorusKnotBufferGeometry':\n            geometry = new THREE[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n            break;\n\n          case 'LatheGeometry':\n          case 'LatheBufferGeometry':\n            geometry = new THREE[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n            break;\n\n          case 'BufferGeometry':\n            geometry = bufferGeometryLoader.parse(data);\n            break;\n\n          case 'Geometry':\n            geometry = geometryLoader.parse(data.data, this.texturePath).geometry;\n            break;\n\n          default:\n            console.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n            continue;\n        }\n\n        geometry.uuid = data.uuid;\n        if (data.name !== undefined) geometry.name = data.name;\n        geometries[data.uuid] = geometry;\n      }\n    }\n\n    return geometries;\n  },\n  parseMaterials: function parseMaterials(json, textures) {\n    var materials = {};\n\n    if (json !== undefined) {\n      var loader = new THREE.MaterialLoader();\n      loader.setTextures(textures);\n\n      for (var i = 0, l = json.length; i < l; i++) {\n        var material = loader.parse(json[i]);\n        materials[material.uuid] = material;\n      }\n    }\n\n    return materials;\n  },\n  parseAnimations: function parseAnimations(json) {\n    var animations = [];\n\n    for (var i = 0; i < json.length; i++) {\n      var clip = THREE.AnimationClip.parse(json[i]);\n      animations.push(clip);\n    }\n\n    return animations;\n  },\n  parseImages: function parseImages(json, onLoad) {\n    var scope = this;\n    var images = {};\n\n    function loadImage(url) {\n      scope.manager.itemStart(url);\n      return loader.load(url, function () {\n        scope.manager.itemEnd(url);\n      });\n    }\n\n    if (json !== undefined && json.length > 0) {\n      var manager = new THREE.LoadingManager(onLoad);\n      var loader = new THREE.ImageLoader(manager);\n      loader.setCrossOrigin(this.crossOrigin);\n\n      for (var i = 0, l = json.length; i < l; i++) {\n        var image = json[i];\n        var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url) ? image.url : scope.texturePath + image.url;\n        images[image.uuid] = loadImage(path);\n      }\n    }\n\n    return images;\n  },\n  parseTextures: function parseTextures(json, images) {\n    function parseConstant(value) {\n      if (typeof value === 'number') return value;\n      console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n      return THREE[value];\n    }\n\n    var textures = {};\n\n    if (json !== undefined) {\n      for (var i = 0, l = json.length; i < l; i++) {\n        var data = json[i];\n\n        if (data.image === undefined) {\n          console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n        }\n\n        if (images[data.image] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined image', data.image);\n        }\n\n        var texture = new THREE.Texture(images[data.image]);\n        texture.needsUpdate = true;\n        texture.uuid = data.uuid;\n        if (data.name !== undefined) texture.name = data.name;\n        if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping);\n        if (data.offset !== undefined) texture.offset = new THREE.Vector2(data.offset[0], data.offset[1]);\n        if (data.repeat !== undefined) texture.repeat = new THREE.Vector2(data.repeat[0], data.repeat[1]);\n        if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter);\n        if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter);\n        if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\n        if (Array.isArray(data.wrap)) {\n          texture.wrapS = parseConstant(data.wrap[0]);\n          texture.wrapT = parseConstant(data.wrap[1]);\n        }\n\n        textures[data.uuid] = texture;\n      }\n    }\n\n    return textures;\n  },\n  parseObject: function () {\n    var matrix = new THREE.Matrix4();\n    return function (data, geometries, materials) {\n      var object;\n\n      function getGeometry(name) {\n        if (geometries[name] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined geometry', name);\n        }\n\n        return geometries[name];\n      }\n\n      function getMaterial(name) {\n        if (name === undefined) return undefined;\n\n        if (materials[name] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined material', name);\n        }\n\n        return materials[name];\n      }\n\n      switch (data.type) {\n        case 'Scene':\n          object = new THREE.Scene();\n          break;\n\n        case 'PerspectiveCamera':\n          object = new THREE.PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n          if (data.focus !== undefined) object.focus = data.focus;\n          if (data.zoom !== undefined) object.zoom = data.zoom;\n          if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n          if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n          if (data.view !== undefined) object.view = Object.assign({}, data.view);\n          break;\n\n        case 'OrthographicCamera':\n          object = new THREE.OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n          break;\n\n        case 'AmbientLight':\n          object = new THREE.AmbientLight(data.color, data.intensity);\n          break;\n\n        case 'DirectionalLight':\n          object = new THREE.DirectionalLight(data.color, data.intensity);\n          break;\n\n        case 'PointLight':\n          object = new THREE.PointLight(data.color, data.intensity, data.distance, data.decay);\n          break;\n\n        case 'SpotLight':\n          object = new THREE.SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n          break;\n\n        case 'HemisphereLight':\n          object = new THREE.HemisphereLight(data.color, data.groundColor, data.intensity);\n          break;\n\n        case 'Mesh':\n          var geometry = getGeometry(data.geometry);\n          var material = getMaterial(data.material);\n\n          if (geometry.bones && geometry.bones.length > 0) {\n            object = new THREE.SkinnedMesh(geometry, material);\n          } else {\n            object = new THREE.Mesh(geometry, material);\n          }\n\n          break;\n\n        case 'LOD':\n          object = new THREE.LOD();\n          break;\n\n        case 'Line':\n          object = new THREE.Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);\n          break;\n\n        case 'PointCloud':\n        case 'Points':\n          object = new THREE.Points(getGeometry(data.geometry), getMaterial(data.material));\n          break;\n\n        case 'Sprite':\n          object = new THREE.Sprite(getMaterial(data.material));\n          break;\n\n        case 'Group':\n          object = new THREE.Group();\n          break;\n\n        default:\n          object = new THREE.Object3D();\n      }\n\n      object.uuid = data.uuid;\n      if (data.name !== undefined) object.name = data.name;\n\n      if (data.matrix !== undefined) {\n        matrix.fromArray(data.matrix);\n        matrix.decompose(object.position, object.quaternion, object.scale);\n      } else {\n        if (data.position !== undefined) object.position.fromArray(data.position);\n        if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n        if (data.scale !== undefined) object.scale.fromArray(data.scale);\n      }\n\n      if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n      if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n      if (data.visible !== undefined) object.visible = data.visible;\n      if (data.userData !== undefined) object.userData = data.userData;\n\n      if (data.children !== undefined) {\n        for (var child in data.children) {\n          object.add(this.parseObject(data.children[child], geometries, materials));\n        }\n      }\n\n      if (data.type === 'LOD') {\n        var levels = data.levels;\n\n        for (var l = 0; l < levels.length; l++) {\n          var level = levels[l];\n          var child = object.getObjectByProperty('uuid', level.object);\n\n          if (child !== undefined) {\n            object.addLevel(child, level.distance);\n          }\n        }\n      }\n\n      return object;\n    };\n  }()\n}; // File:src/loaders/TextureLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.TextureLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.TextureLoader.prototype = {\n  constructor: THREE.TextureLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var texture = new THREE.Texture();\n    var loader = new THREE.ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    loader.load(url, function (image) {\n      texture.image = image;\n      texture.needsUpdate = true;\n\n      if (onLoad !== undefined) {\n        onLoad(texture);\n      }\n    }, onProgress, onError);\n    return texture;\n  },\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n  }\n}; // File:src/loaders/CubeTextureLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.CubeTextureLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.CubeTextureLoader.prototype = {\n  constructor: THREE.CubeTextureLoader,\n  load: function load(urls, onLoad, onProgress, onError) {\n    var texture = new THREE.CubeTexture();\n    var loader = new THREE.ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n    var loaded = 0;\n\n    function loadTexture(i) {\n      loader.load(urls[i], function (image) {\n        texture.images[i] = image;\n        loaded++;\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, undefined, onError);\n    }\n\n    for (var i = 0; i < urls.length; ++i) {\n      loadTexture(i);\n    }\n\n    return texture;\n  },\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n  }\n}; // File:src/loaders/BinaryTextureLoader.js\n\n/**\r\n * @author Nikos M. / https://github.com/foo123/\r\n *\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager; // override in sub classes\n\n  this._parser = null;\n};\n\nTHREE.BinaryTextureLoader.prototype = {\n  constructor: THREE.BinaryTextureLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texture = new THREE.DataTexture();\n    var loader = new THREE.XHRLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      var texData = scope._parser(buffer);\n\n      if (!texData) return;\n\n      if (undefined !== texData.image) {\n        texture.image = texData.image;\n      } else if (undefined !== texData.data) {\n        texture.image.width = texData.width;\n        texture.image.height = texData.height;\n        texture.image.data = texData.data;\n      }\n\n      texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n      texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n      texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n      texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n      texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n      if (undefined !== texData.format) {\n        texture.format = texData.format;\n      }\n\n      if (undefined !== texData.type) {\n        texture.type = texData.type;\n      }\n\n      if (undefined !== texData.mipmaps) {\n        texture.mipmaps = texData.mipmaps;\n      }\n\n      if (1 === texData.mipmapCount) {\n        texture.minFilter = THREE.LinearFilter;\n      }\n\n      texture.needsUpdate = true;\n      if (onLoad) onLoad(texture, texData);\n    }, onProgress, onError);\n    return texture;\n  }\n}; // File:src/loaders/CompressedTextureLoader.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n */\n\nTHREE.CompressedTextureLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager; // override in sub classes\n\n  this._parser = null;\n};\n\nTHREE.CompressedTextureLoader.prototype = {\n  constructor: THREE.CompressedTextureLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var images = [];\n    var texture = new THREE.CompressedTexture();\n    texture.image = images;\n    var loader = new THREE.XHRLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n\n    function loadTexture(i) {\n      loader.load(url[i], function (buffer) {\n        var texDatas = scope._parser(buffer, true);\n\n        images[i] = {\n          width: texDatas.width,\n          height: texDatas.height,\n          format: texDatas.format,\n          mipmaps: texDatas.mipmaps\n        };\n        loaded += 1;\n\n        if (loaded === 6) {\n          if (texDatas.mipmapCount === 1) texture.minFilter = THREE.LinearFilter;\n          texture.format = texDatas.format;\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    if (Array.isArray(url)) {\n      var loaded = 0;\n\n      for (var i = 0, il = url.length; i < il; ++i) {\n        loadTexture(i);\n      }\n    } else {\n      // compressed cubemap texture stored in a single DDS file\n      loader.load(url, function (buffer) {\n        var texDatas = scope._parser(buffer, true);\n\n        if (texDatas.isCubemap) {\n          var faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n          for (var f = 0; f < faces; f++) {\n            images[f] = {\n              mipmaps: []\n            };\n\n            for (var i = 0; i < texDatas.mipmapCount; i++) {\n              images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n              images[f].format = texDatas.format;\n              images[f].width = texDatas.width;\n              images[f].height = texDatas.height;\n            }\n          }\n        } else {\n          texture.image.width = texDatas.width;\n          texture.image.height = texDatas.height;\n          texture.mipmaps = texDatas.mipmaps;\n        }\n\n        if (texDatas.mipmapCount === 1) {\n          texture.minFilter = THREE.LinearFilter;\n        }\n\n        texture.format = texDatas.format;\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onProgress, onError);\n    }\n\n    return texture;\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n  }\n}; // File:src/materials/Material.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Material = function () {\n  Object.defineProperty(this, 'id', {\n    value: THREE.MaterialIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.type = 'Material';\n  this.fog = true;\n  this.lights = true;\n  this.blending = THREE.NormalBlending;\n  this.side = THREE.FrontSide;\n  this.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\n  this.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n  this.opacity = 1;\n  this.transparent = false;\n  this.blendSrc = THREE.SrcAlphaFactor;\n  this.blendDst = THREE.OneMinusSrcAlphaFactor;\n  this.blendEquation = THREE.AddEquation;\n  this.blendSrcAlpha = null;\n  this.blendDstAlpha = null;\n  this.blendEquationAlpha = null;\n  this.depthFunc = THREE.LessEqualDepth;\n  this.depthTest = true;\n  this.depthWrite = true;\n  this.clippingPlanes = null;\n  this.clipShadows = false;\n  this.colorWrite = true;\n  this.precision = null; // override the renderer's default precision for this material\n\n  this.polygonOffset = false;\n  this.polygonOffsetFactor = 0;\n  this.polygonOffsetUnits = 0;\n  this.alphaTest = 0;\n  this.premultipliedAlpha = false;\n  this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n  this.visible = true;\n  this._needsUpdate = true;\n};\n\nTHREE.Material.prototype = {\n  constructor: THREE.Material,\n\n  get needsUpdate() {\n    return this._needsUpdate;\n  },\n\n  set needsUpdate(value) {\n    if (value === true) this.update();\n    this._needsUpdate = value;\n  },\n\n  setValues: function setValues(values) {\n    if (values === undefined) return;\n\n    for (var key in values) {\n      var newValue = values[key];\n\n      if (newValue === undefined) {\n        console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n        continue;\n      }\n\n      var currentValue = this[key];\n\n      if (currentValue === undefined) {\n        console.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n        continue;\n      }\n\n      if (currentValue instanceof THREE.Color) {\n        currentValue.set(newValue);\n      } else if (currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3) {\n        currentValue.copy(newValue);\n      } else if (key === 'overdraw') {\n        // ensure overdraw is backwards-compatible with legacy boolean type\n        this[key] = Number(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  },\n  toJSON: function toJSON(meta) {\n    var isRoot = meta === undefined;\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n\n    var data = {\n      metadata: {\n        version: 4.4,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    }; // standard Material serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color instanceof THREE.Color) data.color = this.color.getHex();\n    if (this.roughness !== 0.5) data.roughness = this.roughness;\n    if (this.metalness !== 0.5) data.metalness = this.metalness;\n    if (this.emissive instanceof THREE.Color) data.emissive = this.emissive.getHex();\n    if (this.specular instanceof THREE.Color) data.specular = this.specular.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.map instanceof THREE.Texture) data.map = this.map.toJSON(meta).uuid;\n    if (this.alphaMap instanceof THREE.Texture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap instanceof THREE.Texture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n    if (this.bumpMap instanceof THREE.Texture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n\n    if (this.normalMap instanceof THREE.Texture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalScale = this.normalScale.toArray();\n    }\n\n    if (this.displacementMap instanceof THREE.Texture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n\n    if (this.roughnessMap instanceof THREE.Texture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap instanceof THREE.Texture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap instanceof THREE.Texture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap instanceof THREE.Texture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n    if (this.envMap instanceof THREE.Texture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      data.reflectivity = this.reflectivity; // Scale behind envMap\n    }\n\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== THREE.NormalBlending) data.blending = this.blending;\n    if (this.shading !== THREE.SmoothShading) data.shading = this.shading;\n    if (this.side !== THREE.FrontSide) data.side = this.side;\n    if (this.vertexColors !== THREE.NoColors) data.vertexColors = this.vertexColors;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = this.transparent;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth; // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      var values = [];\n\n      for (var key in cache) {\n        var data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      var textures = extractFromCache(meta.textures);\n      var images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n\n    return data;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.name = source.name;\n    this.fog = source.fog;\n    this.lights = source.lights;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.alphaTest = source.alphaTest;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.overdraw = source.overdraw;\n    this.visible = source.visible;\n    this.clipShadows = source.clipShadows;\n    var srcPlanes = source.clippingPlanes,\n        dstPlanes = null;\n\n    if (srcPlanes !== null) {\n      var n = srcPlanes.length;\n      dstPlanes = new Array(n);\n\n      for (var i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n\n    this.clippingPlanes = dstPlanes;\n    return this;\n  },\n  update: function update() {\n    this.dispatchEvent({\n      type: 'update'\n    });\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n};\nObject.assign(THREE.Material.prototype, THREE.EventDispatcher.prototype);\nTHREE.MaterialIdCount = 0; // File:src/materials/LineBasicMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\"\r\n * }\r\n */\n\nTHREE.LineBasicMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'LineBasicMaterial';\n  this.color = new THREE.Color(0xffffff);\n  this.linewidth = 1;\n  this.linecap = 'round';\n  this.linejoin = 'round';\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.linewidth = source.linewidth;\n  this.linecap = source.linecap;\n  this.linejoin = source.linejoin;\n  return this;\n}; // File:src/materials/LineDashedMaterial.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>\r\n * }\r\n */\n\n\nTHREE.LineDashedMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'LineDashedMaterial';\n  this.color = new THREE.Color(0xffffff);\n  this.linewidth = 1;\n  this.scale = 1;\n  this.dashSize = 3;\n  this.gapSize = 1;\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.linewidth = source.linewidth;\n  this.scale = source.scale;\n  this.dashSize = source.dashSize;\n  this.gapSize = source.gapSize;\n  return this;\n}; // File:src/materials/MeshBasicMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>\r\n * }\r\n */\n\n\nTHREE.MeshBasicMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'MeshBasicMaterial';\n  this.color = new THREE.Color(0xffffff); // emissive\n\n  this.map = null;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = THREE.MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  return this;\n}; // File:src/materials/MeshDepthMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / https://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\n\n\nTHREE.MeshDepthMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'MeshDepthMaterial';\n  this.depthPacking = THREE.BasicDepthPacking;\n  this.skinning = false;\n  this.morphTargets = false;\n  this.map = null;\n  this.alphaMap = null;\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.fog = false;\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.depthPacking = source.depthPacking;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.map = source.map;\n  this.alphaMap = source.alphaMap;\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  return this;\n}; // File:src/materials/MeshLambertMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\n\n\nTHREE.MeshLambertMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'MeshLambertMaterial';\n  this.color = new THREE.Color(0xffffff); // diffuse\n\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new THREE.Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = THREE.MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n}; // File:src/materials/MeshNormalMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\n\n\nTHREE.MeshNormalMaterial = function (parameters) {\n  THREE.Material.call(this, parameters);\n  this.type = 'MeshNormalMaterial';\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.fog = false;\n  this.lights = false;\n  this.morphTargets = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  return this;\n}; // File:src/materials/MeshPhongMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\n\n\nTHREE.MeshPhongMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'MeshPhongMaterial';\n  this.color = new THREE.Color(0xffffff); // diffuse\n\n  this.specular = new THREE.Color(0x111111);\n  this.shininess = 30;\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new THREE.Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalScale = new THREE.Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.specularMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.combine = THREE.MultiplyOperation;\n  this.reflectivity = 1;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.specular.copy(source.specular);\n  this.shininess = source.shininess;\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.specularMap = source.specularMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.combine = source.combine;\n  this.reflectivity = source.reflectivity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n}; // File:src/materials/MeshStandardMaterial.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  roughness: <float>,\r\n *  metalness: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  roughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  metalnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  envMapIntensity: <float>\r\n *\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\n\n\nTHREE.MeshStandardMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.defines = {\n    'STANDARD': ''\n  };\n  this.type = 'MeshStandardMaterial';\n  this.color = new THREE.Color(0xffffff); // diffuse\n\n  this.roughness = 0.5;\n  this.metalness = 0.5;\n  this.map = null;\n  this.lightMap = null;\n  this.lightMapIntensity = 1.0;\n  this.aoMap = null;\n  this.aoMapIntensity = 1.0;\n  this.emissive = new THREE.Color(0x000000);\n  this.emissiveIntensity = 1.0;\n  this.emissiveMap = null;\n  this.bumpMap = null;\n  this.bumpScale = 1;\n  this.normalMap = null;\n  this.normalScale = new THREE.Vector2(1, 1);\n  this.displacementMap = null;\n  this.displacementScale = 1;\n  this.displacementBias = 0;\n  this.roughnessMap = null;\n  this.metalnessMap = null;\n  this.alphaMap = null;\n  this.envMap = null;\n  this.envMapIntensity = 1.0;\n  this.refractionRatio = 0.98;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.wireframeLinecap = 'round';\n  this.wireframeLinejoin = 'round';\n  this.skinning = false;\n  this.morphTargets = false;\n  this.morphNormals = false;\n  this.setValues(parameters);\n};\n\nTHREE.MeshStandardMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\nTHREE.MeshStandardMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.defines = {\n    'STANDARD': ''\n  };\n  this.color.copy(source.color);\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  this.map = source.map;\n  this.lightMap = source.lightMap;\n  this.lightMapIntensity = source.lightMapIntensity;\n  this.aoMap = source.aoMap;\n  this.aoMapIntensity = source.aoMapIntensity;\n  this.emissive.copy(source.emissive);\n  this.emissiveMap = source.emissiveMap;\n  this.emissiveIntensity = source.emissiveIntensity;\n  this.bumpMap = source.bumpMap;\n  this.bumpScale = source.bumpScale;\n  this.normalMap = source.normalMap;\n  this.normalScale.copy(source.normalScale);\n  this.displacementMap = source.displacementMap;\n  this.displacementScale = source.displacementScale;\n  this.displacementBias = source.displacementBias;\n  this.roughnessMap = source.roughnessMap;\n  this.metalnessMap = source.metalnessMap;\n  this.alphaMap = source.alphaMap;\n  this.envMap = source.envMap;\n  this.envMapIntensity = source.envMapIntensity;\n  this.refractionRatio = source.refractionRatio;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.wireframeLinecap = source.wireframeLinecap;\n  this.wireframeLinejoin = source.wireframeLinejoin;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  return this;\n}; // File:src/materials/MeshPhysicalMaterial.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  reflectivity: <float>\r\n * }\r\n */\n\n\nTHREE.MeshPhysicalMaterial = function (parameters) {\n  THREE.MeshStandardMaterial.call(this);\n  this.defines = {\n    'PHYSICAL': ''\n  };\n  this.type = 'MeshPhysicalMaterial';\n  this.reflectivity = 0.5; // maps to F0 = 0.04\n\n  this.setValues(parameters);\n};\n\nTHREE.MeshPhysicalMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\nTHREE.MeshPhysicalMaterial.prototype.copy = function (source) {\n  THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n  this.defines = {\n    'PHYSICAL': ''\n  };\n  this.reflectivity = source.reflectivity;\n  return this;\n}; // File:src/materials/MultiMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.MultiMaterial = function (materials) {\n  this.uuid = THREE.Math.generateUUID();\n  this.type = 'MultiMaterial';\n  this.materials = materials instanceof Array ? materials : [];\n  this.visible = true;\n};\n\nTHREE.MultiMaterial.prototype = {\n  constructor: THREE.MultiMaterial,\n  toJSON: function toJSON(meta) {\n    var output = {\n      metadata: {\n        version: 4.2,\n        type: 'material',\n        generator: 'MaterialExporter'\n      },\n      uuid: this.uuid,\n      type: this.type,\n      materials: []\n    };\n    var materials = this.materials;\n\n    for (var i = 0, l = materials.length; i < l; i++) {\n      var material = materials[i].toJSON(meta);\n      delete material.metadata;\n      output.materials.push(material);\n    }\n\n    output.visible = this.visible;\n    return output;\n  },\n  clone: function clone() {\n    var material = new this.constructor();\n\n    for (var i = 0; i < this.materials.length; i++) {\n      material.materials.push(this.materials[i].clone());\n    }\n\n    material.visible = this.visible;\n    return material;\n  }\n}; // File:src/materials/PointsMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *  sizeAttenuation: <bool>\r\n * }\r\n */\n\nTHREE.PointsMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'PointsMaterial';\n  this.color = new THREE.Color(0xffffff);\n  this.map = null;\n  this.size = 1;\n  this.sizeAttenuation = true;\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.PointsMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.size = source.size;\n  this.sizeAttenuation = source.sizeAttenuation;\n  return this;\n}; // File:src/materials/ShaderMaterial.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  defines: { \"label\" : \"value\" },\r\n *  uniforms: { \"parameter1\": { type: \"1f\", value: 1.0 }, \"parameter2\": { type: \"1i\" value2: 2 } },\r\n *\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\n\n\nTHREE.ShaderMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'ShaderMaterial';\n  this.defines = {};\n  this.uniforms = {};\n  this.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n  this.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n  this.linewidth = 1;\n  this.wireframe = false;\n  this.wireframeLinewidth = 1;\n  this.fog = false; // set to use scene fog\n\n  this.lights = false; // set to use scene lights\n\n  this.clipping = false; // set to use user-defined clipping planes\n\n  this.skinning = false; // set to use skinning attribute streams\n\n  this.morphTargets = false; // set to use morph targets\n\n  this.morphNormals = false; // set to use morph normals\n\n  this.extensions = {\n    derivatives: false,\n    // set to use derivatives\n    fragDepth: false,\n    // set to use fragment depth values\n    drawBuffers: false,\n    // set to use draw buffers\n    shaderTextureLOD: false // set to use shader texture LOD\n\n  }; // When rendered geometry doesn't include these attributes but the material does,\n  // use these default values in WebGL. This avoids errors when buffer data is missing.\n\n  this.defaultAttributeValues = {\n    'color': [1, 1, 1],\n    'uv': [0, 0],\n    'uv2': [0, 0]\n  };\n  this.index0AttributeName = undefined;\n\n  if (parameters !== undefined) {\n    if (parameters.attributes !== undefined) {\n      console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n    }\n\n    this.setValues(parameters);\n  }\n};\n\nTHREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.fragmentShader = source.fragmentShader;\n  this.vertexShader = source.vertexShader;\n  this.uniforms = THREE.UniformsUtils.clone(source.uniforms);\n  this.defines = source.defines;\n  this.wireframe = source.wireframe;\n  this.wireframeLinewidth = source.wireframeLinewidth;\n  this.lights = source.lights;\n  this.clipping = source.clipping;\n  this.skinning = source.skinning;\n  this.morphTargets = source.morphTargets;\n  this.morphNormals = source.morphNormals;\n  this.extensions = source.extensions;\n  return this;\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function (meta) {\n  var data = THREE.Material.prototype.toJSON.call(this, meta);\n  data.uniforms = this.uniforms;\n  data.vertexShader = this.vertexShader;\n  data.fragmentShader = this.fragmentShader;\n  return data;\n}; // File:src/materials/RawShaderMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.RawShaderMaterial = function (parameters) {\n  THREE.ShaderMaterial.call(this, parameters);\n  this.type = 'RawShaderMaterial';\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial; // File:src/materials/SpriteMaterial.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2()\r\n * }\r\n */\n\nTHREE.SpriteMaterial = function (parameters) {\n  THREE.Material.call(this);\n  this.type = 'SpriteMaterial';\n  this.color = new THREE.Color(0xffffff);\n  this.map = null;\n  this.rotation = 0;\n  this.fog = false;\n  this.lights = false;\n  this.setValues(parameters);\n};\n\nTHREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function (source) {\n  THREE.Material.prototype.copy.call(this, source);\n  this.color.copy(source.color);\n  this.map = source.map;\n  this.rotation = source.rotation;\n  return this;\n}; // File:src/materials/ShadowMaterial.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.ShadowMaterial = function () {\n  THREE.ShaderMaterial.call(this, {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib[\"lights\"], {\n      opacity: {\n        value: 1.0\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['shadow_vert'],\n    fragmentShader: THREE.ShaderChunk['shadow_frag']\n  });\n  this.lights = true;\n  this.transparent = true;\n  Object.defineProperties(this, {\n    opacity: {\n      enumerable: true,\n      get: function get() {\n        return this.uniforms.opacity.value;\n      },\n      set: function set(value) {\n        this.uniforms.opacity.value = value;\n      }\n    }\n  });\n};\n\nTHREE.ShadowMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial; // File:src/textures/Texture.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\n\nTHREE.Texture = function (image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n  Object.defineProperty(this, 'id', {\n    value: THREE.TextureIdCount++\n  });\n  this.uuid = THREE.Math.generateUUID();\n  this.name = '';\n  this.sourceFile = '';\n  this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n  this.mipmaps = [];\n  this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n  this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n  this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n  this.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n  this.format = format !== undefined ? format : THREE.RGBAFormat;\n  this.type = type !== undefined ? type : THREE.UnsignedByteType;\n  this.offset = new THREE.Vector2(0, 0);\n  this.repeat = new THREE.Vector2(1, 1);\n  this.generateMipmaps = true;\n  this.premultiplyAlpha = false;\n  this.flipY = true;\n  this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n  // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n  //\n  // Also changing the encoding after already used by a Material will not automatically make the Material\n  // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n  this.encoding = encoding !== undefined ? encoding : THREE.LinearEncoding;\n  this.version = 0;\n  this.onUpdate = null;\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\nTHREE.Texture.prototype = {\n  constructor: THREE.Texture,\n\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  },\n\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.image = source.image;\n    this.mipmaps = source.mipmaps.slice(0);\n    this.mapping = source.mapping;\n    this.wrapS = source.wrapS;\n    this.wrapT = source.wrapT;\n    this.magFilter = source.magFilter;\n    this.minFilter = source.minFilter;\n    this.anisotropy = source.anisotropy;\n    this.format = source.format;\n    this.type = source.type;\n    this.offset.copy(source.offset);\n    this.repeat.copy(source.repeat);\n    this.generateMipmaps = source.generateMipmaps;\n    this.premultiplyAlpha = source.premultiplyAlpha;\n    this.flipY = source.flipY;\n    this.unpackAlignment = source.unpackAlignment;\n    this.encoding = source.encoding;\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    if (meta.textures[this.uuid] !== undefined) {\n      return meta.textures[this.uuid];\n    }\n\n    function getDataURL(image) {\n      var canvas;\n\n      if (image.toDataURL !== undefined) {\n        canvas = image;\n      } else {\n        canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height);\n      }\n\n      if (canvas.width > 2048 || canvas.height > 2048) {\n        return canvas.toDataURL('image/jpeg', 0.6);\n      } else {\n        return canvas.toDataURL('image/png');\n      }\n    }\n\n    var output = {\n      metadata: {\n        version: 4.4,\n        type: 'Texture',\n        generator: 'Texture.toJSON'\n      },\n      uuid: this.uuid,\n      name: this.name,\n      mapping: this.mapping,\n      repeat: [this.repeat.x, this.repeat.y],\n      offset: [this.offset.x, this.offset.y],\n      wrap: [this.wrapS, this.wrapT],\n      minFilter: this.minFilter,\n      magFilter: this.magFilter,\n      anisotropy: this.anisotropy\n    };\n\n    if (this.image !== undefined) {\n      // TODO: Move to THREE.Image\n      var image = this.image;\n\n      if (image.uuid === undefined) {\n        image.uuid = THREE.Math.generateUUID(); // UGH\n      }\n\n      if (meta.images[image.uuid] === undefined) {\n        meta.images[image.uuid] = {\n          uuid: image.uuid,\n          url: getDataURL(image)\n        };\n      }\n\n      output.image = image.uuid;\n    }\n\n    meta.textures[this.uuid] = output;\n    return output;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  },\n  transformUv: function transformUv(uv) {\n    if (this.mapping !== THREE.UVMapping) return;\n    uv.multiply(this.repeat);\n    uv.add(this.offset);\n\n    if (uv.x < 0 || uv.x > 1) {\n      switch (this.wrapS) {\n        case THREE.RepeatWrapping:\n          uv.x = uv.x - Math.floor(uv.x);\n          break;\n\n        case THREE.ClampToEdgeWrapping:\n          uv.x = uv.x < 0 ? 0 : 1;\n          break;\n\n        case THREE.MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n            uv.x = Math.ceil(uv.x) - uv.x;\n          } else {\n            uv.x = uv.x - Math.floor(uv.x);\n          }\n\n          break;\n      }\n    }\n\n    if (uv.y < 0 || uv.y > 1) {\n      switch (this.wrapT) {\n        case THREE.RepeatWrapping:\n          uv.y = uv.y - Math.floor(uv.y);\n          break;\n\n        case THREE.ClampToEdgeWrapping:\n          uv.y = uv.y < 0 ? 0 : 1;\n          break;\n\n        case THREE.MirroredRepeatWrapping:\n          if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n            uv.y = Math.ceil(uv.y) - uv.y;\n          } else {\n            uv.y = uv.y - Math.floor(uv.y);\n          }\n\n          break;\n      }\n    }\n\n    if (this.flipY) {\n      uv.y = 1 - uv.y;\n    }\n  }\n};\nObject.assign(THREE.Texture.prototype, THREE.EventDispatcher.prototype);\nTHREE.TextureIdCount = 0; // File:src/textures/DepthTexture.js\n\n/**\r\n * @author Matt DesLauriers / @mattdesl\r\n */\n\nTHREE.DepthTexture = function (width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {\n  THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy);\n  this.image = {\n    width: width,\n    height: height\n  };\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n  this.flipY = false;\n  this.generateMipmaps = false;\n};\n\nTHREE.DepthTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture; // File:src/textures/CanvasTexture.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.CanvasTexture = function (canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n  THREE.Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n  this.needsUpdate = true;\n};\n\nTHREE.CanvasTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture; // File:src/textures/CubeTexture.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.CubeTexture = function (images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n  images = images !== undefined ? images : [];\n  mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n  THREE.Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n  this.flipY = false;\n};\n\nTHREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\nObject.defineProperty(THREE.CubeTexture.prototype, 'images', {\n  get: function get() {\n    return this.image;\n  },\n  set: function set(value) {\n    this.image = value;\n  }\n}); // File:src/textures/CompressedTexture.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.CompressedTexture = function (mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n  THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n  this.image = {\n    width: width,\n    height: height\n  };\n  this.mipmaps = mipmaps; // no flipping for cube textures\n  // (also flipping doesn't work for compressed textures )\n\n  this.flipY = false; // can't generate mipmaps for compressed textures\n  // mips must be embedded in DDS files\n\n  this.generateMipmaps = false;\n};\n\nTHREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture; // File:src/textures/DataTexture.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.DataTexture = function (data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n  THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n  this.image = {\n    data: data,\n    width: width,\n    height: height\n  };\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n  this.flipY = false;\n  this.generateMipmaps = false;\n};\n\nTHREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture; // File:src/textures/VideoTexture.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.VideoTexture = function (video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n  THREE.Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n  this.generateMipmaps = false;\n  var scope = this;\n\n  function update() {\n    requestAnimationFrame(update);\n\n    if (video.readyState >= video.HAVE_CURRENT_DATA) {\n      scope.needsUpdate = true;\n    }\n  }\n\n  update();\n};\n\nTHREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture; // File:src/objects/Group.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Group = function () {\n  THREE.Object3D.call(this);\n  this.type = 'Group';\n};\n\nTHREE.Group.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Group\n}); // File:src/objects/Points.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Points = function (geometry, material) {\n  THREE.Object3D.call(this);\n  this.type = 'Points';\n  this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n  this.material = material !== undefined ? material : new THREE.PointsMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nTHREE.Points.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Points,\n  raycast: function () {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    return function raycast(raycaster, intersects) {\n      var object = this;\n      var geometry = this.geometry;\n      var matrixWorld = this.matrixWorld;\n      var threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      sphere.copy(geometry.boundingSphere);\n      sphere.applyMatrix4(matrixWorld);\n      if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n      inverseMatrix.getInverse(matrixWorld);\n      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n      var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n      var localThresholdSq = localThreshold * localThreshold;\n      var position = new THREE.Vector3();\n\n      function testPoint(point, index) {\n        var rayPointDistanceSq = ray.distanceSqToPoint(point);\n\n        if (rayPointDistanceSq < localThresholdSq) {\n          var intersectPoint = ray.closestPointToPoint(point);\n          intersectPoint.applyMatrix4(matrixWorld);\n          var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n          if (distance < raycaster.near || distance > raycaster.far) return;\n          intersects.push({\n            distance: distance,\n            distanceToRay: Math.sqrt(rayPointDistanceSq),\n            point: intersectPoint.clone(),\n            index: index,\n            face: null,\n            object: object\n          });\n        }\n      }\n\n      if (geometry instanceof THREE.BufferGeometry) {\n        var index = geometry.index;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.array;\n\n        if (index !== null) {\n          var indices = index.array;\n\n          for (var i = 0, il = indices.length; i < il; i++) {\n            var a = indices[i];\n            position.fromArray(positions, a * 3);\n            testPoint(position, a);\n          }\n        } else {\n          for (var i = 0, l = positions.length / 3; i < l; i++) {\n            position.fromArray(positions, i * 3);\n            testPoint(position, i);\n          }\n        }\n      } else {\n        var vertices = geometry.vertices;\n\n        for (var i = 0, l = vertices.length; i < l; i++) {\n          testPoint(vertices[i], i);\n        }\n      }\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor(this.geometry, this.material).copy(this);\n  }\n}); // File:src/objects/Line.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Line = function (geometry, material, mode) {\n  if (mode === 1) {\n    console.warn('THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.');\n    return new THREE.LineSegments(geometry, material);\n  }\n\n  THREE.Object3D.call(this);\n  this.type = 'Line';\n  this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n  this.material = material !== undefined ? material : new THREE.LineBasicMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nTHREE.Line.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Line,\n  raycast: function () {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    return function raycast(raycaster, intersects) {\n      var precision = raycaster.linePrecision;\n      var precisionSq = precision * precision;\n      var geometry = this.geometry;\n      var matrixWorld = this.matrixWorld; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      sphere.copy(geometry.boundingSphere);\n      sphere.applyMatrix4(matrixWorld);\n      if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n      inverseMatrix.getInverse(matrixWorld);\n      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n      var vStart = new THREE.Vector3();\n      var vEnd = new THREE.Vector3();\n      var interSegment = new THREE.Vector3();\n      var interRay = new THREE.Vector3();\n      var step = this instanceof THREE.LineSegments ? 2 : 1;\n\n      if (geometry instanceof THREE.BufferGeometry) {\n        var index = geometry.index;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.array;\n\n        if (index !== null) {\n          var indices = index.array;\n\n          for (var i = 0, l = indices.length - 1; i < l; i += step) {\n            var a = indices[i];\n            var b = indices[i + 1];\n            vStart.fromArray(positions, a * 3);\n            vEnd.fromArray(positions, b * 3);\n            var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n            if (distSq > precisionSq) continue;\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            var distance = raycaster.ray.origin.distanceTo(interRay);\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this\n            });\n          }\n        } else {\n          for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n            vStart.fromArray(positions, 3 * i);\n            vEnd.fromArray(positions, 3 * i + 3);\n            var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n            if (distSq > precisionSq) continue;\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            var distance = raycaster.ray.origin.distanceTo(interRay);\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this\n            });\n          }\n        }\n      } else if (geometry instanceof THREE.Geometry) {\n        var vertices = geometry.vertices;\n        var nbVertices = vertices.length;\n\n        for (var i = 0; i < nbVertices - 1; i += step) {\n          var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);\n          if (distSq > precisionSq) continue;\n          interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n          var distance = raycaster.ray.origin.distanceTo(interRay);\n          if (distance < raycaster.near || distance > raycaster.far) continue;\n          intersects.push({\n            distance: distance,\n            // What do we want? intersection point on the ray or on the segment??\n            // point: raycaster.ray.at( distance ),\n            point: interSegment.clone().applyMatrix4(this.matrixWorld),\n            index: i,\n            face: null,\n            faceIndex: null,\n            object: this\n          });\n        }\n      }\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor(this.geometry, this.material).copy(this);\n  }\n}); // File:src/objects/LineSegments.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.LineSegments = function (geometry, material) {\n  THREE.Line.call(this, geometry, material);\n  this.type = 'LineSegments';\n};\n\nTHREE.LineSegments.prototype = Object.assign(Object.create(THREE.Line.prototype), {\n  constructor: THREE.LineSegments\n}); // File:src/objects/Mesh.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\n\nTHREE.Mesh = function (geometry, material) {\n  THREE.Object3D.call(this);\n  this.type = 'Mesh';\n  this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n  this.material = material !== undefined ? material : new THREE.MeshBasicMaterial({\n    color: Math.random() * 0xffffff\n  });\n  this.drawMode = THREE.TrianglesDrawMode;\n  this.updateMorphTargets();\n};\n\nTHREE.Mesh.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Mesh,\n  setDrawMode: function setDrawMode(value) {\n    this.drawMode = value;\n  },\n  updateMorphTargets: function updateMorphTargets() {\n    if (this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0) {\n      this.morphTargetBase = -1;\n      this.morphTargetInfluences = [];\n      this.morphTargetDictionary = {};\n\n      for (var m = 0, ml = this.geometry.morphTargets.length; m < ml; m++) {\n        this.morphTargetInfluences.push(0);\n        this.morphTargetDictionary[this.geometry.morphTargets[m].name] = m;\n      }\n    }\n  },\n  getMorphTargetIndexByName: function getMorphTargetIndexByName(name) {\n    if (this.morphTargetDictionary[name] !== undefined) {\n      return this.morphTargetDictionary[name];\n    }\n\n    console.warn('THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.');\n    return 0;\n  },\n  raycast: function () {\n    var inverseMatrix = new THREE.Matrix4();\n    var ray = new THREE.Ray();\n    var sphere = new THREE.Sphere();\n    var vA = new THREE.Vector3();\n    var vB = new THREE.Vector3();\n    var vC = new THREE.Vector3();\n    var tempA = new THREE.Vector3();\n    var tempB = new THREE.Vector3();\n    var tempC = new THREE.Vector3();\n    var uvA = new THREE.Vector2();\n    var uvB = new THREE.Vector2();\n    var uvC = new THREE.Vector2();\n    var barycoord = new THREE.Vector3();\n    var intersectionPoint = new THREE.Vector3();\n    var intersectionPointWorld = new THREE.Vector3();\n\n    function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {\n      THREE.Triangle.barycoordFromPoint(point, p1, p2, p3, barycoord);\n      uv1.multiplyScalar(barycoord.x);\n      uv2.multiplyScalar(barycoord.y);\n      uv3.multiplyScalar(barycoord.z);\n      uv1.add(uv2).add(uv3);\n      return uv1.clone();\n    }\n\n    function checkIntersection(object, raycaster, ray, pA, pB, pC, point) {\n      var intersect;\n      var material = object.material;\n\n      if (material.side === THREE.BackSide) {\n        intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n      } else {\n        intersect = ray.intersectTriangle(pA, pB, pC, material.side !== THREE.DoubleSide, point);\n      }\n\n      if (intersect === null) return null;\n      intersectionPointWorld.copy(point);\n      intersectionPointWorld.applyMatrix4(object.matrixWorld);\n      var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n      if (distance < raycaster.near || distance > raycaster.far) return null;\n      return {\n        distance: distance,\n        point: intersectionPointWorld.clone(),\n        object: object\n      };\n    }\n\n    function checkBufferGeometryIntersection(object, raycaster, ray, positions, uvs, a, b, c) {\n      vA.fromArray(positions, a * 3);\n      vB.fromArray(positions, b * 3);\n      vC.fromArray(positions, c * 3);\n      var intersection = checkIntersection(object, raycaster, ray, vA, vB, vC, intersectionPoint);\n\n      if (intersection) {\n        if (uvs) {\n          uvA.fromArray(uvs, a * 2);\n          uvB.fromArray(uvs, b * 2);\n          uvC.fromArray(uvs, c * 2);\n          intersection.uv = uvIntersection(intersectionPoint, vA, vB, vC, uvA, uvB, uvC);\n        }\n\n        intersection.face = new THREE.Face3(a, b, c, THREE.Triangle.normal(vA, vB, vC));\n        intersection.faceIndex = a;\n      }\n\n      return intersection;\n    }\n\n    return function raycast(raycaster, intersects) {\n      var geometry = this.geometry;\n      var material = this.material;\n      var matrixWorld = this.matrixWorld;\n      if (material === undefined) return; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n      sphere.copy(geometry.boundingSphere);\n      sphere.applyMatrix4(matrixWorld);\n      if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n      inverseMatrix.getInverse(matrixWorld);\n      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix); // Check boundingBox before continuing\n\n      if (geometry.boundingBox !== null) {\n        if (ray.intersectsBox(geometry.boundingBox) === false) return;\n      }\n\n      var uvs, intersection;\n\n      if (geometry instanceof THREE.BufferGeometry) {\n        var a, b, c;\n        var index = geometry.index;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.array;\n\n        if (attributes.uv !== undefined) {\n          uvs = attributes.uv.array;\n        }\n\n        if (index !== null) {\n          var indices = index.array;\n\n          for (var i = 0, l = indices.length; i < l; i += 3) {\n            a = indices[i];\n            b = indices[i + 1];\n            c = indices[i + 2];\n            intersection = checkBufferGeometryIntersection(this, raycaster, ray, positions, uvs, a, b, c);\n\n            if (intersection) {\n              intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        } else {\n          for (var i = 0, l = positions.length; i < l; i += 9) {\n            a = i / 3;\n            b = a + 1;\n            c = a + 2;\n            intersection = checkBufferGeometryIntersection(this, raycaster, ray, positions, uvs, a, b, c);\n\n            if (intersection) {\n              intersection.index = a; // triangle number in positions buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else if (geometry instanceof THREE.Geometry) {\n        var fvA, fvB, fvC;\n        var isFaceMaterial = material instanceof THREE.MultiMaterial;\n        var materials = isFaceMaterial === true ? material.materials : null;\n        var vertices = geometry.vertices;\n        var faces = geometry.faces;\n        var faceVertexUvs = geometry.faceVertexUvs[0];\n        if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n        for (var f = 0, fl = faces.length; f < fl; f++) {\n          var face = faces[f];\n          var faceMaterial = isFaceMaterial === true ? materials[face.materialIndex] : material;\n          if (faceMaterial === undefined) continue;\n          fvA = vertices[face.a];\n          fvB = vertices[face.b];\n          fvC = vertices[face.c];\n\n          if (faceMaterial.morphTargets === true) {\n            var morphTargets = geometry.morphTargets;\n            var morphInfluences = this.morphTargetInfluences;\n            vA.set(0, 0, 0);\n            vB.set(0, 0, 0);\n            vC.set(0, 0, 0);\n\n            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n              var influence = morphInfluences[t];\n              if (influence === 0) continue;\n              var targets = morphTargets[t].vertices;\n              vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);\n              vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);\n              vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence);\n            }\n\n            vA.add(fvA);\n            vB.add(fvB);\n            vC.add(fvC);\n            fvA = vA;\n            fvB = vB;\n            fvC = vC;\n          }\n\n          intersection = checkIntersection(this, raycaster, ray, fvA, fvB, fvC, intersectionPoint);\n\n          if (intersection) {\n            if (uvs) {\n              var uvs_f = uvs[f];\n              uvA.copy(uvs_f[0]);\n              uvB.copy(uvs_f[1]);\n              uvC.copy(uvs_f[2]);\n              intersection.uv = uvIntersection(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC);\n            }\n\n            intersection.face = face;\n            intersection.faceIndex = f;\n            intersects.push(intersection);\n          }\n        }\n      }\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor(this.geometry, this.material).copy(this);\n  }\n}); // File:src/objects/Bone.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\n\nTHREE.Bone = function (skin) {\n  THREE.Object3D.call(this);\n  this.type = 'Bone';\n  this.skin = skin;\n};\n\nTHREE.Bone.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Bone,\n  copy: function copy(source) {\n    THREE.Object3D.prototype.copy.call(this, source);\n    this.skin = source.skin;\n    return this;\n  }\n}); // File:src/objects/Skeleton.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author michael guerrero / http://realitymeltdown.com\r\n * @author ikerr / http://verold.com\r\n */\n\nTHREE.Skeleton = function (bones, boneInverses, useVertexTexture) {\n  this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n  this.identityMatrix = new THREE.Matrix4(); // copy the bone array\n\n  bones = bones || [];\n  this.bones = bones.slice(0); // create a bone texture or an array of floats\n\n  if (this.useVertexTexture) {\n    // layout (1 matrix = 4 pixels)\n    //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n    //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n    //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n    //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n    //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n    var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n    size = THREE.Math.nextPowerOfTwo(Math.ceil(size));\n    size = Math.max(size, 4);\n    this.boneTextureWidth = size;\n    this.boneTextureHeight = size;\n    this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4); // 4 floats per RGBA pixel\n\n    this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType);\n  } else {\n    this.boneMatrices = new Float32Array(16 * this.bones.length);\n  } // use the supplied bone inverses or calculate the inverses\n\n\n  if (boneInverses === undefined) {\n    this.calculateInverses();\n  } else {\n    if (this.bones.length === boneInverses.length) {\n      this.boneInverses = boneInverses.slice(0);\n    } else {\n      console.warn('THREE.Skeleton bonInverses is the wrong length.');\n      this.boneInverses = [];\n\n      for (var b = 0, bl = this.bones.length; b < bl; b++) {\n        this.boneInverses.push(new THREE.Matrix4());\n      }\n    }\n  }\n};\n\nObject.assign(THREE.Skeleton.prototype, {\n  calculateInverses: function calculateInverses() {\n    this.boneInverses = [];\n\n    for (var b = 0, bl = this.bones.length; b < bl; b++) {\n      var inverse = new THREE.Matrix4();\n\n      if (this.bones[b]) {\n        inverse.getInverse(this.bones[b].matrixWorld);\n      }\n\n      this.boneInverses.push(inverse);\n    }\n  },\n  pose: function pose() {\n    var bone; // recover the bind-time world matrices\n\n    for (var b = 0, bl = this.bones.length; b < bl; b++) {\n      bone = this.bones[b];\n\n      if (bone) {\n        bone.matrixWorld.getInverse(this.boneInverses[b]);\n      }\n    } // compute the local matrices, positions, rotations and scales\n\n\n    for (var b = 0, bl = this.bones.length; b < bl; b++) {\n      bone = this.bones[b];\n\n      if (bone) {\n        if (bone.parent) {\n          bone.matrix.getInverse(bone.parent.matrixWorld);\n          bone.matrix.multiply(bone.matrixWorld);\n        } else {\n          bone.matrix.copy(bone.matrixWorld);\n        }\n\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n      }\n    }\n  },\n  update: function () {\n    var offsetMatrix = new THREE.Matrix4();\n    return function update() {\n      // flatten bone matrices to array\n      for (var b = 0, bl = this.bones.length; b < bl; b++) {\n        // compute the offset between the current and the original transform\n        var matrix = this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix;\n        offsetMatrix.multiplyMatrices(matrix, this.boneInverses[b]);\n        offsetMatrix.toArray(this.boneMatrices, b * 16);\n      }\n\n      if (this.useVertexTexture) {\n        this.boneTexture.needsUpdate = true;\n      }\n    };\n  }(),\n  clone: function clone() {\n    return new THREE.Skeleton(this.bones, this.boneInverses, this.useVertexTexture);\n  }\n}); // File:src/objects/SkinnedMesh.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\n\nTHREE.SkinnedMesh = function (geometry, material, useVertexTexture) {\n  THREE.Mesh.call(this, geometry, material);\n  this.type = 'SkinnedMesh';\n  this.bindMode = \"attached\";\n  this.bindMatrix = new THREE.Matrix4();\n  this.bindMatrixInverse = new THREE.Matrix4(); // init bones\n  // TODO: remove bone creation as there is no reason (other than\n  // convenience) for THREE.SkinnedMesh to do this.\n\n  var bones = [];\n\n  if (this.geometry && this.geometry.bones !== undefined) {\n    var bone, gbone;\n\n    for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {\n      gbone = this.geometry.bones[b];\n      bone = new THREE.Bone(this);\n      bones.push(bone);\n      bone.name = gbone.name;\n      bone.position.fromArray(gbone.pos);\n      bone.quaternion.fromArray(gbone.rotq);\n      if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n    }\n\n    for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {\n      gbone = this.geometry.bones[b];\n\n      if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n        bones[gbone.parent].add(bones[b]);\n      } else {\n        this.add(bones[b]);\n      }\n    }\n  }\n\n  this.normalizeSkinWeights();\n  this.updateMatrixWorld(true);\n  this.bind(new THREE.Skeleton(bones, undefined, useVertexTexture), this.matrixWorld);\n};\n\nTHREE.SkinnedMesh.prototype = Object.assign(Object.create(THREE.Mesh.prototype), {\n  constructor: THREE.SkinnedMesh,\n  bind: function bind(skeleton, bindMatrix) {\n    this.skeleton = skeleton;\n\n    if (bindMatrix === undefined) {\n      this.updateMatrixWorld(true);\n      this.skeleton.calculateInverses();\n      bindMatrix = this.matrixWorld;\n    }\n\n    this.bindMatrix.copy(bindMatrix);\n    this.bindMatrixInverse.getInverse(bindMatrix);\n  },\n  pose: function pose() {\n    this.skeleton.pose();\n  },\n  normalizeSkinWeights: function normalizeSkinWeights() {\n    if (this.geometry instanceof THREE.Geometry) {\n      for (var i = 0; i < this.geometry.skinWeights.length; i++) {\n        var sw = this.geometry.skinWeights[i];\n        var scale = 1.0 / sw.lengthManhattan();\n\n        if (scale !== Infinity) {\n          sw.multiplyScalar(scale);\n        } else {\n          sw.set(1, 0, 0, 0); // do something reasonable\n        }\n      }\n    } else if (this.geometry instanceof THREE.BufferGeometry) {\n      var vec = new THREE.Vector4();\n      var skinWeight = this.geometry.attributes.skinWeight;\n\n      for (var i = 0; i < skinWeight.count; i++) {\n        vec.x = skinWeight.getX(i);\n        vec.y = skinWeight.getY(i);\n        vec.z = skinWeight.getZ(i);\n        vec.w = skinWeight.getW(i);\n        var scale = 1.0 / vec.lengthManhattan();\n\n        if (scale !== Infinity) {\n          vec.multiplyScalar(scale);\n        } else {\n          vec.set(1, 0, 0, 0); // do something reasonable\n        }\n\n        skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w);\n      }\n    }\n  },\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    THREE.Mesh.prototype.updateMatrixWorld.call(this, true);\n\n    if (this.bindMode === \"attached\") {\n      this.bindMatrixInverse.getInverse(this.matrixWorld);\n    } else if (this.bindMode === \"detached\") {\n      this.bindMatrixInverse.getInverse(this.bindMatrix);\n    } else {\n      console.warn('THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode);\n    }\n  },\n  clone: function clone() {\n    return new this.constructor(this.geometry, this.material, this.useVertexTexture).copy(this);\n  }\n}); // File:src/objects/LOD.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.LOD = function () {\n  THREE.Object3D.call(this);\n  this.type = 'LOD';\n  Object.defineProperties(this, {\n    levels: {\n      enumerable: true,\n      value: []\n    }\n  });\n};\n\nTHREE.LOD.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.LOD,\n  copy: function copy(source) {\n    THREE.Object3D.prototype.copy.call(this, source, false);\n    var levels = source.levels;\n\n    for (var i = 0, l = levels.length; i < l; i++) {\n      var level = levels[i];\n      this.addLevel(level.object.clone(), level.distance);\n    }\n\n    return this;\n  },\n  addLevel: function addLevel(object, distance) {\n    if (distance === undefined) distance = 0;\n    distance = Math.abs(distance);\n    var levels = this.levels;\n\n    for (var l = 0; l < levels.length; l++) {\n      if (distance < levels[l].distance) {\n        break;\n      }\n    }\n\n    levels.splice(l, 0, {\n      distance: distance,\n      object: object\n    });\n    this.add(object);\n  },\n  getObjectForDistance: function getObjectForDistance(distance) {\n    var levels = this.levels;\n\n    for (var i = 1, l = levels.length; i < l; i++) {\n      if (distance < levels[i].distance) {\n        break;\n      }\n    }\n\n    return levels[i - 1].object;\n  },\n  raycast: function () {\n    var matrixPosition = new THREE.Vector3();\n    return function raycast(raycaster, intersects) {\n      matrixPosition.setFromMatrixPosition(this.matrixWorld);\n      var distance = raycaster.ray.origin.distanceTo(matrixPosition);\n      this.getObjectForDistance(distance).raycast(raycaster, intersects);\n    };\n  }(),\n  update: function () {\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    return function update(camera) {\n      var levels = this.levels;\n\n      if (levels.length > 1) {\n        v1.setFromMatrixPosition(camera.matrixWorld);\n        v2.setFromMatrixPosition(this.matrixWorld);\n        var distance = v1.distanceTo(v2);\n        levels[0].object.visible = true;\n\n        for (var i = 1, l = levels.length; i < l; i++) {\n          if (distance >= levels[i].distance) {\n            levels[i - 1].object.visible = false;\n            levels[i].object.visible = true;\n          } else {\n            break;\n          }\n        }\n\n        for (; i < l; i++) {\n          levels[i].object.visible = false;\n        }\n      }\n    };\n  }(),\n  toJSON: function toJSON(meta) {\n    var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n    data.object.levels = [];\n    var levels = this.levels;\n\n    for (var i = 0, l = levels.length; i < l; i++) {\n      var level = levels[i];\n      data.object.levels.push({\n        object: level.object.uuid,\n        distance: level.distance\n      });\n    }\n\n    return data;\n  }\n}); // File:src/objects/Sprite.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.Sprite = function (material) {\n  THREE.Object3D.call(this);\n  this.type = 'Sprite';\n  this.material = material !== undefined ? material : new THREE.SpriteMaterial();\n};\n\nTHREE.Sprite.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.Sprite,\n  raycast: function () {\n    var matrixPosition = new THREE.Vector3();\n    return function raycast(raycaster, intersects) {\n      matrixPosition.setFromMatrixPosition(this.matrixWorld);\n      var distanceSq = raycaster.ray.distanceSqToPoint(matrixPosition);\n      var guessSizeSq = this.scale.x * this.scale.y / 4;\n\n      if (distanceSq > guessSizeSq) {\n        return;\n      }\n\n      intersects.push({\n        distance: Math.sqrt(distanceSq),\n        point: this.position,\n        face: null,\n        object: this\n      });\n    };\n  }(),\n  clone: function clone() {\n    return new this.constructor(this.material).copy(this);\n  }\n}); // File:src/objects/LensFlare.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.LensFlare = function (texture, size, distance, blending, color) {\n  THREE.Object3D.call(this);\n  this.lensFlares = [];\n  this.positionScreen = new THREE.Vector3();\n  this.customUpdateCallback = undefined;\n\n  if (texture !== undefined) {\n    this.add(texture, size, distance, blending, color);\n  }\n};\n\nTHREE.LensFlare.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n  constructor: THREE.LensFlare,\n  copy: function copy(source) {\n    THREE.Object3D.prototype.copy.call(this, source);\n    this.positionScreen.copy(source.positionScreen);\n    this.customUpdateCallback = source.customUpdateCallback;\n\n    for (var i = 0, l = source.lensFlares.length; i < l; i++) {\n      this.lensFlares.push(source.lensFlares[i]);\n    }\n\n    return this;\n  },\n  add: function add(texture, size, distance, blending, color, opacity) {\n    if (size === undefined) size = -1;\n    if (distance === undefined) distance = 0;\n    if (opacity === undefined) opacity = 1;\n    if (color === undefined) color = new THREE.Color(0xffffff);\n    if (blending === undefined) blending = THREE.NormalBlending;\n    distance = Math.min(distance, Math.max(0, distance));\n    this.lensFlares.push({\n      texture: texture,\n      // THREE.Texture\n      size: size,\n      // size in pixels (-1 = use texture.width)\n      distance: distance,\n      // distance (0-1) from light source (0=at light source)\n      x: 0,\n      y: 0,\n      z: 0,\n      // screen position (-1 => 1) z = 0 is in front z = 1 is back\n      scale: 1,\n      // scale\n      rotation: 0,\n      // rotation\n      opacity: opacity,\n      // opacity\n      color: color,\n      // color\n      blending: blending // blending\n\n    });\n  },\n\n  /*\r\n   * Update lens flares update positions on all flares based on the screen position\r\n   * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n   */\n  updateLensFlares: function updateLensFlares() {\n    var f,\n        fl = this.lensFlares.length;\n    var flare;\n    var vecX = -this.positionScreen.x * 2;\n    var vecY = -this.positionScreen.y * 2;\n\n    for (f = 0; f < fl; f++) {\n      flare = this.lensFlares[f];\n      flare.x = this.positionScreen.x + vecX * flare.distance;\n      flare.y = this.positionScreen.y + vecY * flare.distance;\n      flare.wantedRotation = flare.x * Math.PI * 0.25;\n      flare.rotation += (flare.wantedRotation - flare.rotation) * 0.25;\n    }\n  }\n}); // File:src/scenes/Scene.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Scene = function () {\n  THREE.Object3D.call(this);\n  this.type = 'Scene';\n  this.fog = null;\n  this.overrideMaterial = null;\n  this.autoUpdate = true; // checked by the renderer\n};\n\nTHREE.Scene.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function (source, recursive) {\n  THREE.Object3D.prototype.copy.call(this, source, recursive);\n  if (source.fog !== null) this.fog = source.fog.clone();\n  if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n  this.autoUpdate = source.autoUpdate;\n  this.matrixAutoUpdate = source.matrixAutoUpdate;\n  return this;\n}; // File:src/scenes/Fog.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n\nTHREE.Fog = function (color, near, far) {\n  this.name = '';\n  this.color = new THREE.Color(color);\n  this.near = near !== undefined ? near : 1;\n  this.far = far !== undefined ? far : 1000;\n};\n\nTHREE.Fog.prototype.clone = function () {\n  return new THREE.Fog(this.color.getHex(), this.near, this.far);\n}; // File:src/scenes/FogExp2.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n\nTHREE.FogExp2 = function (color, density) {\n  this.name = '';\n  this.color = new THREE.Color(color);\n  this.density = density !== undefined ? density : 0.00025;\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n  return new THREE.FogExp2(this.color.getHex(), this.density);\n}; // File:src/renderers/shaders/ShaderChunk.js\n\n\nTHREE.ShaderChunk = {}; // File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk['alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk['alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk['alphatest_fragment'] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk['aomap_fragment'] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk['aomap_pars_fragment'] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk['begin_vertex'] = \"\\nvec3 transformed = vec3( position );\\n\"; // File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk['beginnormal_vertex'] = \"\\nvec3 objectNormal = vec3( normal );\\n\"; // File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\nTHREE.ShaderChunk['bsdfs'] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\nTHREE.ShaderChunk['clipping_planes_fragment'] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\nTHREE.ShaderChunk['clipping_planes_pars_fragment'] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\nTHREE.ShaderChunk['clipping_planes_pars_vertex'] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\nTHREE.ShaderChunk['clipping_planes_vertex'] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk['color_fragment'] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk['color_pars_fragment'] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk['color_pars_vertex'] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk['color_vertex'] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk['common'] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\nTHREE.ShaderChunk['cube_uv_reflection_fragment'] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk['defaultnormal_vertex'] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\"; // File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk['displacementmap_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk['displacementmap_pars_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk['emissivemap_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk['emissivemap_pars_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\nTHREE.ShaderChunk['encodings_pars_fragment'] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\nTHREE.ShaderChunk['encodings_fragment'] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk['envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['envmap_pars_fragment'] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk['envmap_pars_vertex'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk['envmap_vertex'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk['fog_fragment'] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk['fog_pars_fragment'] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk['lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk['lights_lambert_vertex'] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\nTHREE.ShaderChunk['lights_pars'] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk['lights_phong_fragment'] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk['lights_phong_pars_fragment'] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\nTHREE.ShaderChunk['lights_physical_fragment'] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\nTHREE.ShaderChunk['lights_physical_pars_fragment'] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t#endif\\n};\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\nTHREE.ShaderChunk['lights_template'] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk['logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk['logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk['logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk['logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk['map_fragment'] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk['map_pars_fragment'] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk['map_particle_fragment'] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk['map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\nTHREE.ShaderChunk['metalnessmap_fragment'] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['metalnessmap_pars_fragment'] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk['morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk['morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk['morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\nTHREE.ShaderChunk['normal_fragment'] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal );\\n\t#ifdef DOUBLE_SIDED\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/packing.glsl\n\nTHREE.ShaderChunk['packing'] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\nTHREE.ShaderChunk['premultiplied_alpha_fragment'] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk['project_vertex'] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\"; // File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\nTHREE.ShaderChunk['roughnessmap_fragment'] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['roughnessmap_pars_fragment'] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk['shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk['shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\nTHREE.ShaderChunk['shadowmask_pars_fragment'] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk['skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk['skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk['skinning_vertex'] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk['skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk['specularmap_fragment'] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk['specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\nTHREE.ShaderChunk['tonemapping_fragment'] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\nTHREE.ShaderChunk['tonemapping_pars_fragment'] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk['uv2_pars_fragment'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk['uv2_pars_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk['uv2_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk['uv_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk['uv_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk['uv_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk['worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/UniformsUtils.js\n\n/**\r\n * Uniform Utilities\r\n */\n\nTHREE.UniformsUtils = {\n  merge: function merge(uniforms) {\n    var merged = {};\n\n    for (var u = 0; u < uniforms.length; u++) {\n      var tmp = this.clone(uniforms[u]);\n\n      for (var p in tmp) {\n        merged[p] = tmp[p];\n      }\n    }\n\n    return merged;\n  },\n  clone: function clone(uniforms_src) {\n    var uniforms_dst = {};\n\n    for (var u in uniforms_src) {\n      uniforms_dst[u] = {};\n\n      for (var p in uniforms_src[u]) {\n        var parameter_src = uniforms_src[u][p];\n\n        if (parameter_src instanceof THREE.Color || parameter_src instanceof THREE.Vector2 || parameter_src instanceof THREE.Vector3 || parameter_src instanceof THREE.Vector4 || parameter_src instanceof THREE.Matrix3 || parameter_src instanceof THREE.Matrix4 || parameter_src instanceof THREE.Texture) {\n          uniforms_dst[u][p] = parameter_src.clone();\n        } else if (Array.isArray(parameter_src)) {\n          uniforms_dst[u][p] = parameter_src.slice();\n        } else {\n          uniforms_dst[u][p] = parameter_src;\n        }\n      }\n    }\n\n    return uniforms_dst;\n  }\n}; // File:src/renderers/shaders/UniformsLib.js\n\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\n\nTHREE.UniformsLib = {\n  common: {\n    \"diffuse\": {\n      type: \"c\",\n      value: new THREE.Color(0xeeeeee)\n    },\n    \"opacity\": {\n      type: \"1f\",\n      value: 1.0\n    },\n    \"map\": {\n      type: \"t\",\n      value: null\n    },\n    \"offsetRepeat\": {\n      type: \"v4\",\n      value: new THREE.Vector4(0, 0, 1, 1)\n    },\n    \"specularMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"alphaMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"envMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"flipEnvMap\": {\n      type: \"1f\",\n      value: -1\n    },\n    \"reflectivity\": {\n      type: \"1f\",\n      value: 1.0\n    },\n    \"refractionRatio\": {\n      type: \"1f\",\n      value: 0.98\n    }\n  },\n  aomap: {\n    \"aoMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"aoMapIntensity\": {\n      type: \"1f\",\n      value: 1\n    }\n  },\n  lightmap: {\n    \"lightMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"lightMapIntensity\": {\n      type: \"1f\",\n      value: 1\n    }\n  },\n  emissivemap: {\n    \"emissiveMap\": {\n      type: \"t\",\n      value: null\n    }\n  },\n  bumpmap: {\n    \"bumpMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"bumpScale\": {\n      type: \"1f\",\n      value: 1\n    }\n  },\n  normalmap: {\n    \"normalMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"normalScale\": {\n      type: \"v2\",\n      value: new THREE.Vector2(1, 1)\n    }\n  },\n  displacementmap: {\n    \"displacementMap\": {\n      type: \"t\",\n      value: null\n    },\n    \"displacementScale\": {\n      type: \"1f\",\n      value: 1\n    },\n    \"displacementBias\": {\n      type: \"1f\",\n      value: 0\n    }\n  },\n  roughnessmap: {\n    \"roughnessMap\": {\n      type: \"t\",\n      value: null\n    }\n  },\n  metalnessmap: {\n    \"metalnessMap\": {\n      type: \"t\",\n      value: null\n    }\n  },\n  fog: {\n    \"fogDensity\": {\n      type: \"1f\",\n      value: 0.00025\n    },\n    \"fogNear\": {\n      type: \"1f\",\n      value: 1\n    },\n    \"fogFar\": {\n      type: \"1f\",\n      value: 2000\n    },\n    \"fogColor\": {\n      type: \"c\",\n      value: new THREE.Color(0xffffff)\n    }\n  },\n  lights: {\n    \"ambientLightColor\": {\n      type: \"3fv\",\n      value: []\n    },\n    \"directionalLights\": {\n      type: \"sa\",\n      value: [],\n      properties: {\n        \"direction\": {\n          type: \"v3\"\n        },\n        \"color\": {\n          type: \"c\"\n        },\n        \"shadow\": {\n          type: \"1i\"\n        },\n        \"shadowBias\": {\n          type: \"1f\"\n        },\n        \"shadowRadius\": {\n          type: \"1f\"\n        },\n        \"shadowMapSize\": {\n          type: \"v2\"\n        }\n      }\n    },\n    \"directionalShadowMap\": {\n      type: \"tv\",\n      value: []\n    },\n    \"directionalShadowMatrix\": {\n      type: \"m4v\",\n      value: []\n    },\n    \"spotLights\": {\n      type: \"sa\",\n      value: [],\n      properties: {\n        \"color\": {\n          type: \"c\"\n        },\n        \"position\": {\n          type: \"v3\"\n        },\n        \"direction\": {\n          type: \"v3\"\n        },\n        \"distance\": {\n          type: \"1f\"\n        },\n        \"coneCos\": {\n          type: \"1f\"\n        },\n        \"penumbraCos\": {\n          type: \"1f\"\n        },\n        \"decay\": {\n          type: \"1f\"\n        },\n        \"shadow\": {\n          type: \"1i\"\n        },\n        \"shadowBias\": {\n          type: \"1f\"\n        },\n        \"shadowRadius\": {\n          type: \"1f\"\n        },\n        \"shadowMapSize\": {\n          type: \"v2\"\n        }\n      }\n    },\n    \"spotShadowMap\": {\n      type: \"tv\",\n      value: []\n    },\n    \"spotShadowMatrix\": {\n      type: \"m4v\",\n      value: []\n    },\n    \"pointLights\": {\n      type: \"sa\",\n      value: [],\n      properties: {\n        \"color\": {\n          type: \"c\"\n        },\n        \"position\": {\n          type: \"v3\"\n        },\n        \"decay\": {\n          type: \"1f\"\n        },\n        \"distance\": {\n          type: \"1f\"\n        },\n        \"shadow\": {\n          type: \"1i\"\n        },\n        \"shadowBias\": {\n          type: \"1f\"\n        },\n        \"shadowRadius\": {\n          type: \"1f\"\n        },\n        \"shadowMapSize\": {\n          type: \"v2\"\n        }\n      }\n    },\n    \"pointShadowMap\": {\n      type: \"tv\",\n      value: []\n    },\n    \"pointShadowMatrix\": {\n      type: \"m4v\",\n      value: []\n    },\n    \"hemisphereLights\": {\n      type: \"sa\",\n      value: [],\n      properties: {\n        \"direction\": {\n          type: \"v3\"\n        },\n        \"skyColor\": {\n          type: \"c\"\n        },\n        \"groundColor\": {\n          type: \"c\"\n        }\n      }\n    }\n  },\n  points: {\n    \"diffuse\": {\n      type: \"c\",\n      value: new THREE.Color(0xeeeeee)\n    },\n    \"opacity\": {\n      type: \"1f\",\n      value: 1.0\n    },\n    \"size\": {\n      type: \"1f\",\n      value: 1.0\n    },\n    \"scale\": {\n      type: \"1f\",\n      value: 1.0\n    },\n    \"map\": {\n      type: \"t\",\n      value: null\n    },\n    \"offsetRepeat\": {\n      type: \"v4\",\n      value: new THREE.Vector4(0, 0, 1, 1)\n    }\n  }\n}; // File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\nTHREE.ShaderChunk['cube_frag'] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\nTHREE.ShaderChunk['cube_vert'] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\nTHREE.ShaderChunk['depth_frag'] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\nTHREE.ShaderChunk['depth_vert'] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\nTHREE.ShaderChunk['distanceRGBA_frag'] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\nTHREE.ShaderChunk['distanceRGBA_vert'] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\nTHREE.ShaderChunk['equirect_frag'] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\nTHREE.ShaderChunk['equirect_vert'] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\nTHREE.ShaderChunk['linedashed_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\nTHREE.ShaderChunk['linedashed_vert'] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\nTHREE.ShaderChunk['meshbasic_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\nTHREE.ShaderChunk['meshbasic_vert'] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\nTHREE.ShaderChunk['meshlambert_frag'] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\nTHREE.ShaderChunk['meshlambert_vert'] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\nTHREE.ShaderChunk['meshphong_frag'] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\nTHREE.ShaderChunk['meshphong_vert'] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\nTHREE.ShaderChunk['meshphysical_frag'] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\nTHREE.ShaderChunk['meshphysical_vert'] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\nTHREE.ShaderChunk['normal_frag'] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\nTHREE.ShaderChunk['normal_vert'] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\nTHREE.ShaderChunk['points_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\nTHREE.ShaderChunk['points_vert'] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\nTHREE.ShaderChunk['shadow_frag'] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\nTHREE.ShaderChunk['shadow_vert'] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib.js\n\n/**\r\n * Webgl Shader Library for three.js\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\n\nTHREE.ShaderLib = {\n  'basic': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['fog']]),\n    vertexShader: THREE.ShaderChunk['meshbasic_vert'],\n    fragmentShader: THREE.ShaderChunk['meshbasic_frag']\n  },\n  'lambert': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n      \"emissive\": {\n        type: \"c\",\n        value: new THREE.Color(0x000000)\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['meshlambert_vert'],\n    fragmentShader: THREE.ShaderChunk['meshlambert_frag']\n  },\n  'phong': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['bumpmap'], THREE.UniformsLib['normalmap'], THREE.UniformsLib['displacementmap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n      \"emissive\": {\n        type: \"c\",\n        value: new THREE.Color(0x000000)\n      },\n      \"specular\": {\n        type: \"c\",\n        value: new THREE.Color(0x111111)\n      },\n      \"shininess\": {\n        type: \"1f\",\n        value: 30\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['meshphong_vert'],\n    fragmentShader: THREE.ShaderChunk['meshphong_frag']\n  },\n  'standard': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['bumpmap'], THREE.UniformsLib['normalmap'], THREE.UniformsLib['displacementmap'], THREE.UniformsLib['roughnessmap'], THREE.UniformsLib['metalnessmap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n      \"emissive\": {\n        type: \"c\",\n        value: new THREE.Color(0x000000)\n      },\n      \"roughness\": {\n        type: \"1f\",\n        value: 0.5\n      },\n      \"metalness\": {\n        type: \"1f\",\n        value: 0\n      },\n      \"envMapIntensity\": {\n        type: \"1f\",\n        value: 1 // temporary\n\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['meshphysical_vert'],\n    fragmentShader: THREE.ShaderChunk['meshphysical_frag']\n  },\n  'points': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['points'], THREE.UniformsLib['fog']]),\n    vertexShader: THREE.ShaderChunk['points_vert'],\n    fragmentShader: THREE.ShaderChunk['points_frag']\n  },\n  'dashed': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['fog'], {\n      \"scale\": {\n        type: \"1f\",\n        value: 1\n      },\n      \"dashSize\": {\n        type: \"1f\",\n        value: 1\n      },\n      \"totalSize\": {\n        type: \"1f\",\n        value: 2\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['linedashed_vert'],\n    fragmentShader: THREE.ShaderChunk['linedashed_frag']\n  },\n  'depth': {\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['displacementmap']]),\n    vertexShader: THREE.ShaderChunk['depth_vert'],\n    fragmentShader: THREE.ShaderChunk['depth_frag']\n  },\n  'normal': {\n    uniforms: {\n      \"opacity\": {\n        type: \"1f\",\n        value: 1.0\n      }\n    },\n    vertexShader: THREE.ShaderChunk['normal_vert'],\n    fragmentShader: THREE.ShaderChunk['normal_frag']\n  },\n\n  /* -------------------------------------------------------------------------\r\n  //\tCube map shader\r\n   ------------------------------------------------------------------------- */\n  'cube': {\n    uniforms: {\n      \"tCube\": {\n        type: \"t\",\n        value: null\n      },\n      \"tFlip\": {\n        type: \"1f\",\n        value: -1\n      }\n    },\n    vertexShader: THREE.ShaderChunk['cube_vert'],\n    fragmentShader: THREE.ShaderChunk['cube_frag']\n  },\n\n  /* -------------------------------------------------------------------------\r\n  //\tCube map shader\r\n   ------------------------------------------------------------------------- */\n  'equirect': {\n    uniforms: {\n      \"tEquirect\": {\n        type: \"t\",\n        value: null\n      },\n      \"tFlip\": {\n        type: \"1f\",\n        value: -1\n      }\n    },\n    vertexShader: THREE.ShaderChunk['equirect_vert'],\n    fragmentShader: THREE.ShaderChunk['equirect_frag']\n  },\n  'distanceRGBA': {\n    uniforms: {\n      \"lightPos\": {\n        type: \"v3\",\n        value: new THREE.Vector3()\n      }\n    },\n    vertexShader: THREE.ShaderChunk['distanceRGBA_vert'],\n    fragmentShader: THREE.ShaderChunk['distanceRGBA_frag']\n  }\n};\nTHREE.ShaderLib['physical'] = {\n  uniforms: THREE.UniformsUtils.merge([THREE.ShaderLib['standard'].uniforms, {// future\n  }]),\n  vertexShader: THREE.ShaderChunk['meshphysical_vert'],\n  fragmentShader: THREE.ShaderChunk['meshphysical_frag']\n}; // File:src/renderers/WebGLRenderer.js\n\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n * @author tschw\r\n */\n\nTHREE.WebGLRenderer = function (parameters) {\n  console.log('THREE.WebGLRenderer', THREE.REVISION);\n  parameters = parameters || {};\n\n  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement('canvas'),\n      _context = parameters.context !== undefined ? parameters.context : null,\n      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n      _depth = parameters.depth !== undefined ? parameters.depth : true,\n      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n      _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n      _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n  var lights = [];\n  var opaqueObjects = [];\n  var opaqueObjectsLastIndex = -1;\n  var transparentObjects = [];\n  var transparentObjectsLastIndex = -1;\n  var morphInfluences = new Float32Array(8);\n  var sprites = [];\n  var lensFlares = []; // public properties\n\n  this.domElement = _canvas;\n  this.context = null; // clearing\n\n  this.autoClear = true;\n  this.autoClearColor = true;\n  this.autoClearDepth = true;\n  this.autoClearStencil = true; // scene graph\n\n  this.sortObjects = true; // user-defined clipping\n\n  this.clippingPlanes = [];\n  this.localClippingEnabled = false; // physically based shading\n\n  this.gammaFactor = 2.0; // for backwards compatibility\n\n  this.gammaInput = false;\n  this.gammaOutput = false; // physical lights\n\n  this.physicallyCorrectLights = false; // tone mapping\n\n  this.toneMapping = THREE.LinearToneMapping;\n  this.toneMappingExposure = 1.0;\n  this.toneMappingWhitePoint = 1.0; // morphs\n\n  this.maxMorphTargets = 8;\n  this.maxMorphNormals = 4; // flags\n\n  this.autoScaleCubemaps = true; // internal properties\n\n  var _this = this,\n      // internal state cache\n  _currentProgram = null,\n      _currentRenderTarget = null,\n      _currentFramebuffer = null,\n      _currentMaterialId = -1,\n      _currentGeometryProgram = '',\n      _currentCamera = null,\n      _currentScissor = new THREE.Vector4(),\n      _currentScissorTest = null,\n      _currentViewport = new THREE.Vector4(),\n      //\n  _usedTextureUnits = 0,\n      //\n  _clearColor = new THREE.Color(0x000000),\n      _clearAlpha = 0,\n      _width = _canvas.width,\n      _height = _canvas.height,\n      _pixelRatio = 1,\n      _scissor = new THREE.Vector4(0, 0, _width, _height),\n      _scissorTest = false,\n      _viewport = new THREE.Vector4(0, 0, _width, _height),\n      // frustum\n  _frustum = new THREE.Frustum(),\n      // clipping\n  _clipping = new THREE.WebGLClipping(),\n      _clippingEnabled = false,\n      _localClippingEnabled = false,\n      _sphere = new THREE.Sphere(),\n      // camera matrices cache\n  _projScreenMatrix = new THREE.Matrix4(),\n      _vector3 = new THREE.Vector3(),\n      // light arrays cache\n  _lights = {\n    hash: '',\n    ambient: [0, 0, 0],\n    directional: [],\n    directionalShadowMap: [],\n    directionalShadowMatrix: [],\n    spot: [],\n    spotShadowMap: [],\n    spotShadowMatrix: [],\n    point: [],\n    pointShadowMap: [],\n    pointShadowMatrix: [],\n    hemi: [],\n    shadows: []\n  },\n      // info\n  _infoMemory = {\n    geometries: 0,\n    textures: 0\n  },\n      _infoRender = {\n    calls: 0,\n    vertices: 0,\n    faces: 0,\n    points: 0\n  };\n\n  this.info = {\n    render: _infoRender,\n    memory: _infoMemory,\n    programs: null\n  }; // initialize\n\n  var _gl;\n\n  try {\n    var attributes = {\n      alpha: _alpha,\n      depth: _depth,\n      stencil: _stencil,\n      antialias: _antialias,\n      premultipliedAlpha: _premultipliedAlpha,\n      preserveDrawingBuffer: _preserveDrawingBuffer\n    };\n    _gl = _context || _canvas.getContext('webgl', attributes) || _canvas.getContext('experimental-webgl', attributes);\n\n    if (_gl === null) {\n      if (_canvas.getContext('webgl') !== null) {\n        throw 'Error creating WebGL context with your selected attributes.';\n      } else {\n        throw 'Error creating WebGL context.';\n      }\n    } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n    if (_gl.getShaderPrecisionFormat === undefined) {\n      _gl.getShaderPrecisionFormat = function () {\n        return {\n          'rangeMin': 1,\n          'rangeMax': 1,\n          'precision': 1\n        };\n      };\n    }\n\n    _canvas.addEventListener('webglcontextlost', onContextLost, false);\n  } catch (error) {\n    console.error('THREE.WebGLRenderer: ' + error);\n  }\n\n  var _isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext;\n\n  var extensions = new THREE.WebGLExtensions(_gl);\n  extensions.get('WEBGL_depth_texture');\n  extensions.get('OES_texture_float');\n  extensions.get('OES_texture_float_linear');\n  extensions.get('OES_texture_half_float');\n  extensions.get('OES_texture_half_float_linear');\n  extensions.get('OES_standard_derivatives');\n  extensions.get('ANGLE_instanced_arrays');\n\n  if (extensions.get('OES_element_index_uint')) {\n    THREE.BufferGeometry.MaxIndex = 4294967296;\n  }\n\n  var capabilities = new THREE.WebGLCapabilities(_gl, extensions, parameters);\n  var state = new THREE.WebGLState(_gl, extensions, paramThreeToGL);\n  var properties = new THREE.WebGLProperties();\n  var objects = new THREE.WebGLObjects(_gl, properties, this.info);\n  var programCache = new THREE.WebGLPrograms(this, capabilities);\n  var lightCache = new THREE.WebGLLights();\n  this.info.programs = programCache.programs;\n  var bufferRenderer = new THREE.WebGLBufferRenderer(_gl, extensions, _infoRender);\n  var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer(_gl, extensions, _infoRender); //\n\n  function getTargetPixelRatio() {\n    return _currentRenderTarget === null ? _pixelRatio : 1;\n  }\n\n  function glClearColor(r, g, b, a) {\n    if (_premultipliedAlpha === true) {\n      r *= a;\n      g *= a;\n      b *= a;\n    }\n\n    state.clearColor(r, g, b, a);\n  }\n\n  function setDefaultGLState() {\n    state.init();\n    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));\n    glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n  }\n\n  function resetGLState() {\n    _currentProgram = null;\n    _currentCamera = null;\n    _currentGeometryProgram = '';\n    _currentMaterialId = -1;\n    state.reset();\n  }\n\n  setDefaultGLState();\n  this.context = _gl;\n  this.capabilities = capabilities;\n  this.extensions = extensions;\n  this.properties = properties;\n  this.state = state; // shadow map\n\n  var shadowMap = new THREE.WebGLShadowMap(this, _lights, objects);\n  this.shadowMap = shadowMap; // Plugins\n\n  var spritePlugin = new THREE.SpritePlugin(this, sprites);\n  var lensFlarePlugin = new THREE.LensFlarePlugin(this, lensFlares); // API\n\n  this.getContext = function () {\n    return _gl;\n  };\n\n  this.getContextAttributes = function () {\n    return _gl.getContextAttributes();\n  };\n\n  this.forceContextLoss = function () {\n    extensions.get('WEBGL_lose_context').loseContext();\n  };\n\n  this.getMaxAnisotropy = function () {\n    var value;\n    return function getMaxAnisotropy() {\n      if (value !== undefined) return value;\n      var extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      if (extension !== null) {\n        value = _gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n      } else {\n        value = 0;\n      }\n\n      return value;\n    };\n  }();\n\n  this.getPrecision = function () {\n    return capabilities.precision;\n  };\n\n  this.getPixelRatio = function () {\n    return _pixelRatio;\n  };\n\n  this.setPixelRatio = function (value) {\n    if (value === undefined) return;\n    _pixelRatio = value;\n    this.setSize(_viewport.z, _viewport.w, false);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _width,\n      height: _height\n    };\n  };\n\n  this.setSize = function (width, height, updateStyle) {\n    _width = width;\n    _height = height;\n    _canvas.width = width * _pixelRatio;\n    _canvas.height = height * _pixelRatio;\n\n    if (updateStyle !== false) {\n      _canvas.style.width = width + 'px';\n      _canvas.style.height = height + 'px';\n    }\n\n    this.setViewport(0, 0, width, height);\n  };\n\n  this.setViewport = function (x, y, width, height) {\n    state.viewport(_viewport.set(x, y, width, height));\n  };\n\n  this.setScissor = function (x, y, width, height) {\n    state.scissor(_scissor.set(x, y, width, height));\n  };\n\n  this.setScissorTest = function (_boolean) {\n    state.setScissorTest(_scissorTest = _boolean);\n  }; // Clearing\n\n\n  this.getClearColor = function () {\n    return _clearColor;\n  };\n\n  this.setClearColor = function (color, alpha) {\n    _clearColor.set(color);\n\n    _clearAlpha = alpha !== undefined ? alpha : 1;\n    glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n  };\n\n  this.getClearAlpha = function () {\n    return _clearAlpha;\n  };\n\n  this.setClearAlpha = function (alpha) {\n    _clearAlpha = alpha;\n    glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n  };\n\n  this.clear = function (color, depth, stencil) {\n    var bits = 0;\n    if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n    if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n    if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    _gl.clear(bits);\n  };\n\n  this.clearColor = function () {\n    this.clear(true, false, false);\n  };\n\n  this.clearDepth = function () {\n    this.clear(false, true, false);\n  };\n\n  this.clearStencil = function () {\n    this.clear(false, false, true);\n  };\n\n  this.clearTarget = function (renderTarget, color, depth, stencil) {\n    this.setRenderTarget(renderTarget);\n    this.clear(color, depth, stencil);\n  }; // Reset\n\n\n  this.resetGLState = resetGLState;\n\n  this.dispose = function () {\n    _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n  }; // Events\n\n\n  function onContextLost(event) {\n    event.preventDefault();\n    resetGLState();\n    setDefaultGLState();\n    properties.clear();\n  }\n\n  function onTextureDispose(event) {\n    var texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n    _infoMemory.textures--;\n  }\n\n  function onRenderTargetDispose(event) {\n    var renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n    _infoMemory.textures--;\n  }\n\n  function onMaterialDispose(event) {\n    var material = event.target;\n    material.removeEventListener('dispose', onMaterialDispose);\n    deallocateMaterial(material);\n  } // Buffer deallocation\n\n\n  function deallocateTexture(texture) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.image && textureProperties.__image__webglTextureCube) {\n      // cube texture\n      _gl.deleteTexture(textureProperties.__image__webglTextureCube);\n    } else {\n      // 2D texture\n      if (textureProperties.__webglInit === undefined) return;\n\n      _gl.deleteTexture(textureProperties.__webglTexture);\n    } // remove all webgl properties\n\n\n    properties[\"delete\"](texture);\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    if (!renderTarget) return;\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget instanceof THREE.WebGLRenderTargetCube) {\n      for (var i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n    }\n\n    properties[\"delete\"](renderTarget.texture);\n    properties[\"delete\"](renderTarget);\n  }\n\n  function deallocateMaterial(material) {\n    releaseMaterialProgramReference(material);\n    properties[\"delete\"](material);\n  }\n\n  function releaseMaterialProgramReference(material) {\n    var programInfo = properties.get(material).program;\n    material.program = undefined;\n\n    if (programInfo !== undefined) {\n      programCache.releaseProgram(programInfo);\n    }\n  } // Buffer rendering\n\n\n  this.renderBufferImmediate = function (object, program, material) {\n    state.initAttributes();\n    var buffers = properties.get(object);\n    if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n    if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n    if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n    if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n    var attributes = program.getAttributes();\n\n    if (object.hasPositions) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(attributes.position);\n\n      _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasNormals) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n      if (material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading) {\n        for (var i = 0, l = object.count * 3; i < l; i += 9) {\n          var array = object.normalArray;\n          var nx = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;\n          var ny = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;\n          var nz = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;\n          array[i + 0] = nx;\n          array[i + 1] = ny;\n          array[i + 2] = nz;\n          array[i + 3] = nx;\n          array[i + 4] = ny;\n          array[i + 5] = nz;\n          array[i + 6] = nx;\n          array[i + 7] = ny;\n          array[i + 8] = nz;\n        }\n      }\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(attributes.normal);\n\n      _gl.vertexAttribPointer(attributes.normal, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasUvs && material.map) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(attributes.uv);\n\n      _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasColors && material.vertexColors !== THREE.NoColors) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(attributes.color);\n\n      _gl.vertexAttribPointer(attributes.color, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    state.disableUnusedAttributes();\n\n    _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n    object.count = 0;\n  };\n\n  this.renderBufferDirect = function (camera, fog, geometry, material, object, group) {\n    setMaterial(material);\n    var program = setProgram(camera, fog, material, object);\n    var updateBuffers = false;\n    var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n    if (geometryProgram !== _currentGeometryProgram) {\n      _currentGeometryProgram = geometryProgram;\n      updateBuffers = true;\n    } // morph targets\n\n\n    var morphTargetInfluences = object.morphTargetInfluences;\n\n    if (morphTargetInfluences !== undefined) {\n      var activeInfluences = [];\n\n      for (var i = 0, l = morphTargetInfluences.length; i < l; i++) {\n        var influence = morphTargetInfluences[i];\n        activeInfluences.push([influence, i]);\n      }\n\n      activeInfluences.sort(absNumericalSort);\n\n      if (activeInfluences.length > 8) {\n        activeInfluences.length = 8;\n      }\n\n      var morphAttributes = geometry.morphAttributes;\n\n      for (var i = 0, l = activeInfluences.length; i < l; i++) {\n        var influence = activeInfluences[i];\n        morphInfluences[i] = influence[0];\n\n        if (influence[0] !== 0) {\n          var index = influence[1];\n          if (material.morphTargets === true && morphAttributes.position) geometry.addAttribute('morphTarget' + i, morphAttributes.position[index]);\n          if (material.morphNormals === true && morphAttributes.normal) geometry.addAttribute('morphNormal' + i, morphAttributes.normal[index]);\n        } else {\n          if (material.morphTargets === true) geometry.removeAttribute('morphTarget' + i);\n          if (material.morphNormals === true) geometry.removeAttribute('morphNormal' + i);\n        }\n      }\n\n      program.getUniforms().setValue(_gl, 'morphTargetInfluences', morphInfluences);\n      updateBuffers = true;\n    } //\n\n\n    var index = geometry.index;\n    var position = geometry.attributes.position;\n\n    if (material.wireframe === true) {\n      index = objects.getWireframeAttribute(geometry);\n    }\n\n    var renderer;\n\n    if (index !== null) {\n      renderer = indexedBufferRenderer;\n      renderer.setIndex(index);\n    } else {\n      renderer = bufferRenderer;\n    }\n\n    if (updateBuffers) {\n      setupVertexAttributes(material, program, geometry);\n\n      if (index !== null) {\n        _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer(index));\n      }\n    } //\n\n\n    var dataStart = 0;\n    var dataCount = Infinity;\n\n    if (index !== null) {\n      dataCount = index.count;\n    } else if (position !== undefined) {\n      dataCount = position.count;\n    }\n\n    var rangeStart = geometry.drawRange.start;\n    var rangeCount = geometry.drawRange.count;\n    var groupStart = group !== null ? group.start : 0;\n    var groupCount = group !== null ? group.count : Infinity;\n    var drawStart = Math.max(dataStart, rangeStart, groupStart);\n    var drawEnd = Math.min(dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n    var drawCount = Math.max(0, drawEnd - drawStart + 1); //\n\n    if (object instanceof THREE.Mesh) {\n      if (material.wireframe === true) {\n        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n        renderer.setMode(_gl.LINES);\n      } else {\n        switch (object.drawMode) {\n          case THREE.TrianglesDrawMode:\n            renderer.setMode(_gl.TRIANGLES);\n            break;\n\n          case THREE.TriangleStripDrawMode:\n            renderer.setMode(_gl.TRIANGLE_STRIP);\n            break;\n\n          case THREE.TriangleFanDrawMode:\n            renderer.setMode(_gl.TRIANGLE_FAN);\n            break;\n        }\n      }\n    } else if (object instanceof THREE.Line) {\n      var lineWidth = material.linewidth;\n      if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n      state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n      if (object instanceof THREE.LineSegments) {\n        renderer.setMode(_gl.LINES);\n      } else {\n        renderer.setMode(_gl.LINE_STRIP);\n      }\n    } else if (object instanceof THREE.Points) {\n      renderer.setMode(_gl.POINTS);\n    }\n\n    if (geometry instanceof THREE.InstancedBufferGeometry) {\n      if (geometry.maxInstancedCount > 0) {\n        renderer.renderInstances(geometry, drawStart, drawCount);\n      }\n    } else {\n      renderer.render(drawStart, drawCount);\n    }\n  };\n\n  function setupVertexAttributes(material, program, geometry, startIndex) {\n    var extension;\n\n    if (geometry instanceof THREE.InstancedBufferGeometry) {\n      extension = extensions.get('ANGLE_instanced_arrays');\n\n      if (extension === null) {\n        console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n    }\n\n    if (startIndex === undefined) startIndex = 0;\n    state.initAttributes();\n    var geometryAttributes = geometry.attributes;\n    var programAttributes = program.getAttributes();\n    var materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    for (var name in programAttributes) {\n      var programAttribute = programAttributes[name];\n\n      if (programAttribute >= 0) {\n        var geometryAttribute = geometryAttributes[name];\n\n        if (geometryAttribute !== undefined) {\n          var type = _gl.FLOAT;\n          var array = geometryAttribute.array;\n          var normalized = geometryAttribute.normalized;\n\n          if (array instanceof Float32Array) {\n            type = _gl.FLOAT;\n          } else if (array instanceof Float64Array) {\n            console.warn(\"Unsupported data buffer format: Float64Array\");\n          } else if (array instanceof Uint16Array) {\n            type = _gl.UNSIGNED_SHORT;\n          } else if (array instanceof Int16Array) {\n            type = _gl.SHORT;\n          } else if (array instanceof Uint32Array) {\n            type = _gl.UNSIGNED_INT;\n          } else if (array instanceof Int32Array) {\n            type = _gl.INT;\n          } else if (array instanceof Int8Array) {\n            type = _gl.BYTE;\n          } else if (array instanceof Uint8Array) {\n            type = _gl.UNSIGNED_BYTE;\n          }\n\n          var size = geometryAttribute.itemSize;\n          var buffer = objects.getAttributeBuffer(geometryAttribute);\n\n          if (geometryAttribute instanceof THREE.InterleavedBufferAttribute) {\n            var data = geometryAttribute.data;\n            var stride = data.stride;\n            var offset = geometryAttribute.offset;\n\n            if (data instanceof THREE.InstancedInterleavedBuffer) {\n              state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute, extension);\n\n              if (geometry.maxInstancedCount === undefined) {\n                geometry.maxInstancedCount = data.meshPerAttribute * data.count;\n              }\n            } else {\n              state.enableAttribute(programAttribute);\n            }\n\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n            _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, (startIndex * stride + offset) * data.array.BYTES_PER_ELEMENT);\n          } else {\n            if (geometryAttribute instanceof THREE.InstancedBufferAttribute) {\n              state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute, extension);\n\n              if (geometry.maxInstancedCount === undefined) {\n                geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n              }\n            } else {\n              state.enableAttribute(programAttribute);\n            }\n\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n            _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT);\n          }\n        } else if (materialDefaultAttributeValues !== undefined) {\n          var value = materialDefaultAttributeValues[name];\n\n          if (value !== undefined) {\n            switch (value.length) {\n              case 2:\n                _gl.vertexAttrib2fv(programAttribute, value);\n\n                break;\n\n              case 3:\n                _gl.vertexAttrib3fv(programAttribute, value);\n\n                break;\n\n              case 4:\n                _gl.vertexAttrib4fv(programAttribute, value);\n\n                break;\n\n              default:\n                _gl.vertexAttrib1fv(programAttribute, value);\n\n            }\n          }\n        }\n      }\n    }\n\n    state.disableUnusedAttributes();\n  } // Sorting\n\n\n  function absNumericalSort(a, b) {\n    return Math.abs(b[0]) - Math.abs(a[0]);\n  }\n\n  function painterSortStable(a, b) {\n    if (a.object.renderOrder !== b.object.renderOrder) {\n      return a.object.renderOrder - b.object.renderOrder;\n    } else if (a.material.id !== b.material.id) {\n      return a.material.id - b.material.id;\n    } else if (a.z !== b.z) {\n      return a.z - b.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  function reversePainterSortStable(a, b) {\n    if (a.object.renderOrder !== b.object.renderOrder) {\n      return a.object.renderOrder - b.object.renderOrder;\n    }\n\n    if (a.z !== b.z) {\n      return b.z - a.z;\n    } else {\n      return a.id - b.id;\n    }\n  } // Rendering\n\n\n  this.render = function (scene, camera, renderTarget, forceClear) {\n    if (camera instanceof THREE.Camera === false) {\n      console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n      return;\n    }\n\n    var fog = scene.fog; // reset caching for this frame\n\n    _currentGeometryProgram = '';\n    _currentMaterialId = -1;\n    _currentCamera = null; // update scene graph\n\n    if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n    if (camera.parent === null) camera.updateMatrixWorld();\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n    _frustum.setFromMatrix(_projScreenMatrix);\n\n    lights.length = 0;\n    opaqueObjectsLastIndex = -1;\n    transparentObjectsLastIndex = -1;\n    sprites.length = 0;\n    lensFlares.length = 0;\n    _localClippingEnabled = this.localClippingEnabled;\n    _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n    projectObject(scene, camera);\n    opaqueObjects.length = opaqueObjectsLastIndex + 1;\n    transparentObjects.length = transparentObjectsLastIndex + 1;\n\n    if (_this.sortObjects === true) {\n      opaqueObjects.sort(painterSortStable);\n      transparentObjects.sort(reversePainterSortStable);\n    } //\n\n\n    if (_clippingEnabled) _clipping.beginShadows();\n    setupShadows(lights);\n    shadowMap.render(scene, camera);\n    setupLights(lights, camera);\n    if (_clippingEnabled) _clipping.endShadows(); //\n\n    _infoRender.calls = 0;\n    _infoRender.vertices = 0;\n    _infoRender.faces = 0;\n    _infoRender.points = 0;\n\n    if (renderTarget === undefined) {\n      renderTarget = null;\n    }\n\n    this.setRenderTarget(renderTarget);\n\n    if (this.autoClear || forceClear) {\n      this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);\n    } //\n\n\n    if (scene.overrideMaterial) {\n      var overrideMaterial = scene.overrideMaterial;\n      renderObjects(opaqueObjects, camera, fog, overrideMaterial);\n      renderObjects(transparentObjects, camera, fog, overrideMaterial);\n    } else {\n      // opaque pass (front-to-back order)\n      state.setBlending(THREE.NoBlending);\n      renderObjects(opaqueObjects, camera, fog); // transparent pass (back-to-front order)\n\n      renderObjects(transparentObjects, camera, fog);\n    } // custom render plugins (post pass)\n\n\n    spritePlugin.render(scene, camera);\n    lensFlarePlugin.render(scene, camera, _currentViewport); // Generate mipmap if we're using any kind of mipmap filtering\n\n    if (renderTarget) {\n      var texture = renderTarget.texture;\n\n      if (texture.generateMipmaps && isPowerOfTwo(renderTarget) && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) {\n        updateRenderTargetMipmap(renderTarget);\n      }\n    } // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n    state.setDepthTest(true);\n    state.setDepthWrite(true);\n    state.setColorWrite(true); // _gl.finish();\n  };\n\n  function pushRenderItem(object, geometry, material, z, group) {\n    var array, index; // allocate the next position in the appropriate array\n\n    if (material.transparent) {\n      array = transparentObjects;\n      index = ++transparentObjectsLastIndex;\n    } else {\n      array = opaqueObjects;\n      index = ++opaqueObjectsLastIndex;\n    } // recycle existing render item or grow the array\n\n\n    var renderItem = array[index];\n\n    if (renderItem !== undefined) {\n      renderItem.id = object.id;\n      renderItem.object = object;\n      renderItem.geometry = geometry;\n      renderItem.material = material;\n      renderItem.z = _vector3.z;\n      renderItem.group = group;\n    } else {\n      renderItem = {\n        id: object.id,\n        object: object,\n        geometry: geometry,\n        material: material,\n        z: _vector3.z,\n        group: group\n      }; // assert( index === array.length );\n\n      array.push(renderItem);\n    }\n  } // TODO Duplicated code (Frustum)\n\n\n  function isObjectViewable(object) {\n    var geometry = object.geometry;\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n    return isSphereViewable(_sphere);\n  }\n\n  function isSpriteViewable(sprite) {\n    _sphere.center.set(0, 0, 0);\n\n    _sphere.radius = 0.7071067811865476;\n\n    _sphere.applyMatrix4(sprite.matrixWorld);\n\n    return isSphereViewable(_sphere);\n  }\n\n  function isSphereViewable(sphere) {\n    if (!_frustum.intersectsSphere(sphere)) return false;\n    var numPlanes = _clipping.numPlanes;\n    if (numPlanes === 0) return true;\n    var planes = _this.clippingPlanes,\n        center = sphere.center,\n        negRad = -sphere.radius,\n        i = 0;\n\n    do {\n      // out when deeper than radius in the negative halfspace\n      if (planes[i].distanceToPoint(center) < negRad) return false;\n    } while (++i !== numPlanes);\n\n    return true;\n  }\n\n  function projectObject(object, camera) {\n    if (object.visible === false) return;\n\n    if (object.layers.test(camera.layers)) {\n      if (object instanceof THREE.Light) {\n        lights.push(object);\n      } else if (object instanceof THREE.Sprite) {\n        if (object.frustumCulled === false || isSpriteViewable(object) === true) {\n          sprites.push(object);\n        }\n      } else if (object instanceof THREE.LensFlare) {\n        lensFlares.push(object);\n      } else if (object instanceof THREE.ImmediateRenderObject) {\n        if (_this.sortObjects === true) {\n          _vector3.setFromMatrixPosition(object.matrixWorld);\n\n          _vector3.applyProjection(_projScreenMatrix);\n        }\n\n        pushRenderItem(object, null, object.material, _vector3.z, null);\n      } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points) {\n        if (object instanceof THREE.SkinnedMesh) {\n          object.skeleton.update();\n        }\n\n        if (object.frustumCulled === false || isObjectViewable(object) === true) {\n          var material = object.material;\n\n          if (material.visible === true) {\n            if (_this.sortObjects === true) {\n              _vector3.setFromMatrixPosition(object.matrixWorld);\n\n              _vector3.applyProjection(_projScreenMatrix);\n            }\n\n            var geometry = objects.update(object);\n\n            if (material instanceof THREE.MultiMaterial) {\n              var groups = geometry.groups;\n              var materials = material.materials;\n\n              for (var i = 0, l = groups.length; i < l; i++) {\n                var group = groups[i];\n                var groupMaterial = materials[group.materialIndex];\n\n                if (groupMaterial.visible === true) {\n                  pushRenderItem(object, geometry, groupMaterial, _vector3.z, group);\n                }\n              }\n            } else {\n              pushRenderItem(object, geometry, material, _vector3.z, null);\n            }\n          }\n        }\n      }\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i], camera);\n    }\n  }\n\n  function renderObjects(renderList, camera, fog, overrideMaterial) {\n    for (var i = 0, l = renderList.length; i < l; i++) {\n      var renderItem = renderList[i];\n      var object = renderItem.object;\n      var geometry = renderItem.geometry;\n      var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n      var group = renderItem.group;\n      object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n      if (object instanceof THREE.ImmediateRenderObject) {\n        setMaterial(material);\n        var program = setProgram(camera, fog, material, object);\n        _currentGeometryProgram = '';\n        object.render(function (object) {\n          _this.renderBufferImmediate(object, program, material);\n        });\n      } else {\n        _this.renderBufferDirect(camera, fog, geometry, material, object, group);\n      }\n    }\n  }\n\n  function initMaterial(material, fog, object) {\n    var materialProperties = properties.get(material);\n    var parameters = programCache.getParameters(material, _lights, fog, _clipping.numPlanes, object);\n    var code = programCache.getProgramCode(material, parameters);\n    var program = materialProperties.program;\n    var programChange = true;\n\n    if (program === undefined) {\n      // new material\n      material.addEventListener('dispose', onMaterialDispose);\n    } else if (program.code !== code) {\n      // changed glsl or parameters\n      releaseMaterialProgramReference(material);\n    } else if (parameters.shaderID !== undefined) {\n      // same glsl and uniform list\n      return;\n    } else {\n      // only rebuild uniform list\n      programChange = false;\n    }\n\n    if (programChange) {\n      if (parameters.shaderID) {\n        var shader = THREE.ShaderLib[parameters.shaderID];\n        materialProperties.__webglShader = {\n          name: material.type,\n          uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n          vertexShader: shader.vertexShader,\n          fragmentShader: shader.fragmentShader\n        };\n      } else {\n        materialProperties.__webglShader = {\n          name: material.type,\n          uniforms: material.uniforms,\n          vertexShader: material.vertexShader,\n          fragmentShader: material.fragmentShader\n        };\n      }\n\n      material.__webglShader = materialProperties.__webglShader;\n      program = programCache.acquireProgram(material, parameters, code);\n      materialProperties.program = program;\n      material.program = program;\n    }\n\n    var attributes = program.getAttributes();\n\n    if (material.morphTargets) {\n      material.numSupportedMorphTargets = 0;\n\n      for (var i = 0; i < _this.maxMorphTargets; i++) {\n        if (attributes['morphTarget' + i] >= 0) {\n          material.numSupportedMorphTargets++;\n        }\n      }\n    }\n\n    if (material.morphNormals) {\n      material.numSupportedMorphNormals = 0;\n\n      for (var i = 0; i < _this.maxMorphNormals; i++) {\n        if (attributes['morphNormal' + i] >= 0) {\n          material.numSupportedMorphNormals++;\n        }\n      }\n    }\n\n    var uniforms = materialProperties.__webglShader.uniforms;\n\n    if (!(material instanceof THREE.ShaderMaterial) && !(material instanceof THREE.RawShaderMaterial) || material.clipping === true) {\n      materialProperties.numClippingPlanes = _clipping.numPlanes;\n      uniforms.clippingPlanes = _clipping.uniform;\n    }\n\n    if (material.lights) {\n      // store the light setup it was created for\n      materialProperties.lightsHash = _lights.hash; // wire up the material to this renderer's lighting state\n\n      uniforms.ambientLightColor.value = _lights.ambient;\n      uniforms.directionalLights.value = _lights.directional;\n      uniforms.spotLights.value = _lights.spot;\n      uniforms.pointLights.value = _lights.point;\n      uniforms.hemisphereLights.value = _lights.hemi;\n      uniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n      uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n      uniforms.spotShadowMap.value = _lights.spotShadowMap;\n      uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n      uniforms.pointShadowMap.value = _lights.pointShadowMap;\n      uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n    }\n\n    var progUniforms = materialProperties.program.getUniforms(),\n        uniformsList = THREE.WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n    materialProperties.uniformsList = uniformsList;\n    materialProperties.dynamicUniforms = THREE.WebGLUniforms.splitDynamic(uniformsList, uniforms);\n  }\n\n  function setMaterial(material) {\n    if (material.side !== THREE.DoubleSide) state.enable(_gl.CULL_FACE);else state.disable(_gl.CULL_FACE);\n    state.setFlipSided(material.side === THREE.BackSide);\n\n    if (material.transparent === true) {\n      state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n    } else {\n      state.setBlending(THREE.NoBlending);\n    }\n\n    state.setDepthFunc(material.depthFunc);\n    state.setDepthTest(material.depthTest);\n    state.setDepthWrite(material.depthWrite);\n    state.setColorWrite(material.colorWrite);\n    state.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n  }\n\n  function setProgram(camera, fog, material, object) {\n    _usedTextureUnits = 0;\n    var materialProperties = properties.get(material);\n\n    if (_clippingEnabled) {\n      if (_localClippingEnabled || camera !== _currentCamera) {\n        var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n        // object instead of the material, once it becomes feasible\n        // (#8465, #8379)\n\n        _clipping.setState(material.clippingPlanes, material.clipShadows, camera, materialProperties, useCache);\n      }\n\n      if (materialProperties.numClippingPlanes !== undefined && materialProperties.numClippingPlanes !== _clipping.numPlanes) {\n        material.needsUpdate = true;\n      }\n    }\n\n    if (materialProperties.program === undefined) {\n      material.needsUpdate = true;\n    }\n\n    if (materialProperties.lightsHash !== undefined && materialProperties.lightsHash !== _lights.hash) {\n      material.needsUpdate = true;\n    }\n\n    if (material.needsUpdate) {\n      initMaterial(material, fog, object);\n      material.needsUpdate = false;\n    }\n\n    var refreshProgram = false;\n    var refreshMaterial = false;\n    var refreshLights = false;\n    var program = materialProperties.program,\n        p_uniforms = program.getUniforms(),\n        m_uniforms = materialProperties.__webglShader.uniforms;\n\n    if (program.id !== _currentProgram) {\n      _gl.useProgram(program.program);\n\n      _currentProgram = program.id;\n      refreshProgram = true;\n      refreshMaterial = true;\n      refreshLights = true;\n    }\n\n    if (material.id !== _currentMaterialId) {\n      _currentMaterialId = material.id;\n      refreshMaterial = true;\n    }\n\n    if (refreshProgram || camera !== _currentCamera) {\n      p_uniforms.set(_gl, camera, 'projectionMatrix');\n\n      if (capabilities.logarithmicDepthBuffer) {\n        p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n      }\n\n      if (camera !== _currentCamera) {\n        _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n        // now, in case this material supports lights - or later, when\n        // the next material that does gets activated:\n\n        refreshMaterial = true; // set to true on material change\n\n        refreshLights = true; // remains set until update done\n      } // load material specific uniforms\n      // (shader material also gets them for the sake of genericity)\n\n\n      if (material instanceof THREE.ShaderMaterial || material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshStandardMaterial || material.envMap) {\n        var uCamPos = p_uniforms.map.cameraPosition;\n\n        if (uCamPos !== undefined) {\n          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n        }\n      }\n\n      if (material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshStandardMaterial || material instanceof THREE.ShaderMaterial || material.skinning) {\n        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n      }\n\n      p_uniforms.set(_gl, _this, 'toneMappingExposure');\n      p_uniforms.set(_gl, _this, 'toneMappingWhitePoint');\n    } // skinning uniforms must be set even if material didn't change\n    // auto-setting of texture unit for bone texture must go before other textures\n    // not sure why, but otherwise weird things happen\n\n\n    if (material.skinning) {\n      p_uniforms.setOptional(_gl, object, 'bindMatrix');\n      p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n      var skeleton = object.skeleton;\n\n      if (skeleton) {\n        if (capabilities.floatVertexTextures && skeleton.useVertexTexture) {\n          p_uniforms.set(_gl, skeleton, 'boneTexture');\n          p_uniforms.set(_gl, skeleton, 'boneTextureWidth');\n          p_uniforms.set(_gl, skeleton, 'boneTextureHeight');\n        } else {\n          p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n        }\n      }\n    }\n\n    if (refreshMaterial) {\n      if (material.lights) {\n        // the current material requires lighting info\n        // note: all lighting uniforms are always set correctly\n        // they simply reference the renderer's state for their\n        // values\n        //\n        // use the current material's .needsUpdate flags to set\n        // the GL state when required\n        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n      } // refresh uniforms common to several materials\n\n\n      if (fog && material.fog) {\n        refreshUniformsFog(m_uniforms, fog);\n      }\n\n      if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshStandardMaterial || material instanceof THREE.MeshDepthMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n      } // refresh single material specific uniforms\n\n\n      if (material instanceof THREE.LineBasicMaterial) {\n        refreshUniformsLine(m_uniforms, material);\n      } else if (material instanceof THREE.LineDashedMaterial) {\n        refreshUniformsLine(m_uniforms, material);\n        refreshUniformsDash(m_uniforms, material);\n      } else if (material instanceof THREE.PointsMaterial) {\n        refreshUniformsPoints(m_uniforms, material);\n      } else if (material instanceof THREE.MeshLambertMaterial) {\n        refreshUniformsLambert(m_uniforms, material);\n      } else if (material instanceof THREE.MeshPhongMaterial) {\n        refreshUniformsPhong(m_uniforms, material);\n      } else if (material instanceof THREE.MeshPhysicalMaterial) {\n        refreshUniformsPhysical(m_uniforms, material);\n      } else if (material instanceof THREE.MeshStandardMaterial) {\n        refreshUniformsStandard(m_uniforms, material);\n      } else if (material instanceof THREE.MeshDepthMaterial) {\n        if (material.displacementMap) {\n          m_uniforms.displacementMap.value = material.displacementMap;\n          m_uniforms.displacementScale.value = material.displacementScale;\n          m_uniforms.displacementBias.value = material.displacementBias;\n        }\n      } else if (material instanceof THREE.MeshNormalMaterial) {\n        m_uniforms.opacity.value = material.opacity;\n      }\n\n      THREE.WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);\n    } // common matrices\n\n\n    p_uniforms.set(_gl, object, 'modelViewMatrix');\n    p_uniforms.set(_gl, object, 'normalMatrix');\n    p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld); // dynamic uniforms\n\n    var dynUniforms = materialProperties.dynamicUniforms;\n\n    if (dynUniforms !== null) {\n      THREE.WebGLUniforms.evalDynamic(dynUniforms, m_uniforms, object, camera);\n      THREE.WebGLUniforms.upload(_gl, dynUniforms, m_uniforms, _this);\n    }\n\n    return program;\n  } // Uniforms (refresh uniforms objects)\n\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n    uniforms.diffuse.value = material.color;\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    uniforms.map.value = material.map;\n    uniforms.specularMap.value = material.specularMap;\n    uniforms.alphaMap.value = material.alphaMap;\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. normal map\n    // 4. bump map\n    // 5. alpha map\n    // 6. emissive map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap instanceof THREE.WebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      var offset = uvScaleMap.offset;\n      var repeat = uvScaleMap.repeat;\n      uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);\n    }\n\n    uniforms.envMap.value = material.envMap; // don't flip CubeTexture envMaps, flip everything else:\n    //  WebGLRenderTargetCube will be flipped for backwards compatibility\n    //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n    // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\n    uniforms.flipEnvMap.value = !(material.envMap instanceof THREE.CubeTexture) ? 1 : -1;\n    uniforms.reflectivity.value = material.reflectivity;\n    uniforms.refractionRatio.value = material.refractionRatio;\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value = material.color;\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material) {\n    uniforms.diffuse.value = material.color;\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * _pixelRatio;\n    uniforms.scale.value = _canvas.clientHeight * 0.5;\n    uniforms.map.value = material.map;\n\n    if (material.map !== null) {\n      var offset = material.map.offset;\n      var repeat = material.map.repeat;\n      uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);\n    }\n  }\n\n  function refreshUniformsFog(uniforms, fog) {\n    uniforms.fogColor.value = fog.color;\n\n    if (fog instanceof THREE.Fog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog instanceof THREE.FogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshUniformsLambert(uniforms, material) {\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value = material.specular;\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    if (material.envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material) {\n    refreshUniformsStandard(uniforms, material);\n  } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n  function markUniformsLightsNeedsUpdate(uniforms, value) {\n    uniforms.ambientLightColor.needsUpdate = value;\n    uniforms.directionalLights.needsUpdate = value;\n    uniforms.pointLights.needsUpdate = value;\n    uniforms.spotLights.needsUpdate = value;\n    uniforms.hemisphereLights.needsUpdate = value;\n  } // Lighting\n\n\n  function setupShadows(lights) {\n    var lightShadowsLength = 0;\n\n    for (var i = 0, l = lights.length; i < l; i++) {\n      var light = lights[i];\n\n      if (light.castShadow) {\n        _lights.shadows[lightShadowsLength++] = light;\n      }\n    }\n\n    _lights.shadows.length = lightShadowsLength;\n  }\n\n  function setupLights(lights, camera) {\n    var l,\n        ll,\n        light,\n        r = 0,\n        g = 0,\n        b = 0,\n        color,\n        intensity,\n        distance,\n        shadowMap,\n        viewMatrix = camera.matrixWorldInverse,\n        directionalLength = 0,\n        pointLength = 0,\n        spotLength = 0,\n        hemiLength = 0;\n\n    for (l = 0, ll = lights.length; l < ll; l++) {\n      light = lights[l];\n      color = light.color;\n      intensity = light.intensity;\n      distance = light.distance;\n      shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n      if (light instanceof THREE.AmbientLight) {\n        r += color.r * intensity;\n        g += color.g * intensity;\n        b += color.b * intensity;\n      } else if (light instanceof THREE.DirectionalLight) {\n        var uniforms = lightCache.get(light);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\n        _vector3.setFromMatrixPosition(light.target.matrixWorld);\n\n        uniforms.direction.sub(_vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          uniforms.shadowBias = light.shadow.bias;\n          uniforms.shadowRadius = light.shadow.radius;\n          uniforms.shadowMapSize = light.shadow.mapSize;\n        }\n\n        _lights.directionalShadowMap[directionalLength] = shadowMap;\n        _lights.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n        _lights.directional[directionalLength++] = uniforms;\n      } else if (light instanceof THREE.SpotLight) {\n        var uniforms = lightCache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.distance = distance;\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\n        _vector3.setFromMatrixPosition(light.target.matrixWorld);\n\n        uniforms.direction.sub(_vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.coneCos = Math.cos(light.angle);\n        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n        uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          uniforms.shadowBias = light.shadow.bias;\n          uniforms.shadowRadius = light.shadow.radius;\n          uniforms.shadowMapSize = light.shadow.mapSize;\n        }\n\n        _lights.spotShadowMap[spotLength] = shadowMap;\n        _lights.spotShadowMatrix[spotLength] = light.shadow.matrix;\n        _lights.spot[spotLength++] = uniforms;\n      } else if (light instanceof THREE.PointLight) {\n        var uniforms = lightCache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.distance = light.distance;\n        uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n        uniforms.shadow = light.castShadow;\n\n        if (light.castShadow) {\n          uniforms.shadowBias = light.shadow.bias;\n          uniforms.shadowRadius = light.shadow.radius;\n          uniforms.shadowMapSize = light.shadow.mapSize;\n        }\n\n        _lights.pointShadowMap[pointLength] = shadowMap;\n\n        if (_lights.pointShadowMatrix[pointLength] === undefined) {\n          _lights.pointShadowMatrix[pointLength] = new THREE.Matrix4();\n        } // for point lights we set the shadow matrix to be a translation-only matrix\n        // equal to inverse of the light's position\n\n\n        _vector3.setFromMatrixPosition(light.matrixWorld).negate();\n\n        _lights.pointShadowMatrix[pointLength].identity().setPosition(_vector3);\n\n        _lights.point[pointLength++] = uniforms;\n      } else if (light instanceof THREE.HemisphereLight) {\n        var uniforms = lightCache.get(light);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.direction.normalize();\n        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n        _lights.hemi[hemiLength++] = uniforms;\n      }\n    }\n\n    _lights.ambient[0] = r;\n    _lights.ambient[1] = g;\n    _lights.ambient[2] = b;\n    _lights.directional.length = directionalLength;\n    _lights.spot.length = spotLength;\n    _lights.point.length = pointLength;\n    _lights.hemi.length = hemiLength;\n    _lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n  } // GL state setting\n\n\n  this.setFaceCulling = function (cullFace, frontFaceDirection) {\n    state.setCullFace(cullFace);\n    state.setFlipSided(frontFaceDirection === THREE.FrontFaceDirectionCW);\n  }; // Textures\n\n\n  function allocTextureUnit() {\n    var textureUnit = _usedTextureUnits;\n\n    if (textureUnit >= capabilities.maxTextures) {\n      console.warn('WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);\n    }\n\n    _usedTextureUnits += 1;\n    return textureUnit;\n  }\n\n  function setTextureParameters(textureType, texture, isPowerOfTwoImage) {\n    var extension;\n\n    if (isPowerOfTwoImage) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL(texture.wrapS));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL(texture.wrapT));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL(texture.minFilter));\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture);\n      }\n    }\n\n    extension = extensions.get('EXT_texture_filter_anisotropic');\n\n    if (extension) {\n      if (texture.type === THREE.FloatType && extensions.get('OES_texture_float_linear') === null) return;\n      if (texture.type === THREE.HalfFloatType && extensions.get('OES_texture_half_float_linear') === null) return;\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, _this.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n      textureProperties.__webglTexture = _gl.createTexture();\n      _infoMemory.textures++;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n    var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);\n\n    if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n      image = makePowerOfTwo(image);\n    }\n\n    var isPowerOfTwoImage = isPowerOfTwo(image),\n        glFormat = paramThreeToGL(texture.format),\n        glType = paramThreeToGL(texture.type);\n    setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n    var mipmap,\n        mipmaps = texture.mipmaps;\n\n    if (texture instanceof THREE.DepthTexture) {\n      // populate depth texture with dummy data\n      var internalFormat = _gl.DEPTH_COMPONENT;\n\n      if (texture.type === THREE.FloatType) {\n        if (!_isWebGL2) throw new Error('Float Depth Texture only supported in WebGL2.0');\n        internalFormat = _gl.DEPTH_COMPONENT32F;\n      } else if (_isWebGL2) {\n        // WebGL 2.0 requires signed internalformat for glTexImage2D\n        internalFormat = _gl.DEPTH_COMPONENT16;\n      }\n\n      state.texImage2D(_gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);\n    } else if (texture instanceof THREE.DataTexture) {\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && isPowerOfTwoImage) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n          state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n\n        texture.generateMipmaps = false;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data);\n      }\n    } else if (texture instanceof THREE.CompressedTexture) {\n      for (var i = 0, il = mipmaps.length; i < il; i++) {\n        mipmap = mipmaps[i];\n\n        if (texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat) {\n          if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n            state.compressedTexImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n          } else {\n            console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\");\n          }\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n      }\n    } else {\n      // regular Texture (image, video, canvas)\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && isPowerOfTwoImage) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n          state.texImage2D(_gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);\n        }\n\n        texture.generateMipmaps = false;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image);\n      }\n    }\n\n    if (texture.generateMipmaps && isPowerOfTwoImage) _gl.generateMipmap(_gl.TEXTURE_2D);\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  }\n\n  function setTexture2D(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      var image = texture.image;\n\n      if (image === undefined) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined', texture);\n        return;\n      }\n\n      if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture);\n        return;\n      }\n\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n  }\n\n  function clampToMaxSize(image, maxSize) {\n    if (image.width > maxSize || image.height > maxSize) {\n      // Warning: Scaling through the canvas will only work with images that use\n      // premultiplied alpha.\n      var scale = maxSize / Math.max(image.width, image.height);\n      var canvas = document.createElement('canvas');\n      canvas.width = Math.floor(image.width * scale);\n      canvas.height = Math.floor(image.height * scale);\n      var context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n      console.warn('THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);\n      return canvas;\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return THREE.Math.isPowerOfTwo(image.width) && THREE.Math.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping) return true;\n    if (texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) return true;\n    return false;\n  }\n\n  function makePowerOfTwo(image) {\n    if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement) {\n      var canvas = document.createElement('canvas');\n      canvas.width = THREE.Math.nearestPowerOfTwo(image.width);\n      canvas.height = THREE.Math.nearestPowerOfTwo(image.height);\n      var context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      console.warn('THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);\n      return canvas;\n    }\n\n    return image;\n  }\n\n  function setTextureCube(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.image.length === 6) {\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        if (!textureProperties.__image__webglTextureCube) {\n          texture.addEventListener('dispose', onTextureDispose);\n          textureProperties.__image__webglTextureCube = _gl.createTexture();\n          _infoMemory.textures++;\n        }\n\n        state.activeTexture(_gl.TEXTURE0 + slot);\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n\n        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n        var isCompressed = texture instanceof THREE.CompressedTexture;\n        var isDataTexture = texture.image[0] instanceof THREE.DataTexture;\n        var cubeImage = [];\n\n        for (var i = 0; i < 6; i++) {\n          if (_this.autoScaleCubemaps && !isCompressed && !isDataTexture) {\n            cubeImage[i] = clampToMaxSize(texture.image[i], capabilities.maxCubemapSize);\n          } else {\n            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n          }\n        }\n\n        var image = cubeImage[0],\n            isPowerOfTwoImage = isPowerOfTwo(image),\n            glFormat = paramThreeToGL(texture.format),\n            glType = paramThreeToGL(texture.type);\n        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);\n\n        for (var i = 0; i < 6; i++) {\n          if (!isCompressed) {\n            if (isDataTexture) {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i]);\n            }\n          } else {\n            var mipmap,\n                mipmaps = cubeImage[i].mipmaps;\n\n            for (var j = 0, jl = mipmaps.length; j < jl; j++) {\n              mipmap = mipmaps[j];\n\n              if (texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat) {\n                if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                } else {\n                  console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\");\n                }\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n\n        if (texture.generateMipmaps && isPowerOfTwoImage) {\n          _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n        }\n\n        textureProperties.__version = texture.version;\n        if (texture.onUpdate) texture.onUpdate(texture);\n      } else {\n        state.activeTexture(_gl.TEXTURE0 + slot);\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n      }\n    }\n  }\n\n  function setTextureCubeDynamic(texture, slot) {\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture);\n  }\n\n  this.allocTextureUnit = allocTextureUnit; //this.setTexture2D = setTexture2D;\n\n  this.setTexture2D = function () {\n    var warned = false; // backwards compatibility: peel texture.texture\n\n    return function (texture, slot) {\n      if (texture instanceof THREE.WebGLRenderTarget) {\n        if (!warned) {\n          console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n          warned = true;\n        }\n\n        texture = texture.texture;\n      }\n\n      setTexture2D(texture, slot);\n    };\n  }();\n\n  this.setTexture = function () {\n    var warned = false;\n    return function (texture, slot) {\n      if (!warned) {\n        console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\");\n        warned = true;\n      }\n\n      _this.setTexture2D(texture, slot);\n    };\n  }();\n\n  this.setTextureCube = function () {\n    var warned = false;\n    return function (texture, slot) {\n      // backwards compatibility: peel texture.texture\n      if (texture instanceof THREE.WebGLRenderTargetCube) {\n        if (!warned) {\n          console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n          warned = true;\n        }\n\n        texture = texture.texture;\n      } // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n      // TODO: unify these code paths\n\n\n      if (texture instanceof THREE.CubeTexture || Array.isArray(texture.image) && texture.image.length === 6) {\n        // CompressedTexture can have Array in image :/\n        // this function alone should take care of cube textures\n        setTextureCube(texture, slot);\n      } else {\n        // assumed: texture property of THREE.WebGLRenderTargetCube\n        setTextureCubeDynamic(texture, slot);\n      }\n    };\n  }(); // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n    var glFormat = paramThreeToGL(renderTarget.texture.format);\n    var glType = paramThreeToGL(renderTarget.texture.type);\n    state.texImage2D(textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      // FIXME: We don't support !depth !stencil\n      _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height);\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported!');\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture instanceof THREE.DepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    _this.setTexture2D(renderTarget.depthTexture, 0);\n\n    var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n\n    if (renderTarget.depthTexture) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (var i = 0; i < 6; i++) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n        }\n      } else {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n      }\n    }\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n    textureProperties.__webglTexture = _gl.createTexture();\n    _infoMemory.textures++;\n    var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n    var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo(renderTarget.width) && THREE.Math.isPowerOfTwo(renderTarget.height); // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (var i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);\n\n      for (var i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n\n      if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n      if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_2D);\n      state.bindTexture(_gl.TEXTURE_2D, null);\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  this.getCurrentRenderTarget = function () {\n    return _currentRenderTarget;\n  };\n\n  this.setRenderTarget = function (renderTarget) {\n    _currentRenderTarget = renderTarget;\n\n    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n      setupRenderTarget(renderTarget);\n    }\n\n    var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n    var framebuffer;\n\n    if (renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n\n      if (isCube) {\n        framebuffer = renderTargetProperties.__webglFramebuffer[renderTarget.activeCubeFace];\n      } else {\n        framebuffer = renderTargetProperties.__webglFramebuffer;\n      }\n\n      _currentScissor.copy(renderTarget.scissor);\n\n      _currentScissorTest = renderTarget.scissorTest;\n\n      _currentViewport.copy(renderTarget.viewport);\n    } else {\n      framebuffer = null;\n\n      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);\n\n      _currentScissorTest = _scissorTest;\n\n      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);\n    }\n\n    if (_currentFramebuffer !== framebuffer) {\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      _currentFramebuffer = framebuffer;\n    }\n\n    state.scissor(_currentScissor);\n    state.setScissorTest(_currentScissorTest);\n    state.viewport(_currentViewport);\n\n    if (isCube) {\n      var textureProperties = properties.get(renderTarget.texture);\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel);\n    }\n  };\n\n  this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer) {\n    if (renderTarget instanceof THREE.WebGLRenderTarget === false) {\n      console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n      return;\n    }\n\n    var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n    if (framebuffer) {\n      var restore = false;\n\n      if (framebuffer !== _currentFramebuffer) {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n        restore = true;\n      }\n\n      try {\n        var texture = renderTarget.texture;\n\n        if (texture.format !== THREE.RGBAFormat && paramThreeToGL(texture.format) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n          return;\n        }\n\n        if (texture.type !== THREE.UnsignedByteType && paramThreeToGL(texture.type) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && !(texture.type === THREE.FloatType && extensions.get('WEBGL_color_buffer_float')) && !(texture.type === THREE.HalfFloatType && extensions.get('EXT_color_buffer_half_float'))) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n          return;\n        }\n\n        if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n          // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n          if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n            _gl.readPixels(x, y, width, height, paramThreeToGL(texture.format), paramThreeToGL(texture.type), buffer);\n          }\n        } else {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n        }\n      } finally {\n        if (restore) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n        }\n      }\n    }\n  };\n\n  function updateRenderTargetMipmap(renderTarget) {\n    var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n    var texture = properties.get(renderTarget.texture).__webglTexture;\n\n    state.bindTexture(target, texture);\n\n    _gl.generateMipmap(target);\n\n    state.bindTexture(target, null);\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } // Map three.js constants to WebGL constants\n\n\n  function paramThreeToGL(p) {\n    var extension;\n    if (p === THREE.RepeatWrapping) return _gl.REPEAT;\n    if (p === THREE.ClampToEdgeWrapping) return _gl.CLAMP_TO_EDGE;\n    if (p === THREE.MirroredRepeatWrapping) return _gl.MIRRORED_REPEAT;\n    if (p === THREE.NearestFilter) return _gl.NEAREST;\n    if (p === THREE.NearestMipMapNearestFilter) return _gl.NEAREST_MIPMAP_NEAREST;\n    if (p === THREE.NearestMipMapLinearFilter) return _gl.NEAREST_MIPMAP_LINEAR;\n    if (p === THREE.LinearFilter) return _gl.LINEAR;\n    if (p === THREE.LinearMipMapNearestFilter) return _gl.LINEAR_MIPMAP_NEAREST;\n    if (p === THREE.LinearMipMapLinearFilter) return _gl.LINEAR_MIPMAP_LINEAR;\n    if (p === THREE.UnsignedByteType) return _gl.UNSIGNED_BYTE;\n    if (p === THREE.UnsignedShort4444Type) return _gl.UNSIGNED_SHORT_4_4_4_4;\n    if (p === THREE.UnsignedShort5551Type) return _gl.UNSIGNED_SHORT_5_5_5_1;\n    if (p === THREE.UnsignedShort565Type) return _gl.UNSIGNED_SHORT_5_6_5;\n    if (p === THREE.ByteType) return _gl.BYTE;\n    if (p === THREE.ShortType) return _gl.SHORT;\n    if (p === THREE.UnsignedShortType) return _gl.UNSIGNED_SHORT;\n    if (p === THREE.IntType) return _gl.INT;\n    if (p === THREE.UnsignedIntType) return _gl.UNSIGNED_INT;\n    if (p === THREE.FloatType) return _gl.FLOAT;\n    extension = extensions.get('OES_texture_half_float');\n\n    if (extension !== null) {\n      if (p === THREE.HalfFloatType) return extension.HALF_FLOAT_OES;\n    }\n\n    if (p === THREE.AlphaFormat) return _gl.ALPHA;\n    if (p === THREE.RGBFormat) return _gl.RGB;\n    if (p === THREE.RGBAFormat) return _gl.RGBA;\n    if (p === THREE.LuminanceFormat) return _gl.LUMINANCE;\n    if (p === THREE.LuminanceAlphaFormat) return _gl.LUMINANCE_ALPHA;\n    if (p === THREE.DepthFormat) return _gl.DEPTH_COMPONENT;\n    if (p === THREE.AddEquation) return _gl.FUNC_ADD;\n    if (p === THREE.SubtractEquation) return _gl.FUNC_SUBTRACT;\n    if (p === THREE.ReverseSubtractEquation) return _gl.FUNC_REVERSE_SUBTRACT;\n    if (p === THREE.ZeroFactor) return _gl.ZERO;\n    if (p === THREE.OneFactor) return _gl.ONE;\n    if (p === THREE.SrcColorFactor) return _gl.SRC_COLOR;\n    if (p === THREE.OneMinusSrcColorFactor) return _gl.ONE_MINUS_SRC_COLOR;\n    if (p === THREE.SrcAlphaFactor) return _gl.SRC_ALPHA;\n    if (p === THREE.OneMinusSrcAlphaFactor) return _gl.ONE_MINUS_SRC_ALPHA;\n    if (p === THREE.DstAlphaFactor) return _gl.DST_ALPHA;\n    if (p === THREE.OneMinusDstAlphaFactor) return _gl.ONE_MINUS_DST_ALPHA;\n    if (p === THREE.DstColorFactor) return _gl.DST_COLOR;\n    if (p === THREE.OneMinusDstColorFactor) return _gl.ONE_MINUS_DST_COLOR;\n    if (p === THREE.SrcAlphaSaturateFactor) return _gl.SRC_ALPHA_SATURATE;\n    extension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n    if (extension !== null) {\n      if (p === THREE.RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n      if (p === THREE.RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n      if (p === THREE.RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n      if (p === THREE.RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n    }\n\n    extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n    if (extension !== null) {\n      if (p === THREE.RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n      if (p === THREE.RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n      if (p === THREE.RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n      if (p === THREE.RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n    }\n\n    extension = extensions.get('WEBGL_compressed_texture_etc1');\n\n    if (extension !== null) {\n      if (p === THREE.RGB_ETC1_Format) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n    }\n\n    extension = extensions.get('EXT_blend_minmax');\n\n    if (extension !== null) {\n      if (p === THREE.MinEquation) return extension.MIN_EXT;\n      if (p === THREE.MaxEquation) return extension.MAX_EXT;\n    }\n\n    return 0;\n  }\n}; // File:src/renderers/WebGLRenderTarget.js\n\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author Marius Kintel / https://github.com/kintel\r\n */\n\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\n\n\nTHREE.WebGLRenderTarget = function (width, height, options) {\n  this.uuid = THREE.Math.generateUUID();\n  this.width = width;\n  this.height = height;\n  this.scissor = new THREE.Vector4(0, 0, width, height);\n  this.scissorTest = false;\n  this.viewport = new THREE.Vector4(0, 0, width, height);\n  options = options || {};\n  if (options.minFilter === undefined) options.minFilter = THREE.LinearFilter;\n  this.texture = new THREE.Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n  this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n  this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n  this.depthTexture = null;\n};\n\nObject.assign(THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n  setSize: function setSize(width, height) {\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.dispose();\n    }\n\n    this.viewport.set(0, 0, width, height);\n    this.scissor.set(0, 0, width, height);\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.width = source.width;\n    this.height = source.height;\n    this.viewport.copy(source.viewport);\n    this.texture = source.texture.clone();\n    this.depthBuffer = source.depthBuffer;\n    this.stencilBuffer = source.stencilBuffer;\n    this.depthTexture = source.depthTexture;\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n}); // File:src/renderers/WebGLRenderTargetCube.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\n\nTHREE.WebGLRenderTargetCube = function (width, height, options) {\n  THREE.WebGLRenderTarget.call(this, width, height, options);\n  this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\n  this.activeMipMapLevel = 0;\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube; // File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\nTHREE.WebGLBufferRenderer = function (_gl, extensions, _infoRender) {\n  var mode;\n\n  function setMode(value) {\n    mode = value;\n  }\n\n  function render(start, count) {\n    _gl.drawArrays(mode, start, count);\n\n    _infoRender.calls++;\n    _infoRender.vertices += count;\n    if (mode === _gl.TRIANGLES) _infoRender.faces += count / 3;\n  }\n\n  function renderInstances(geometry) {\n    var extension = extensions.get('ANGLE_instanced_arrays');\n\n    if (extension === null) {\n      console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n      return;\n    }\n\n    var position = geometry.attributes.position;\n    var count = 0;\n\n    if (position instanceof THREE.InterleavedBufferAttribute) {\n      count = position.data.count;\n      extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);\n    } else {\n      count = position.count;\n      extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);\n    }\n\n    _infoRender.calls++;\n    _infoRender.vertices += count * geometry.maxInstancedCount;\n    if (mode === _gl.TRIANGLES) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n  }\n\n  this.setMode = setMode;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}; // File:src/renderers/webgl/WebGLClipping.js\n\n\nTHREE.WebGLClipping = function () {\n  var scope = this,\n      globalState = null,\n      numGlobalPlanes = 0,\n      localClippingEnabled = false,\n      renderingShadows = false,\n      plane = new THREE.Plane(),\n      viewNormalMatrix = new THREE.Matrix3(),\n      uniform = {\n    value: null,\n    needsUpdate: false\n  };\n  this.uniform = uniform;\n  this.numPlanes = 0;\n\n  this.init = function (planes, enableLocalClipping, camera) {\n    var enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n    // run another frame in order to reset the state:\n    numGlobalPlanes !== 0 || localClippingEnabled;\n    localClippingEnabled = enableLocalClipping;\n    globalState = projectPlanes(planes, camera, 0);\n    numGlobalPlanes = planes.length;\n    return enabled;\n  };\n\n  this.beginShadows = function () {\n    renderingShadows = true;\n    projectPlanes(null);\n  };\n\n  this.endShadows = function () {\n    renderingShadows = false;\n    resetGlobalState();\n  };\n\n  this.setState = function (planes, clipShadows, camera, cache, fromCache) {\n    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n      // there's no local clipping\n      if (renderingShadows) {\n        // there's no global clipping\n        projectPlanes(null);\n      } else {\n        resetGlobalState();\n      }\n    } else {\n      var nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n          lGlobal = nGlobal * 4,\n          dstArray = cache.clippingState || null;\n      uniform.value = dstArray; // ensure unique state\n\n      dstArray = projectPlanes(planes, camera, lGlobal, fromCache);\n\n      for (var i = 0; i !== lGlobal; ++i) {\n        dstArray[i] = globalState[i];\n      }\n\n      cache.clippingState = dstArray;\n      this.numPlanes += nGlobal;\n    }\n  };\n\n  function resetGlobalState() {\n    if (uniform.value !== globalState) {\n      uniform.value = globalState;\n      uniform.needsUpdate = numGlobalPlanes > 0;\n    }\n\n    scope.numPlanes = numGlobalPlanes;\n  }\n\n  function projectPlanes(planes, camera, dstOffset, skipTransform) {\n    var nPlanes = planes !== null ? planes.length : 0,\n        dstArray = null;\n\n    if (nPlanes !== 0) {\n      dstArray = uniform.value;\n\n      if (skipTransform !== true || dstArray === null) {\n        var flatSize = dstOffset + nPlanes * 4,\n            viewMatrix = camera.matrixWorldInverse;\n        viewNormalMatrix.getNormalMatrix(viewMatrix);\n\n        if (dstArray === null || dstArray.length < flatSize) {\n          dstArray = new Float32Array(flatSize);\n        }\n\n        for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n          plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n          plane.normal.toArray(dstArray, i4);\n          dstArray[i4 + 3] = plane.constant;\n        }\n      }\n\n      uniform.value = dstArray;\n      uniform.needsUpdate = true;\n    }\n\n    scope.numPlanes = nPlanes;\n    return dstArray;\n  }\n}; // File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLIndexedBufferRenderer = function (_gl, extensions, _infoRender) {\n  var mode;\n\n  function setMode(value) {\n    mode = value;\n  }\n\n  var type, size;\n\n  function setIndex(index) {\n    if (index.array instanceof Uint32Array && extensions.get('OES_element_index_uint')) {\n      type = _gl.UNSIGNED_INT;\n      size = 4;\n    } else {\n      type = _gl.UNSIGNED_SHORT;\n      size = 2;\n    }\n  }\n\n  function render(start, count) {\n    _gl.drawElements(mode, count, type, start * size);\n\n    _infoRender.calls++;\n    _infoRender.vertices += count;\n    if (mode === _gl.TRIANGLES) _infoRender.faces += count / 3;\n  }\n\n  function renderInstances(geometry, start, count) {\n    var extension = extensions.get('ANGLE_instanced_arrays');\n\n    if (extension === null) {\n      console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n      return;\n    }\n\n    extension.drawElementsInstancedANGLE(mode, count, type, start * size, geometry.maxInstancedCount);\n    _infoRender.calls++;\n    _infoRender.vertices += count * geometry.maxInstancedCount;\n    if (mode === _gl.TRIANGLES) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n  }\n\n  this.setMode = setMode;\n  this.setIndex = setIndex;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}; // File:src/renderers/webgl/WebGLExtensions.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLExtensions = function (gl) {\n  var extensions = {};\n\n  this.get = function (name) {\n    if (extensions[name] !== undefined) {\n      return extensions[name];\n    }\n\n    var extension;\n\n    switch (name) {\n      case 'WEBGL_depth_texture':\n        extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n        break;\n\n      case 'EXT_texture_filter_anisotropic':\n        extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        break;\n\n      case 'WEBGL_compressed_texture_s3tc':\n        extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n        break;\n\n      case 'WEBGL_compressed_texture_pvrtc':\n        extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n        break;\n\n      case 'WEBGL_compressed_texture_etc1':\n        extension = gl.getExtension('WEBGL_compressed_texture_etc1');\n        break;\n\n      default:\n        extension = gl.getExtension(name);\n    }\n\n    if (extension === null) {\n      console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n    }\n\n    extensions[name] = extension;\n    return extension;\n  };\n}; // File:src/renderers/webgl/WebGLCapabilities.js\n\n\nTHREE.WebGLCapabilities = function (gl, extensions, parameters) {\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n        return 'highp';\n      }\n\n      precision = 'mediump';\n    }\n\n    if (precision === 'mediump') {\n      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n        return 'mediump';\n      }\n    }\n\n    return 'lowp';\n  }\n\n  this.getMaxPrecision = getMaxPrecision;\n  this.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n  this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n  this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  this.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  this.maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n  this.maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  this.maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  this.maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  this.maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n  this.vertexTextures = this.maxVertexTextures > 0;\n  this.floatFragmentTextures = !!extensions.get('OES_texture_float');\n  this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n  var _maxPrecision = getMaxPrecision(this.precision);\n\n  if (_maxPrecision !== this.precision) {\n    console.warn('THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.');\n    this.precision = _maxPrecision;\n  }\n\n  if (this.logarithmicDepthBuffer) {\n    this.logarithmicDepthBuffer = !!extensions.get('EXT_frag_depth');\n  }\n}; // File:src/renderers/webgl/WebGLGeometries.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLGeometries = function (gl, properties, info) {\n  var geometries = {};\n\n  function get(object) {\n    var geometry = object.geometry;\n\n    if (geometries[geometry.id] !== undefined) {\n      return geometries[geometry.id];\n    }\n\n    geometry.addEventListener('dispose', onGeometryDispose);\n    var buffergeometry;\n\n    if (geometry instanceof THREE.BufferGeometry) {\n      buffergeometry = geometry;\n    } else if (geometry instanceof THREE.Geometry) {\n      if (geometry._bufferGeometry === undefined) {\n        geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject(object);\n      }\n\n      buffergeometry = geometry._bufferGeometry;\n    }\n\n    geometries[geometry.id] = buffergeometry;\n    info.memory.geometries++;\n    return buffergeometry;\n  }\n\n  function onGeometryDispose(event) {\n    var geometry = event.target;\n    var buffergeometry = geometries[geometry.id];\n\n    if (buffergeometry.index !== null) {\n      deleteAttribute(buffergeometry.index);\n    }\n\n    deleteAttributes(buffergeometry.attributes);\n    geometry.removeEventListener('dispose', onGeometryDispose);\n    delete geometries[geometry.id]; // TODO\n\n    var property = properties.get(geometry);\n\n    if (property.wireframe) {\n      deleteAttribute(property.wireframe);\n    }\n\n    properties[\"delete\"](geometry);\n    var bufferproperty = properties.get(buffergeometry);\n\n    if (bufferproperty.wireframe) {\n      deleteAttribute(bufferproperty.wireframe);\n    }\n\n    properties[\"delete\"](buffergeometry); //\n\n    info.memory.geometries--;\n  }\n\n  function getAttributeBuffer(attribute) {\n    if (attribute instanceof THREE.InterleavedBufferAttribute) {\n      return properties.get(attribute.data).__webglBuffer;\n    }\n\n    return properties.get(attribute).__webglBuffer;\n  }\n\n  function deleteAttribute(attribute) {\n    var buffer = getAttributeBuffer(attribute);\n\n    if (buffer !== undefined) {\n      gl.deleteBuffer(buffer);\n      removeAttributeBuffer(attribute);\n    }\n  }\n\n  function deleteAttributes(attributes) {\n    for (var name in attributes) {\n      deleteAttribute(attributes[name]);\n    }\n  }\n\n  function removeAttributeBuffer(attribute) {\n    if (attribute instanceof THREE.InterleavedBufferAttribute) {\n      properties[\"delete\"](attribute.data);\n    } else {\n      properties[\"delete\"](attribute);\n    }\n  }\n\n  this.get = get;\n}; // File:src/renderers/webgl/WebGLLights.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLLights = function () {\n  var lights = {};\n\n  this.get = function (light) {\n    if (lights[light.id] !== undefined) {\n      return lights[light.id];\n    }\n\n    var uniforms;\n\n    switch (light.type) {\n      case 'DirectionalLight':\n        uniforms = {\n          direction: new THREE.Vector3(),\n          color: new THREE.Color(),\n          shadow: false,\n          shadowBias: 0,\n          shadowRadius: 1,\n          shadowMapSize: new THREE.Vector2()\n        };\n        break;\n\n      case 'SpotLight':\n        uniforms = {\n          position: new THREE.Vector3(),\n          direction: new THREE.Vector3(),\n          color: new THREE.Color(),\n          distance: 0,\n          coneCos: 0,\n          penumbraCos: 0,\n          decay: 0,\n          shadow: false,\n          shadowBias: 0,\n          shadowRadius: 1,\n          shadowMapSize: new THREE.Vector2()\n        };\n        break;\n\n      case 'PointLight':\n        uniforms = {\n          position: new THREE.Vector3(),\n          color: new THREE.Color(),\n          distance: 0,\n          decay: 0,\n          shadow: false,\n          shadowBias: 0,\n          shadowRadius: 1,\n          shadowMapSize: new THREE.Vector2()\n        };\n        break;\n\n      case 'HemisphereLight':\n        uniforms = {\n          direction: new THREE.Vector3(),\n          skyColor: new THREE.Color(),\n          groundColor: new THREE.Color()\n        };\n        break;\n    }\n\n    lights[light.id] = uniforms;\n    return uniforms;\n  };\n}; // File:src/renderers/webgl/WebGLObjects.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLObjects = function (gl, properties, info) {\n  var geometries = new THREE.WebGLGeometries(gl, properties, info); //\n\n  function update(object) {\n    // TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n    var geometry = geometries.get(object);\n\n    if (object.geometry instanceof THREE.Geometry) {\n      geometry.updateFromObject(object);\n    }\n\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n    if (index !== null) {\n      updateAttribute(index, gl.ELEMENT_ARRAY_BUFFER);\n    }\n\n    for (var name in attributes) {\n      updateAttribute(attributes[name], gl.ARRAY_BUFFER);\n    } // morph targets\n\n\n    var morphAttributes = geometry.morphAttributes;\n\n    for (var name in morphAttributes) {\n      var array = morphAttributes[name];\n\n      for (var i = 0, l = array.length; i < l; i++) {\n        updateAttribute(array[i], gl.ARRAY_BUFFER);\n      }\n    }\n\n    return geometry;\n  }\n\n  function updateAttribute(attribute, bufferType) {\n    var data = attribute instanceof THREE.InterleavedBufferAttribute ? attribute.data : attribute;\n    var attributeProperties = properties.get(data);\n\n    if (attributeProperties.__webglBuffer === undefined) {\n      createBuffer(attributeProperties, data, bufferType);\n    } else if (attributeProperties.version !== data.version) {\n      updateBuffer(attributeProperties, data, bufferType);\n    }\n  }\n\n  function createBuffer(attributeProperties, data, bufferType) {\n    attributeProperties.__webglBuffer = gl.createBuffer();\n    gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);\n    var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n    gl.bufferData(bufferType, data.array, usage);\n    attributeProperties.version = data.version;\n  }\n\n  function updateBuffer(attributeProperties, data, bufferType) {\n    gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);\n\n    if (data.dynamic === false || data.updateRange.count === -1) {\n      // Not using update ranges\n      gl.bufferSubData(bufferType, 0, data.array);\n    } else if (data.updateRange.count === 0) {\n      console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');\n    } else {\n      gl.bufferSubData(bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT, data.array.subarray(data.updateRange.offset, data.updateRange.offset + data.updateRange.count));\n      data.updateRange.count = 0; // reset range\n    }\n\n    attributeProperties.version = data.version;\n  }\n\n  function getAttributeBuffer(attribute) {\n    if (attribute instanceof THREE.InterleavedBufferAttribute) {\n      return properties.get(attribute.data).__webglBuffer;\n    }\n\n    return properties.get(attribute).__webglBuffer;\n  }\n\n  function getWireframeAttribute(geometry) {\n    var property = properties.get(geometry);\n\n    if (property.wireframe !== undefined) {\n      return property.wireframe;\n    }\n\n    var indices = [];\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n    var position = attributes.position; // console.time( 'wireframe' );\n\n    if (index !== null) {\n      var edges = {};\n      var array = index.array;\n\n      for (var i = 0, l = array.length; i < l; i += 3) {\n        var a = array[i + 0];\n        var b = array[i + 1];\n        var c = array[i + 2];\n        if (checkEdge(edges, a, b)) indices.push(a, b);\n        if (checkEdge(edges, b, c)) indices.push(b, c);\n        if (checkEdge(edges, c, a)) indices.push(c, a);\n      }\n    } else {\n      var array = attributes.position.array;\n\n      for (var i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n        var a = i + 0;\n        var b = i + 1;\n        var c = i + 2;\n        indices.push(a, b, b, c, c, a);\n      }\n    } // console.timeEnd( 'wireframe' );\n\n\n    var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n    var attribute = new THREE.BufferAttribute(new TypeArray(indices), 1);\n    updateAttribute(attribute, gl.ELEMENT_ARRAY_BUFFER);\n    property.wireframe = attribute;\n    return attribute;\n  }\n\n  function checkEdge(edges, a, b) {\n    if (a > b) {\n      var tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    var list = edges[a];\n\n    if (list === undefined) {\n      edges[a] = [b];\n      return true;\n    } else if (list.indexOf(b) === -1) {\n      list.push(b);\n      return true;\n    }\n\n    return false;\n  }\n\n  this.getAttributeBuffer = getAttributeBuffer;\n  this.getWireframeAttribute = getWireframeAttribute;\n  this.update = update;\n}; // File:src/renderers/webgl/WebGLProgram.js\n\n\nTHREE.WebGLProgram = function () {\n  var programIdCount = 0;\n\n  function getEncodingComponents(encoding) {\n    switch (encoding) {\n      case THREE.LinearEncoding:\n        return ['Linear', '( value )'];\n\n      case THREE.sRGBEncoding:\n        return ['sRGB', '( value )'];\n\n      case THREE.RGBEEncoding:\n        return ['RGBE', '( value )'];\n\n      case THREE.RGBM7Encoding:\n        return ['RGBM', '( value, 7.0 )'];\n\n      case THREE.RGBM16Encoding:\n        return ['RGBM', '( value, 16.0 )'];\n\n      case THREE.RGBDEncoding:\n        return ['RGBD', '( value, 256.0 )'];\n\n      case THREE.GammaEncoding:\n        return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n      default:\n        throw new Error('unsupported encoding: ' + encoding);\n    }\n  }\n\n  function getTexelDecodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[0] + \"ToLinear\" + components[1] + \"; }\";\n  }\n\n  function getTexelEncodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[0] + components[1] + \"; }\";\n  }\n\n  function getToneMappingFunction(functionName, toneMapping) {\n    var toneMappingName;\n\n    switch (toneMapping) {\n      case THREE.LinearToneMapping:\n        toneMappingName = \"Linear\";\n        break;\n\n      case THREE.ReinhardToneMapping:\n        toneMappingName = \"Reinhard\";\n        break;\n\n      case THREE.Uncharted2ToneMapping:\n        toneMappingName = \"Uncharted2\";\n        break;\n\n      case THREE.CineonToneMapping:\n        toneMappingName = \"OptimizedCineon\";\n        break;\n\n      default:\n        throw new Error('unsupported toneMapping: ' + toneMapping);\n    }\n\n    return \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n  }\n\n  function generateExtensions(extensions, parameters, rendererExtensions) {\n    extensions = extensions || {};\n    var chunks = [extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ? '#extension GL_OES_standard_derivatives : enable' : '', (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '', extensions.drawBuffers && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '', (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n    return chunks.filter(filterEmptyLine).join('\\n');\n  }\n\n  function generateDefines(defines) {\n    var chunks = [];\n\n    for (var name in defines) {\n      var value = defines[name];\n      if (value === false) continue;\n      chunks.push('#define ' + name + ' ' + value);\n    }\n\n    return chunks.join('\\n');\n  }\n\n  function fetchAttributeLocations(gl, program, identifiers) {\n    var attributes = {};\n    var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (var i = 0; i < n; i++) {\n      var info = gl.getActiveAttrib(program, i);\n      var name = info.name; // console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n      attributes[name] = gl.getAttribLocation(program, name);\n    }\n\n    return attributes;\n  }\n\n  function filterEmptyLine(string) {\n    return string !== '';\n  }\n\n  function replaceLightNums(string, parameters) {\n    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);\n  }\n\n  function parseIncludes(string) {\n    var pattern = /#include +<([\\w\\d.]+)>/g;\n\n    function replace(match, include) {\n      var replace = THREE.ShaderChunk[include];\n\n      if (replace === undefined) {\n        throw new Error('Can not resolve #include <' + include + '>');\n      }\n\n      return parseIncludes(replace);\n    }\n\n    return string.replace(pattern, replace);\n  }\n\n  function unrollLoops(string) {\n    var pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    function replace(match, start, end, snippet) {\n      var unroll = '';\n\n      for (var i = parseInt(start); i < parseInt(end); i++) {\n        unroll += snippet.replace(/\\[ i \\]/g, '[ ' + i + ' ]');\n      }\n\n      return unroll;\n    }\n\n    return string.replace(pattern, replace);\n  }\n\n  return function WebGLProgram(renderer, code, material, parameters) {\n    var gl = renderer.context;\n    var extensions = material.extensions;\n    var defines = material.defines;\n    var vertexShader = material.__webglShader.vertexShader;\n    var fragmentShader = material.__webglShader.fragmentShader;\n    var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    if (parameters.shadowMapType === THREE.PCFShadowMap) {\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n    } else if (parameters.shadowMapType === THREE.PCFSoftShadowMap) {\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n    }\n\n    var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n    if (parameters.envMap) {\n      switch (material.envMap.mapping) {\n        case THREE.CubeReflectionMapping:\n        case THREE.CubeRefractionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n          break;\n\n        case THREE.CubeUVReflectionMapping:\n        case THREE.CubeUVRefractionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n          break;\n\n        case THREE.EquirectangularReflectionMapping:\n        case THREE.EquirectangularRefractionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n          break;\n\n        case THREE.SphericalReflectionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n          break;\n      }\n\n      switch (material.envMap.mapping) {\n        case THREE.CubeRefractionMapping:\n        case THREE.EquirectangularRefractionMapping:\n          envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n          break;\n      }\n\n      switch (material.combine) {\n        case THREE.MultiplyOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n          break;\n\n        case THREE.MixOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n          break;\n\n        case THREE.AddOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n          break;\n      }\n    }\n\n    var gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0; // console.log( 'building new program ' );\n    //\n\n    var customExtensions = generateExtensions(extensions, parameters, renderer.extensions);\n    var customDefines = generateDefines(defines); //\n\n    var program = gl.createProgram();\n    var prefixVertex, prefixFragment;\n\n    if (material instanceof THREE.RawShaderMaterial) {\n      prefixVertex = '';\n      prefixFragment = '';\n    } else {\n      prefixVertex = ['precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + material.__webglShader.name, customDefines, parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes, parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n      prefixFragment = [customExtensions, 'precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + material.__webglShader.name, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes, parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '', parameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '', parameters.envMap && renderer.extensions.get('EXT_shader_texture_lod') ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', parameters.toneMapping !== THREE.NoToneMapping ? \"#define TONE_MAPPING\" : '', parameters.toneMapping !== THREE.NoToneMapping ? THREE.ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n      parameters.toneMapping !== THREE.NoToneMapping ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping) : '', parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ? THREE.ShaderChunk['encodings_pars_fragment'] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n      parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.outputEncoding ? getTexelEncodingFunction(\"linearToOutputTexel\", parameters.outputEncoding) : '', parameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n    }\n\n    vertexShader = parseIncludes(vertexShader, parameters);\n    vertexShader = replaceLightNums(vertexShader, parameters);\n    fragmentShader = parseIncludes(fragmentShader, parameters);\n    fragmentShader = replaceLightNums(fragmentShader, parameters);\n\n    if (material instanceof THREE.ShaderMaterial === false) {\n      vertexShader = unrollLoops(vertexShader);\n      fragmentShader = unrollLoops(fragmentShader);\n    }\n\n    var vertexGlsl = prefixVertex + vertexShader;\n    var fragmentGlsl = prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n    // console.log( '*FRAGMENT*', fragmentGlsl );\n\n    var glVertexShader = THREE.WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n    var glFragmentShader = THREE.WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n    gl.attachShader(program, glVertexShader);\n    gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n    if (material.index0AttributeName !== undefined) {\n      gl.bindAttribLocation(program, 0, material.index0AttributeName);\n    } else if (parameters.morphTargets === true) {\n      // programs with morphTargets displace position out of attribute 0\n      gl.bindAttribLocation(program, 0, 'position');\n    }\n\n    gl.linkProgram(program);\n    var programLog = gl.getProgramInfoLog(program);\n    var vertexLog = gl.getShaderInfoLog(glVertexShader);\n    var fragmentLog = gl.getShaderInfoLog(glFragmentShader);\n    var runnable = true;\n    var haveDiagnostics = true; // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n      runnable = false;\n      console.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog);\n    } else if (programLog !== '') {\n      console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n    } else if (vertexLog === '' || fragmentLog === '') {\n      haveDiagnostics = false;\n    }\n\n    if (haveDiagnostics) {\n      this.diagnostics = {\n        runnable: runnable,\n        material: material,\n        programLog: programLog,\n        vertexShader: {\n          log: vertexLog,\n          prefix: prefixVertex\n        },\n        fragmentShader: {\n          log: fragmentLog,\n          prefix: prefixFragment\n        }\n      };\n    } // clean up\n\n\n    gl.deleteShader(glVertexShader);\n    gl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n    var cachedUniforms;\n\n    this.getUniforms = function () {\n      if (cachedUniforms === undefined) {\n        cachedUniforms = new THREE.WebGLUniforms(gl, program, renderer);\n      }\n\n      return cachedUniforms;\n    }; // set up caching for attribute locations\n\n\n    var cachedAttributes;\n\n    this.getAttributes = function () {\n      if (cachedAttributes === undefined) {\n        cachedAttributes = fetchAttributeLocations(gl, program);\n      }\n\n      return cachedAttributes;\n    }; // free resource\n\n\n    this.destroy = function () {\n      gl.deleteProgram(program);\n      this.program = undefined;\n    }; // DEPRECATED\n\n\n    Object.defineProperties(this, {\n      uniforms: {\n        get: function get() {\n          console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');\n          return this.getUniforms();\n        }\n      },\n      attributes: {\n        get: function get() {\n          console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');\n          return this.getAttributes();\n        }\n      }\n    }); //\n\n    this.id = programIdCount++;\n    this.code = code;\n    this.usedTimes = 1;\n    this.program = program;\n    this.vertexShader = glVertexShader;\n    this.fragmentShader = glFragmentShader;\n    return this;\n  };\n}(); // File:src/renderers/webgl/WebGLPrograms.js\n\n\nTHREE.WebGLPrograms = function (renderer, capabilities) {\n  var programs = [];\n  var shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points'\n  };\n  var parameterNames = [\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"];\n\n  function allocateBones(object) {\n    if (capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture) {\n      return 1024;\n    } else {\n      // default for when object is not specified\n      // ( for example when prebuilding shader to be used with multiple objects )\n      //\n      //  - leave some extra space for other uniforms\n      //  - limit here is ANGLE's 254 max uniform vectors\n      //    (up to 54 should be safe)\n      var nVertexUniforms = capabilities.maxVertexUniforms;\n      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n      var maxBones = nVertexMatrices;\n\n      if (object !== undefined && object instanceof THREE.SkinnedMesh) {\n        maxBones = Math.min(object.skeleton.bones.length, maxBones);\n\n        if (maxBones < object.skeleton.bones.length) {\n          console.warn('WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)');\n        }\n      }\n\n      return maxBones;\n    }\n  }\n\n  function getTextureEncodingFromMap(map, gammaOverrideLinear) {\n    var encoding;\n\n    if (!map) {\n      encoding = THREE.LinearEncoding;\n    } else if (map instanceof THREE.Texture) {\n      encoding = map.encoding;\n    } else if (map instanceof THREE.WebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    } // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\n\n    if (encoding === THREE.LinearEncoding && gammaOverrideLinear) {\n      encoding = THREE.GammaEncoding;\n    }\n\n    return encoding;\n  }\n\n  this.getParameters = function (material, lights, fog, nClipPlanes, object) {\n    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    var maxBones = allocateBones(object);\n    var precision = renderer.getPrecision();\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    }\n\n    var currentRenderTarget = renderer.getCurrentRenderTarget();\n    var parameters = {\n      shaderID: shaderID,\n      precision: precision,\n      supportsVertexTextures: capabilities.vertexTextures,\n      outputEncoding: getTextureEncodingFromMap(!currentRenderTarget ? null : currentRenderTarget.texture, renderer.gammaOutput),\n      map: !!material.map,\n      mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n      envMap: !!material.envMap,\n      envMapMode: material.envMap && material.envMap.mapping,\n      envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n      envMapCubeUV: !!material.envMap && (material.envMap.mapping === THREE.CubeUVReflectionMapping || material.envMap.mapping === THREE.CubeUVRefractionMapping),\n      lightMap: !!material.lightMap,\n      aoMap: !!material.aoMap,\n      emissiveMap: !!material.emissiveMap,\n      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n      bumpMap: !!material.bumpMap,\n      normalMap: !!material.normalMap,\n      displacementMap: !!material.displacementMap,\n      roughnessMap: !!material.roughnessMap,\n      metalnessMap: !!material.metalnessMap,\n      specularMap: !!material.specularMap,\n      alphaMap: !!material.alphaMap,\n      combine: material.combine,\n      vertexColors: material.vertexColors,\n      fog: fog,\n      useFog: material.fog,\n      fogExp: fog instanceof THREE.FogExp2,\n      flatShading: material.shading === THREE.FlatShading,\n      sizeAttenuation: material.sizeAttenuation,\n      logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n      skinning: material.skinning,\n      maxBones: maxBones,\n      useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n      morphTargets: material.morphTargets,\n      morphNormals: material.morphNormals,\n      maxMorphTargets: renderer.maxMorphTargets,\n      maxMorphNormals: renderer.maxMorphNormals,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numHemiLights: lights.hemi.length,\n      numClippingPlanes: nClipPlanes,\n      shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: renderer.toneMapping,\n      physicallyCorrectLights: renderer.physicallyCorrectLights,\n      premultipliedAlpha: material.premultipliedAlpha,\n      alphaTest: material.alphaTest,\n      doubleSided: material.side === THREE.DoubleSide,\n      flipSided: material.side === THREE.BackSide,\n      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false\n    };\n    return parameters;\n  };\n\n  this.getProgramCode = function (material, parameters) {\n    var array = [];\n\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(material.fragmentShader);\n      array.push(material.vertexShader);\n    }\n\n    if (material.defines !== undefined) {\n      for (var name in material.defines) {\n        array.push(name);\n        array.push(material.defines[name]);\n      }\n    }\n\n    for (var i = 0; i < parameterNames.length; i++) {\n      array.push(parameters[parameterNames[i]]);\n    }\n\n    return array.join();\n  };\n\n  this.acquireProgram = function (material, parameters, code) {\n    var program; // Check if code has been already compiled\n\n    for (var p = 0, pl = programs.length; p < pl; p++) {\n      var programInfo = programs[p];\n\n      if (programInfo.code === code) {\n        program = programInfo;\n        ++program.usedTimes;\n        break;\n      }\n    }\n\n    if (program === undefined) {\n      program = new THREE.WebGLProgram(renderer, code, material, parameters);\n      programs.push(program);\n    }\n\n    return program;\n  };\n\n  this.releaseProgram = function (program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      var i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop(); // Free WebGL resources\n\n      program.destroy();\n    }\n  }; // Exposed for resource monitoring & error feedback via renderer.info:\n\n\n  this.programs = programs;\n}; // File:src/renderers/webgl/WebGLProperties.js\n\n/**\r\n* @author fordacious / fordacious.github.io\r\n*/\n\n\nTHREE.WebGLProperties = function () {\n  var properties = {};\n\n  this.get = function (object) {\n    var uuid = object.uuid;\n    var map = properties[uuid];\n\n    if (map === undefined) {\n      map = {};\n      properties[uuid] = map;\n    }\n\n    return map;\n  };\n\n  this[\"delete\"] = function (object) {\n    delete properties[object.uuid];\n  };\n\n  this.clear = function () {\n    properties = {};\n  };\n}; // File:src/renderers/webgl/WebGLShader.js\n\n\nTHREE.WebGLShader = function () {\n  function addLineNumbers(string) {\n    var lines = string.split('\\n');\n\n    for (var i = 0; i < lines.length; i++) {\n      lines[i] = i + 1 + ': ' + lines[i];\n    }\n\n    return lines.join('\\n');\n  }\n\n  return function WebGLShader(gl, type, string) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, string);\n    gl.compileShader(shader);\n\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      console.error('THREE.WebGLShader: Shader couldn\\'t compile.');\n    }\n\n    if (gl.getShaderInfoLog(shader) !== '') {\n      console.warn('THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog(shader), addLineNumbers(string));\n    } // --enable-privileged-webgl-extension\n    // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\n    return shader;\n  };\n}(); // File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.WebGLShadowMap = function (_renderer, _lights, _objects) {\n  var _gl = _renderer.context,\n      _state = _renderer.state,\n      _frustum = new THREE.Frustum(),\n      _projScreenMatrix = new THREE.Matrix4(),\n      _lightShadows = _lights.shadows,\n      _shadowMapSize = new THREE.Vector2(),\n      _lookTarget = new THREE.Vector3(),\n      _lightPositionWorld = new THREE.Vector3(),\n      _renderList = [],\n      _MorphingFlag = 1,\n      _SkinningFlag = 2,\n      _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,\n      _depthMaterials = new Array(_NumberOfMaterialVariants),\n      _distanceMaterials = new Array(_NumberOfMaterialVariants),\n      _materialCache = {};\n\n  var cubeDirections = [new THREE.Vector3(1, 0, 0), new THREE.Vector3(-1, 0, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, -1, 0)];\n  var cubeUps = [new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1)];\n  var cube2DViewPorts = [new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()]; // init\n\n  var depthMaterialTemplate = new THREE.MeshDepthMaterial();\n  depthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n  depthMaterialTemplate.clipping = true;\n  var distanceShader = THREE.ShaderLib[\"distanceRGBA\"];\n  var distanceUniforms = THREE.UniformsUtils.clone(distanceShader.uniforms);\n\n  for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {\n    var useMorphing = (i & _MorphingFlag) !== 0;\n    var useSkinning = (i & _SkinningFlag) !== 0;\n    var depthMaterial = depthMaterialTemplate.clone();\n    depthMaterial.morphTargets = useMorphing;\n    depthMaterial.skinning = useSkinning;\n    _depthMaterials[i] = depthMaterial;\n    var distanceMaterial = new THREE.ShaderMaterial({\n      defines: {\n        'USE_SHADOWMAP': ''\n      },\n      uniforms: distanceUniforms,\n      vertexShader: distanceShader.vertexShader,\n      fragmentShader: distanceShader.fragmentShader,\n      morphTargets: useMorphing,\n      skinning: useSkinning,\n      clipping: true\n    });\n    _distanceMaterials[i] = distanceMaterial;\n  } //\n\n\n  var scope = this;\n  this.enabled = false;\n  this.autoUpdate = true;\n  this.needsUpdate = false;\n  this.type = THREE.PCFShadowMap;\n  this.renderReverseSided = true;\n  this.renderSingleSided = true;\n\n  this.render = function (scene, camera) {\n    if (scope.enabled === false) return;\n    if (scope.autoUpdate === false && scope.needsUpdate === false) return;\n    if (_lightShadows.length === 0) return; // Set GL state for depth map.\n\n    _state.clearColor(1, 1, 1, 1);\n\n    _state.disable(_gl.BLEND);\n\n    _state.setDepthTest(true);\n\n    _state.setScissorTest(false); // render depth map\n\n\n    var faceCount, isPointLight;\n\n    for (var i = 0, il = _lightShadows.length; i < il; i++) {\n      var light = _lightShadows[i];\n      var shadow = light.shadow;\n\n      if (shadow === undefined) {\n        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n        continue;\n      }\n\n      var shadowCamera = shadow.camera;\n\n      _shadowMapSize.copy(shadow.mapSize);\n\n      if (light instanceof THREE.PointLight) {\n        faceCount = 6;\n        isPointLight = true;\n        var vpWidth = _shadowMapSize.x;\n        var vpHeight = _shadowMapSize.y; // These viewports map a cube-map onto a 2D texture with the\n        // following orientation:\n        //\n        //  xzXZ\n        //   y Y\n        //\n        // X - Positive x direction\n        // x - Negative x direction\n        // Y - Positive y direction\n        // y - Negative y direction\n        // Z - Positive z direction\n        // z - Negative z direction\n        // positive X\n\n        cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight); // negative X\n\n        cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight); // positive Z\n\n        cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight); // negative Z\n\n        cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight); // positive Y\n\n        cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight); // negative Y\n\n        cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n        _shadowMapSize.x *= 4.0;\n        _shadowMapSize.y *= 2.0;\n      } else {\n        faceCount = 1;\n        isPointLight = false;\n      }\n\n      if (shadow.map === null) {\n        var pars = {\n          minFilter: THREE.NearestFilter,\n          magFilter: THREE.NearestFilter,\n          format: THREE.RGBAFormat\n        };\n        shadow.map = new THREE.WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n        shadowCamera.updateProjectionMatrix();\n      }\n\n      if (shadow instanceof THREE.SpotLightShadow) {\n        shadow.update(light);\n      }\n\n      var shadowMap = shadow.map;\n      var shadowMatrix = shadow.matrix;\n\n      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n      shadowCamera.position.copy(_lightPositionWorld);\n\n      _renderer.setRenderTarget(shadowMap);\n\n      _renderer.clear(); // render shadow map for each cube face (if omni-directional) or\n      // run a single pass if not\n\n\n      for (var face = 0; face < faceCount; face++) {\n        if (isPointLight) {\n          _lookTarget.copy(shadowCamera.position);\n\n          _lookTarget.add(cubeDirections[face]);\n\n          shadowCamera.up.copy(cubeUps[face]);\n          shadowCamera.lookAt(_lookTarget);\n          var vpDimensions = cube2DViewPorts[face];\n\n          _state.viewport(vpDimensions);\n        } else {\n          _lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\n          shadowCamera.lookAt(_lookTarget);\n        }\n\n        shadowCamera.updateMatrixWorld();\n        shadowCamera.matrixWorldInverse.getInverse(shadowCamera.matrixWorld); // compute shadow matrix\n\n        shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n        shadowMatrix.multiply(shadowCamera.projectionMatrix);\n        shadowMatrix.multiply(shadowCamera.matrixWorldInverse); // update camera matrices and frustum\n\n        _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n        _frustum.setFromMatrix(_projScreenMatrix); // set object matrices & frustum culling\n\n\n        _renderList.length = 0;\n        projectObject(scene, camera, shadowCamera); // render shadow map\n        // render regular objects\n\n        for (var j = 0, jl = _renderList.length; j < jl; j++) {\n          var object = _renderList[j];\n\n          var geometry = _objects.update(object);\n\n          var material = object.material;\n\n          if (material instanceof THREE.MultiMaterial) {\n            var groups = geometry.groups;\n            var materials = material.materials;\n\n            for (var k = 0, kl = groups.length; k < kl; k++) {\n              var group = groups[k];\n              var groupMaterial = materials[group.materialIndex];\n\n              if (groupMaterial.visible === true) {\n                var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld);\n\n                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n              }\n            }\n          } else {\n            var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld);\n\n            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n          }\n        }\n      }\n    } // Restore GL state.\n\n\n    var clearColor = _renderer.getClearColor(),\n        clearAlpha = _renderer.getClearAlpha();\n\n    _renderer.setClearColor(clearColor, clearAlpha);\n\n    scope.needsUpdate = false;\n  };\n\n  function getDepthMaterial(object, material, isPointLight, lightPositionWorld) {\n    var geometry = object.geometry;\n    var result = null;\n    var materialVariants = _depthMaterials;\n    var customMaterial = object.customDepthMaterial;\n\n    if (isPointLight) {\n      materialVariants = _distanceMaterials;\n      customMaterial = object.customDistanceMaterial;\n    }\n\n    if (!customMaterial) {\n      var useMorphing = geometry.morphTargets !== undefined && geometry.morphTargets.length > 0 && material.morphTargets;\n      var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n      var variantIndex = 0;\n      if (useMorphing) variantIndex |= _MorphingFlag;\n      if (useSkinning) variantIndex |= _SkinningFlag;\n      result = materialVariants[variantIndex];\n    } else {\n      result = customMaterial;\n    }\n\n    if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n      // in this case we need a unique material instance reflecting the\n      // appropriate state\n      var keyA = result.uuid,\n          keyB = material.uuid;\n      var materialsForVariant = _materialCache[keyA];\n\n      if (materialsForVariant === undefined) {\n        materialsForVariant = {};\n        _materialCache[keyA] = materialsForVariant;\n      }\n\n      var cachedMaterial = materialsForVariant[keyB];\n\n      if (cachedMaterial === undefined) {\n        cachedMaterial = result.clone();\n        materialsForVariant[keyB] = cachedMaterial;\n      }\n\n      result = cachedMaterial;\n    }\n\n    result.visible = material.visible;\n    result.wireframe = material.wireframe;\n    var side = material.side;\n\n    if (scope.renderSingleSided && side == THREE.DoubleSide) {\n      side = THREE.FrontSide;\n    }\n\n    if (scope.renderReverseSided) {\n      if (side === THREE.FrontSide) side = THREE.BackSide;else if (side === THREE.BackSide) side = THREE.FrontSide;\n    }\n\n    result.side = side;\n    result.clipShadows = material.clipShadows;\n    result.clippingPlanes = material.clippingPlanes;\n    result.wireframeLinewidth = material.wireframeLinewidth;\n    result.linewidth = material.linewidth;\n\n    if (isPointLight && result.uniforms.lightPos !== undefined) {\n      result.uniforms.lightPos.value.copy(lightPositionWorld);\n    }\n\n    return result;\n  }\n\n  function projectObject(object, camera, shadowCamera) {\n    if (object.visible === false) return;\n\n    if (object.layers.test(camera.layers) && (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points)) {\n      if (object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject(object) === true)) {\n        var material = object.material;\n\n        if (material.visible === true) {\n          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n          _renderList.push(object);\n        }\n      }\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i], camera, shadowCamera);\n    }\n  }\n}; // File:src/renderers/webgl/WebGLState.js\n\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\n\n\nTHREE.WebGLState = function (gl, extensions, paramThreeToGL) {\n  var _this = this;\n\n  this.buffers = {\n    color: new THREE.WebGLColorBuffer(gl, this),\n    depth: new THREE.WebGLDepthBuffer(gl, this),\n    stencil: new THREE.WebGLStencilBuffer(gl, this)\n  };\n  var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  var newAttributes = new Uint8Array(maxVertexAttributes);\n  var enabledAttributes = new Uint8Array(maxVertexAttributes);\n  var attributeDivisors = new Uint8Array(maxVertexAttributes);\n  var capabilities = {};\n  var compressedTextureFormats = null;\n  var currentBlending = null;\n  var currentBlendEquation = null;\n  var currentBlendSrc = null;\n  var currentBlendDst = null;\n  var currentBlendEquationAlpha = null;\n  var currentBlendSrcAlpha = null;\n  var currentBlendDstAlpha = null;\n  var currentPremultipledAlpha = false;\n  var currentFlipSided = null;\n  var currentCullFace = null;\n  var currentLineWidth = null;\n  var currentPolygonOffsetFactor = null;\n  var currentPolygonOffsetUnits = null;\n  var currentScissorTest = null;\n  var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  var currentTextureSlot = null;\n  var currentBoundTextures = {};\n  var currentScissor = new THREE.Vector4();\n  var currentViewport = new THREE.Vector4();\n\n  function createTexture(type, target, count) {\n    var data = new Uint8Array(3);\n    var texture = gl.createTexture();\n    gl.bindTexture(type, texture);\n    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    for (var i = 0; i < count; i++) {\n      gl.texImage2D(target + i, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, data);\n    }\n\n    return texture;\n  }\n\n  var emptyTextures = {};\n  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); //\n\n  this.init = function () {\n    this.clearColor(0, 0, 0, 1);\n    this.clearDepth(1);\n    this.clearStencil(0);\n    this.enable(gl.DEPTH_TEST);\n    this.setDepthFunc(THREE.LessEqualDepth);\n    this.setFlipSided(false);\n    this.setCullFace(THREE.CullFaceBack);\n    this.enable(gl.CULL_FACE);\n    this.enable(gl.BLEND);\n    this.setBlending(THREE.NormalBlending);\n  };\n\n  this.initAttributes = function () {\n    for (var i = 0, l = newAttributes.length; i < l; i++) {\n      newAttributes[i] = 0;\n    }\n  };\n\n  this.enableAttribute = function (attribute) {\n    newAttributes[attribute] = 1;\n\n    if (enabledAttributes[attribute] === 0) {\n      gl.enableVertexAttribArray(attribute);\n      enabledAttributes[attribute] = 1;\n    }\n\n    if (attributeDivisors[attribute] !== 0) {\n      var extension = extensions.get('ANGLE_instanced_arrays');\n      extension.vertexAttribDivisorANGLE(attribute, 0);\n      attributeDivisors[attribute] = 0;\n    }\n  };\n\n  this.enableAttributeAndDivisor = function (attribute, meshPerAttribute, extension) {\n    newAttributes[attribute] = 1;\n\n    if (enabledAttributes[attribute] === 0) {\n      gl.enableVertexAttribArray(attribute);\n      enabledAttributes[attribute] = 1;\n    }\n\n    if (attributeDivisors[attribute] !== meshPerAttribute) {\n      extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);\n      attributeDivisors[attribute] = meshPerAttribute;\n    }\n  };\n\n  this.disableUnusedAttributes = function () {\n    for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {\n      if (enabledAttributes[i] !== newAttributes[i]) {\n        gl.disableVertexAttribArray(i);\n        enabledAttributes[i] = 0;\n      }\n    }\n  };\n\n  this.enable = function (id) {\n    if (capabilities[id] !== true) {\n      gl.enable(id);\n      capabilities[id] = true;\n    }\n  };\n\n  this.disable = function (id) {\n    if (capabilities[id] !== false) {\n      gl.disable(id);\n      capabilities[id] = false;\n    }\n  };\n\n  this.getCompressedTextureFormats = function () {\n    if (compressedTextureFormats === null) {\n      compressedTextureFormats = [];\n\n      if (extensions.get('WEBGL_compressed_texture_pvrtc') || extensions.get('WEBGL_compressed_texture_s3tc') || extensions.get('WEBGL_compressed_texture_etc1')) {\n        var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\n\n        for (var i = 0; i < formats.length; i++) {\n          compressedTextureFormats.push(formats[i]);\n        }\n      }\n    }\n\n    return compressedTextureFormats;\n  };\n\n  this.setBlending = function (blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n    if (blending !== THREE.NoBlending) {\n      this.enable(gl.BLEND);\n    } else {\n      this.disable(gl.BLEND);\n      currentBlending = blending; // no blending, that is\n\n      return;\n    }\n\n    if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n      if (blending === THREE.AdditiveBlending) {\n        if (premultipliedAlpha) {\n          gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n          gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n        } else {\n          gl.blendEquation(gl.FUNC_ADD);\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n        }\n      } else if (blending === THREE.SubtractiveBlending) {\n        if (premultipliedAlpha) {\n          gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n          gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n        } else {\n          gl.blendEquation(gl.FUNC_ADD);\n          gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n        }\n      } else if (blending === THREE.MultiplyBlending) {\n        if (premultipliedAlpha) {\n          gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n          gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n        } else {\n          gl.blendEquation(gl.FUNC_ADD);\n          gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n        }\n      } else {\n        if (premultipliedAlpha) {\n          gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n          gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        } else {\n          gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n          gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        }\n      }\n\n      currentBlending = blending;\n      currentPremultipledAlpha = premultipliedAlpha;\n    }\n\n    if (blending === THREE.CustomBlending) {\n      blendEquationAlpha = blendEquationAlpha || blendEquation;\n      blendSrcAlpha = blendSrcAlpha || blendSrc;\n      blendDstAlpha = blendDstAlpha || blendDst;\n\n      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n        gl.blendEquationSeparate(paramThreeToGL(blendEquation), paramThreeToGL(blendEquationAlpha));\n        currentBlendEquation = blendEquation;\n        currentBlendEquationAlpha = blendEquationAlpha;\n      }\n\n      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n        gl.blendFuncSeparate(paramThreeToGL(blendSrc), paramThreeToGL(blendDst), paramThreeToGL(blendSrcAlpha), paramThreeToGL(blendDstAlpha));\n        currentBlendSrc = blendSrc;\n        currentBlendDst = blendDst;\n        currentBlendSrcAlpha = blendSrcAlpha;\n        currentBlendDstAlpha = blendDstAlpha;\n      }\n    } else {\n      currentBlendEquation = null;\n      currentBlendSrc = null;\n      currentBlendDst = null;\n      currentBlendEquationAlpha = null;\n      currentBlendSrcAlpha = null;\n      currentBlendDstAlpha = null;\n    }\n  }; // TODO Deprecate\n\n\n  this.setColorWrite = function (colorWrite) {\n    this.buffers.color.setMask(colorWrite);\n  };\n\n  this.setDepthTest = function (depthTest) {\n    this.buffers.depth.setTest(depthTest);\n  };\n\n  this.setDepthWrite = function (depthWrite) {\n    this.buffers.depth.setMask(depthWrite);\n  };\n\n  this.setDepthFunc = function (depthFunc) {\n    this.buffers.depth.setFunc(depthFunc);\n  };\n\n  this.setStencilTest = function (stencilTest) {\n    this.buffers.stencil.setTest(stencilTest);\n  };\n\n  this.setStencilWrite = function (stencilWrite) {\n    this.buffers.stencil.setMask(stencilWrite);\n  };\n\n  this.setStencilFunc = function (stencilFunc, stencilRef, stencilMask) {\n    this.buffers.stencil.setFunc(stencilFunc, stencilRef, stencilMask);\n  };\n\n  this.setStencilOp = function (stencilFail, stencilZFail, stencilZPass) {\n    this.buffers.stencil.setOp(stencilFail, stencilZFail, stencilZPass);\n  }; //\n\n\n  this.setFlipSided = function (flipSided) {\n    if (currentFlipSided !== flipSided) {\n      if (flipSided) {\n        gl.frontFace(gl.CW);\n      } else {\n        gl.frontFace(gl.CCW);\n      }\n\n      currentFlipSided = flipSided;\n    }\n  };\n\n  this.setCullFace = function (cullFace) {\n    if (cullFace !== THREE.CullFaceNone) {\n      this.enable(gl.CULL_FACE);\n\n      if (cullFace !== currentCullFace) {\n        if (cullFace === THREE.CullFaceBack) {\n          gl.cullFace(gl.BACK);\n        } else if (cullFace === THREE.CullFaceFront) {\n          gl.cullFace(gl.FRONT);\n        } else {\n          gl.cullFace(gl.FRONT_AND_BACK);\n        }\n      }\n    } else {\n      this.disable(gl.CULL_FACE);\n    }\n\n    currentCullFace = cullFace;\n  };\n\n  this.setLineWidth = function (width) {\n    if (width !== currentLineWidth) {\n      gl.lineWidth(width);\n      currentLineWidth = width;\n    }\n  };\n\n  this.setPolygonOffset = function (polygonOffset, factor, units) {\n    if (polygonOffset) {\n      this.enable(gl.POLYGON_OFFSET_FILL);\n\n      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n        gl.polygonOffset(factor, units);\n        currentPolygonOffsetFactor = factor;\n        currentPolygonOffsetUnits = units;\n      }\n    } else {\n      this.disable(gl.POLYGON_OFFSET_FILL);\n    }\n  };\n\n  this.getScissorTest = function () {\n    return currentScissorTest;\n  };\n\n  this.setScissorTest = function (scissorTest) {\n    currentScissorTest = scissorTest;\n\n    if (scissorTest) {\n      this.enable(gl.SCISSOR_TEST);\n    } else {\n      this.disable(gl.SCISSOR_TEST);\n    }\n  }; // texture\n\n\n  this.activeTexture = function (webglSlot) {\n    if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n    if (currentTextureSlot !== webglSlot) {\n      gl.activeTexture(webglSlot);\n      currentTextureSlot = webglSlot;\n    }\n  };\n\n  this.bindTexture = function (webglType, webglTexture) {\n    if (currentTextureSlot === null) {\n      _this.activeTexture();\n    }\n\n    var boundTexture = currentBoundTextures[currentTextureSlot];\n\n    if (boundTexture === undefined) {\n      boundTexture = {\n        type: undefined,\n        texture: undefined\n      };\n      currentBoundTextures[currentTextureSlot] = boundTexture;\n    }\n\n    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n      boundTexture.type = webglType;\n      boundTexture.texture = webglTexture;\n    }\n  };\n\n  this.compressedTexImage2D = function () {\n    try {\n      gl.compressedTexImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  this.texImage2D = function () {\n    try {\n      gl.texImage2D.apply(gl, arguments);\n    } catch (error) {\n      console.error(error);\n    }\n  }; // TODO Deprecate\n\n\n  this.clearColor = function (r, g, b, a) {\n    this.buffers.color.setClear(r, g, b, a);\n  };\n\n  this.clearDepth = function (depth) {\n    this.buffers.depth.setClear(depth);\n  };\n\n  this.clearStencil = function (stencil) {\n    this.buffers.stencil.setClear(stencil);\n  }; //\n\n\n  this.scissor = function (scissor) {\n    if (currentScissor.equals(scissor) === false) {\n      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n      currentScissor.copy(scissor);\n    }\n  };\n\n  this.viewport = function (viewport) {\n    if (currentViewport.equals(viewport) === false) {\n      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n      currentViewport.copy(viewport);\n    }\n  }; //\n\n\n  this.reset = function () {\n    for (var i = 0; i < enabledAttributes.length; i++) {\n      if (enabledAttributes[i] === 1) {\n        gl.disableVertexAttribArray(i);\n        enabledAttributes[i] = 0;\n      }\n    }\n\n    capabilities = {};\n    compressedTextureFormats = null;\n    currentTextureSlot = null;\n    currentBoundTextures = {};\n    currentBlending = null;\n    currentFlipSided = null;\n    currentCullFace = null;\n    this.buffers.color.reset();\n    this.buffers.depth.reset();\n    this.buffers.stencil.reset();\n  };\n};\n\nTHREE.WebGLColorBuffer = function (gl, state) {\n  var locked = false;\n  var color = new THREE.Vector4();\n  var currentColorMask = null;\n  var currentColorClear = new THREE.Vector4();\n\n  this.setMask = function (colorMask) {\n    if (currentColorMask !== colorMask && !locked) {\n      gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n      currentColorMask = colorMask;\n    }\n  };\n\n  this.setLocked = function (lock) {\n    locked = lock;\n  };\n\n  this.setClear = function (r, g, b, a) {\n    color.set(r, g, b, a);\n\n    if (currentColorClear.equals(color) === false) {\n      gl.clearColor(r, g, b, a);\n      currentColorClear.copy(color);\n    }\n  };\n\n  this.reset = function () {\n    locked = false;\n    currentColorMask = null;\n    currentColorClear = new THREE.Vector4();\n  };\n};\n\nTHREE.WebGLDepthBuffer = function (gl, state) {\n  var locked = false;\n  var currentDepthMask = null;\n  var currentDepthFunc = null;\n  var currentDepthClear = null;\n\n  this.setTest = function (depthTest) {\n    if (depthTest) {\n      state.enable(gl.DEPTH_TEST);\n    } else {\n      state.disable(gl.DEPTH_TEST);\n    }\n  };\n\n  this.setMask = function (depthMask) {\n    if (currentDepthMask !== depthMask && !locked) {\n      gl.depthMask(depthMask);\n      currentDepthMask = depthMask;\n    }\n  };\n\n  this.setFunc = function (depthFunc) {\n    if (currentDepthFunc !== depthFunc) {\n      if (depthFunc) {\n        switch (depthFunc) {\n          case THREE.NeverDepth:\n            gl.depthFunc(gl.NEVER);\n            break;\n\n          case THREE.AlwaysDepth:\n            gl.depthFunc(gl.ALWAYS);\n            break;\n\n          case THREE.LessDepth:\n            gl.depthFunc(gl.LESS);\n            break;\n\n          case THREE.LessEqualDepth:\n            gl.depthFunc(gl.LEQUAL);\n            break;\n\n          case THREE.EqualDepth:\n            gl.depthFunc(gl.EQUAL);\n            break;\n\n          case THREE.GreaterEqualDepth:\n            gl.depthFunc(gl.GEQUAL);\n            break;\n\n          case THREE.GreaterDepth:\n            gl.depthFunc(gl.GREATER);\n            break;\n\n          case THREE.NotEqualDepth:\n            gl.depthFunc(gl.NOTEQUAL);\n            break;\n\n          default:\n            gl.depthFunc(gl.LEQUAL);\n        }\n      } else {\n        gl.depthFunc(gl.LEQUAL);\n      }\n\n      currentDepthFunc = depthFunc;\n    }\n  };\n\n  this.setLocked = function (lock) {\n    locked = lock;\n  };\n\n  this.setClear = function (depth) {\n    if (currentDepthClear !== depth) {\n      gl.clearDepth(depth);\n      currentDepthClear = depth;\n    }\n  };\n\n  this.reset = function () {\n    locked = false;\n    currentDepthMask = null;\n    currentDepthFunc = null;\n    currentDepthClear = null;\n  };\n};\n\nTHREE.WebGLStencilBuffer = function (gl, state) {\n  var locked = false;\n  var currentStencilMask = null;\n  var currentStencilFunc = null;\n  var currentStencilRef = null;\n  var currentStencilFuncMask = null;\n  var currentStencilFail = null;\n  var currentStencilZFail = null;\n  var currentStencilZPass = null;\n  var currentStencilClear = null;\n\n  this.setTest = function (stencilTest) {\n    if (stencilTest) {\n      state.enable(gl.STENCIL_TEST);\n    } else {\n      state.disable(gl.STENCIL_TEST);\n    }\n  };\n\n  this.setMask = function (stencilMask) {\n    if (currentStencilMask !== stencilMask && !locked) {\n      gl.stencilMask(stencilMask);\n      currentStencilMask = stencilMask;\n    }\n  };\n\n  this.setFunc = function (stencilFunc, stencilRef, stencilMask) {\n    if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n      gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n      currentStencilFunc = stencilFunc;\n      currentStencilRef = stencilRef;\n      currentStencilFuncMask = stencilMask;\n    }\n  };\n\n  this.setOp = function (stencilFail, stencilZFail, stencilZPass) {\n    if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n      gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n      currentStencilFail = stencilFail;\n      currentStencilZFail = stencilZFail;\n      currentStencilZPass = stencilZPass;\n    }\n  };\n\n  this.setLocked = function (lock) {\n    locked = lock;\n  };\n\n  this.setClear = function (stencil) {\n    if (currentStencilClear !== stencil) {\n      gl.clearStencil(stencil);\n      currentStencilClear = stencil;\n    }\n  };\n\n  this.reset = function () {\n    locked = false;\n    currentStencilMask = null;\n    currentStencilFunc = null;\n    currentStencilRef = null;\n    currentStencilFuncMask = null;\n    currentStencilFail = null;\n    currentStencilZFail = null;\n    currentStencilZPass = null;\n    currentStencilClear = null;\n  };\n}; // File:src/renderers/webgl/WebGLUniforms.js\n\n/**\r\n *\r\n * Uniforms of a program.\r\n * Those form a tree structure with a special top-level container for the root,\r\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\r\n *\r\n *\r\n * Properties of inner nodes including the top-level container:\r\n *\r\n * .seq - array of nested uniforms\r\n * .map - nested uniforms by name\r\n *\r\n *\r\n * Methods of all nodes except the top-level container:\r\n *\r\n * .setValue( gl, value, [renderer] )\r\n *\r\n * \t\tuploads a uniform value(s)\r\n *  \tthe 'renderer' parameter is needed for sampler uniforms\r\n *\r\n *\r\n * Static methods of the top-level container (renderer factorizations):\r\n *\r\n * .upload( gl, seq, values, renderer )\r\n *\r\n * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n *\r\n * .seqWithValue( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with corresponding entry in values\r\n *\r\n * .splitDynamic( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\r\n *\r\n *\r\n * Methods of the top-level container (renderer factorizations):\r\n *\r\n * .setValue( gl, name, value )\r\n *\r\n * \t\tsets uniform with  name 'name' to 'value'\r\n *\r\n * .set( gl, obj, prop )\r\n *\r\n * \t\tsets uniform from object and property with same name than uniform\r\n *\r\n * .setOptional( gl, obj, prop )\r\n *\r\n * \t\tlike .set for an optional property of the object\r\n *\r\n *\r\n * @author tschw\r\n *\r\n */\n\n\nTHREE.WebGLUniforms = function () {\n  // scope\n  // --- Base for inner nodes (including the root) ---\n  var UniformContainer = function UniformContainer() {\n    this.seq = [];\n    this.map = {};\n  },\n      // --- Utilities ---\n  // Array Caches (provide typed arrays for temporary by size)\n  arrayCacheF32 = [],\n      arrayCacheI32 = [],\n      uncacheTemporaryArrays = function uncacheTemporaryArrays() {\n    arrayCacheF32.length = 0;\n    arrayCacheI32.length = 0;\n  },\n      // Flattening for arrays of vectors and matrices\n  flatten = function flatten(array, nBlocks, blockSize) {\n    var firstElem = array[0];\n    if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n    // see http://jacksondunstan.com/articles/983\n\n    var n = nBlocks * blockSize,\n        r = arrayCacheF32[n];\n\n    if (r === undefined) {\n      r = new Float32Array(n);\n      arrayCacheF32[n] = r;\n    }\n\n    if (nBlocks !== 0) {\n      firstElem.toArray(r, 0);\n\n      for (var i = 1, offset = 0; i !== nBlocks; ++i) {\n        offset += blockSize;\n        array[i].toArray(r, offset);\n      }\n    }\n\n    return r;\n  },\n      // Texture unit allocation\n  allocTexUnits = function allocTexUnits(renderer, n) {\n    var r = arrayCacheI32[n];\n\n    if (r === undefined) {\n      r = new Int32Array(n);\n      arrayCacheI32[n] = r;\n    }\n\n    for (var i = 0; i !== n; ++i) {\n      r[i] = renderer.allocTextureUnit();\n    }\n\n    return r;\n  },\n      // --- Setters ---\n  // Note: Defining these methods externally, because they come in a bunch\n  // and this way their names minify.\n  // Single scalar\n  setValue1f = function setValue1f(gl, v) {\n    gl.uniform1f(this.addr, v);\n  },\n      setValue1i = function setValue1i(gl, v) {\n    gl.uniform1i(this.addr, v);\n  },\n      // Single float vector (from flat array or THREE.VectorN)\n  setValue2fv = function setValue2fv(gl, v) {\n    if (v.x === undefined) gl.uniform2fv(this.addr, v);else gl.uniform2f(this.addr, v.x, v.y);\n  },\n      setValue3fv = function setValue3fv(gl, v) {\n    if (v.x !== undefined) gl.uniform3f(this.addr, v.x, v.y, v.z);else if (v.r !== undefined) gl.uniform3f(this.addr, v.r, v.g, v.b);else gl.uniform3fv(this.addr, v);\n  },\n      setValue4fv = function setValue4fv(gl, v) {\n    if (v.x === undefined) gl.uniform4fv(this.addr, v);else gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n  },\n      // Single matrix (from flat array or MatrixN)\n  setValue2fm = function setValue2fm(gl, v) {\n    gl.uniformMatrix2fv(this.addr, false, v.elements || v);\n  },\n      setValue3fm = function setValue3fm(gl, v) {\n    gl.uniformMatrix3fv(this.addr, false, v.elements || v);\n  },\n      setValue4fm = function setValue4fm(gl, v) {\n    gl.uniformMatrix4fv(this.addr, false, v.elements || v);\n  },\n      // Single texture (2D / Cube)\n  setValueT1 = function setValueT1(gl, v, renderer) {\n    var unit = renderer.allocTextureUnit();\n    gl.uniform1i(this.addr, unit);\n    if (v) renderer.setTexture2D(v, unit);\n  },\n      setValueT6 = function setValueT6(gl, v, renderer) {\n    var unit = renderer.allocTextureUnit();\n    gl.uniform1i(this.addr, unit);\n    if (v) renderer.setTextureCube(v, unit);\n  },\n      // Integer / Boolean vectors or arrays thereof (always flat arrays)\n  setValue2iv = function setValue2iv(gl, v) {\n    gl.uniform2iv(this.addr, v);\n  },\n      setValue3iv = function setValue3iv(gl, v) {\n    gl.uniform3iv(this.addr, v);\n  },\n      setValue4iv = function setValue4iv(gl, v) {\n    gl.uniform4iv(this.addr, v);\n  },\n      // Helper to pick the right setter for the singular case\n  getSingularSetter = function getSingularSetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValue1f;\n      // FLOAT\n\n      case 0x8b50:\n        return setValue2fv;\n      // _VEC2\n\n      case 0x8b51:\n        return setValue3fv;\n      // _VEC3\n\n      case 0x8b52:\n        return setValue4fv;\n      // _VEC4\n\n      case 0x8b5a:\n        return setValue2fm;\n      // _MAT2\n\n      case 0x8b5b:\n        return setValue3fm;\n      // _MAT3\n\n      case 0x8b5c:\n        return setValue4fm;\n      // _MAT4\n\n      case 0x8b5e:\n        return setValueT1;\n      // SAMPLER_2D\n\n      case 0x8b60:\n        return setValueT6;\n      // SAMPLER_CUBE\n\n      case 0x1404:\n      case 0x8b56:\n        return setValue1i;\n      // INT, BOOL\n\n      case 0x8b53:\n      case 0x8b57:\n        return setValue2iv;\n      // _VEC2\n\n      case 0x8b54:\n      case 0x8b58:\n        return setValue3iv;\n      // _VEC3\n\n      case 0x8b55:\n      case 0x8b59:\n        return setValue4iv;\n      // _VEC4\n    }\n  },\n      // Array of scalars\n  setValue1fv = function setValue1fv(gl, v) {\n    gl.uniform1fv(this.addr, v);\n  },\n      setValue1iv = function setValue1iv(gl, v) {\n    gl.uniform1iv(this.addr, v);\n  },\n      // Array of vectors (flat or from THREE classes)\n  setValueV2a = function setValueV2a(gl, v) {\n    gl.uniform2fv(this.addr, flatten(v, this.size, 2));\n  },\n      setValueV3a = function setValueV3a(gl, v) {\n    gl.uniform3fv(this.addr, flatten(v, this.size, 3));\n  },\n      setValueV4a = function setValueV4a(gl, v) {\n    gl.uniform4fv(this.addr, flatten(v, this.size, 4));\n  },\n      // Array of matrices (flat or from THREE clases)\n  setValueM2a = function setValueM2a(gl, v) {\n    gl.uniformMatrix2fv(this.addr, false, flatten(v, this.size, 4));\n  },\n      setValueM3a = function setValueM3a(gl, v) {\n    gl.uniformMatrix3fv(this.addr, false, flatten(v, this.size, 9));\n  },\n      setValueM4a = function setValueM4a(gl, v) {\n    gl.uniformMatrix4fv(this.addr, false, flatten(v, this.size, 16));\n  },\n      // Array of textures (2D / Cube)\n  setValueT1a = function setValueT1a(gl, v, renderer) {\n    var n = v.length,\n        units = allocTexUnits(renderer, n);\n    gl.uniform1iv(this.addr, units);\n\n    for (var i = 0; i !== n; ++i) {\n      var tex = v[i];\n      if (tex) renderer.setTexture2D(tex, units[i]);\n    }\n  },\n      setValueT6a = function setValueT6a(gl, v, renderer) {\n    var n = v.length,\n        units = allocTexUnits(renderer, n);\n    gl.uniform1iv(this.addr, units);\n\n    for (var i = 0; i !== n; ++i) {\n      var tex = v[i];\n      if (tex) renderer.setTextureCube(tex, units[i]);\n    }\n  },\n      // Helper to pick the right setter for a pure (bottom-level) array\n  getPureArraySetter = function getPureArraySetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValue1fv;\n      // FLOAT\n\n      case 0x8b50:\n        return setValueV2a;\n      // _VEC2\n\n      case 0x8b51:\n        return setValueV3a;\n      // _VEC3\n\n      case 0x8b52:\n        return setValueV4a;\n      // _VEC4\n\n      case 0x8b5a:\n        return setValueM2a;\n      // _MAT2\n\n      case 0x8b5b:\n        return setValueM3a;\n      // _MAT3\n\n      case 0x8b5c:\n        return setValueM4a;\n      // _MAT4\n\n      case 0x8b5e:\n        return setValueT1a;\n      // SAMPLER_2D\n\n      case 0x8b60:\n        return setValueT6a;\n      // SAMPLER_CUBE\n\n      case 0x1404:\n      case 0x8b56:\n        return setValue1iv;\n      // INT, BOOL\n\n      case 0x8b53:\n      case 0x8b57:\n        return setValue2iv;\n      // _VEC2\n\n      case 0x8b54:\n      case 0x8b58:\n        return setValue3iv;\n      // _VEC3\n\n      case 0x8b55:\n      case 0x8b59:\n        return setValue4iv;\n      // _VEC4\n    }\n  },\n      // --- Uniform Classes ---\n  SingleUniform = function SingleUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n  },\n      PureArrayUniform = function PureArrayUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.size = activeInfo.size;\n    this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n  },\n      StructuredUniform = function StructuredUniform(id) {\n    this.id = id;\n    UniformContainer.call(this); // mix-in\n  };\n\n  StructuredUniform.prototype.setValue = function (gl, value) {\n    // Note: Don't need an extra 'renderer' parameter, since samplers\n    // are not allowed in structured uniforms.\n    var seq = this.seq;\n\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i];\n      u.setValue(gl, value[u.id]);\n    }\n  }; // --- Top-level ---\n  // Parser - builds up the property tree from the path strings\n\n\n  var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n      // extracts\n  // \t- the identifier (member name or array index)\n  //  - followed by an optional right bracket (found when array index)\n  //  - followed by an optional left bracket or dot (type of subscript)\n  //\n  // Note: These portions can be read in a non-overlapping fashion and\n  // allow straightforward parsing of the hierarchy that WebGL encodes\n  // in the uniform names.\n  addUniform = function addUniform(container, uniformObject) {\n    container.seq.push(uniformObject);\n    container.map[uniformObject.id] = uniformObject;\n  },\n      parseUniform = function parseUniform(activeInfo, addr, container) {\n    var path = activeInfo.name,\n        pathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n    RePathPart.lastIndex = 0;\n\n    for (;;) {\n      var match = RePathPart.exec(path),\n          matchEnd = RePathPart.lastIndex,\n          id = match[1],\n          idIsIndex = match[2] === ']',\n          subscript = match[3];\n      if (idIsIndex) id = id | 0; // convert to integer\n\n      if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n        // bare name or \"pure\" bottom-level array \"[0]\" suffix\n        addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n        break;\n      } else {\n        // step into inner node / create it in case it doesn't exist\n        var map = container.map,\n            next = map[id];\n\n        if (next === undefined) {\n          next = new StructuredUniform(id);\n          addUniform(container, next);\n        }\n\n        container = next;\n      }\n    }\n  },\n      // Root Container\n  WebGLUniforms = function WebGLUniforms(gl, program, renderer) {\n    UniformContainer.call(this);\n    this.renderer = renderer;\n    var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (var i = 0; i !== n; ++i) {\n      var info = gl.getActiveUniform(program, i),\n          path = info.name,\n          addr = gl.getUniformLocation(program, path);\n      parseUniform(info, addr, this);\n    }\n  };\n\n  WebGLUniforms.prototype.setValue = function (gl, name, value) {\n    var u = this.map[name];\n    if (u !== undefined) u.setValue(gl, value, this.renderer);\n  };\n\n  WebGLUniforms.prototype.set = function (gl, object, name) {\n    var u = this.map[name];\n    if (u !== undefined) u.setValue(gl, object[name], this.renderer);\n  };\n\n  WebGLUniforms.prototype.setOptional = function (gl, object, name) {\n    var v = object[name];\n    if (v !== undefined) this.setValue(gl, name, v);\n  }; // Static interface\n\n\n  WebGLUniforms.upload = function (gl, seq, values, renderer) {\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i],\n          v = values[u.id];\n\n      if (v.needsUpdate !== false) {\n        // note: always updating when .needsUpdate is undefined\n        u.setValue(gl, v.value, renderer);\n      }\n    }\n  };\n\n  WebGLUniforms.seqWithValue = function (seq, values) {\n    var r = [];\n\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i];\n      if (u.id in values) r.push(u);\n    }\n\n    return r;\n  };\n\n  WebGLUniforms.splitDynamic = function (seq, values) {\n    var r = null,\n        n = seq.length,\n        w = 0;\n\n    for (var i = 0; i !== n; ++i) {\n      var u = seq[i],\n          v = values[u.id];\n\n      if (v && v.dynamic === true) {\n        if (r === null) r = [];\n        r.push(u);\n      } else {\n        // in-place compact 'seq', removing the matches\n        if (w < i) seq[w] = u;\n        ++w;\n      }\n    }\n\n    if (w < n) seq.length = w;\n    return r;\n  };\n\n  WebGLUniforms.evalDynamic = function (seq, values, object, camera) {\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var v = values[seq[i].id],\n          f = v.onUpdateCallback;\n      if (f !== undefined) f.call(v, object, camera);\n    }\n  };\n\n  return WebGLUniforms;\n}(); // File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n\nTHREE.LensFlarePlugin = function (renderer, flares) {\n  var gl = renderer.context;\n  var state = renderer.state;\n  var vertexBuffer, elementBuffer;\n  var shader, program, attributes, uniforms;\n  var tempTexture, occlusionTexture;\n\n  function init() {\n    var vertices = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]);\n    var faces = new Uint16Array([0, 1, 2, 0, 2, 3]); // buffers\n\n    vertexBuffer = gl.createBuffer();\n    elementBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW); // textures\n\n    tempTexture = gl.createTexture();\n    occlusionTexture = gl.createTexture();\n    state.bindTexture(gl.TEXTURE_2D, tempTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    state.bindTexture(gl.TEXTURE_2D, occlusionTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    shader = {\n      vertexShader: [\"uniform lowp int renderType;\", \"uniform vec3 screenPosition;\", \"uniform vec2 scale;\", \"uniform float rotation;\", \"uniform sampler2D occlusionMap;\", \"attribute vec2 position;\", \"attribute vec2 uv;\", \"varying vec2 vUV;\", \"varying float vVisibility;\", \"void main() {\", \"vUV = uv;\", \"vec2 pos = position;\", \"if ( renderType == 2 ) {\", \"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\", \"vVisibility =        visibility.r / 9.0;\", \"vVisibility *= 1.0 - visibility.g / 9.0;\", \"vVisibility *=       visibility.b / 9.0;\", \"vVisibility *= 1.0 - visibility.a / 9.0;\", \"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\", \"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\", \"}\", \"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\", \"}\"].join(\"\\n\"),\n      fragmentShader: [\"uniform lowp int renderType;\", \"uniform sampler2D map;\", \"uniform float opacity;\", \"uniform vec3 color;\", \"varying vec2 vUV;\", \"varying float vVisibility;\", \"void main() {\", // pink square\n      \"if ( renderType == 0 ) {\", \"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\", // restore\n      \"} else if ( renderType == 1 ) {\", \"gl_FragColor = texture2D( map, vUV );\", // flare\n      \"} else {\", \"vec4 texture = texture2D( map, vUV );\", \"texture.a *= opacity * vVisibility;\", \"gl_FragColor = texture;\", \"gl_FragColor.rgb *= color;\", \"}\", \"}\"].join(\"\\n\")\n    };\n    program = createProgram(shader);\n    attributes = {\n      vertex: gl.getAttribLocation(program, \"position\"),\n      uv: gl.getAttribLocation(program, \"uv\")\n    };\n    uniforms = {\n      renderType: gl.getUniformLocation(program, \"renderType\"),\n      map: gl.getUniformLocation(program, \"map\"),\n      occlusionMap: gl.getUniformLocation(program, \"occlusionMap\"),\n      opacity: gl.getUniformLocation(program, \"opacity\"),\n      color: gl.getUniformLocation(program, \"color\"),\n      scale: gl.getUniformLocation(program, \"scale\"),\n      rotation: gl.getUniformLocation(program, \"rotation\"),\n      screenPosition: gl.getUniformLocation(program, \"screenPosition\")\n    };\n  }\n  /*\r\n   * Render lens flares\r\n   * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n   *         reads these back and calculates occlusion.\r\n   */\n\n\n  this.render = function (scene, camera, viewport) {\n    if (flares.length === 0) return;\n    var tempPosition = new THREE.Vector3();\n    var invAspect = viewport.w / viewport.z,\n        halfViewportWidth = viewport.z * 0.5,\n        halfViewportHeight = viewport.w * 0.5;\n    var size = 16 / viewport.w,\n        scale = new THREE.Vector2(size * invAspect, size);\n    var screenPosition = new THREE.Vector3(1, 1, 0),\n        screenPositionPixels = new THREE.Vector2(1, 1);\n    var validArea = new THREE.Box2();\n    validArea.min.set(0, 0);\n    validArea.max.set(viewport.z - 16, viewport.w - 16);\n\n    if (program === undefined) {\n      init();\n    }\n\n    gl.useProgram(program);\n    state.initAttributes();\n    state.enableAttribute(attributes.vertex);\n    state.enableAttribute(attributes.uv);\n    state.disableUnusedAttributes(); // loop through all lens flares to update their occlusion and positions\n    // setup gl and common used attribs/uniforms\n\n    gl.uniform1i(uniforms.occlusionMap, 0);\n    gl.uniform1i(uniforms.map, 1);\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.vertexAttribPointer(attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0);\n    gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n    state.disable(gl.CULL_FACE);\n    state.setDepthWrite(false);\n\n    for (var i = 0, l = flares.length; i < l; i++) {\n      size = 16 / viewport.w;\n      scale.set(size * invAspect, size); // calc object screen position\n\n      var flare = flares[i];\n      tempPosition.set(flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14]);\n      tempPosition.applyMatrix4(camera.matrixWorldInverse);\n      tempPosition.applyProjection(camera.projectionMatrix); // setup arrays for gl programs\n\n      screenPosition.copy(tempPosition); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n      screenPositionPixels.x = viewport.x + screenPosition.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + screenPosition.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n      if (validArea.containsPoint(screenPositionPixels) === true) {\n        // save current RGB to temp texture\n        state.activeTexture(gl.TEXTURE0);\n        state.bindTexture(gl.TEXTURE_2D, null);\n        state.activeTexture(gl.TEXTURE1);\n        state.bindTexture(gl.TEXTURE_2D, tempTexture);\n        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0); // render pink quad\n\n        gl.uniform1i(uniforms.renderType, 0);\n        gl.uniform2f(uniforms.scale, scale.x, scale.y);\n        gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);\n        state.disable(gl.BLEND);\n        state.enable(gl.DEPTH_TEST);\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); // copy result to occlusionMap\n\n        state.activeTexture(gl.TEXTURE0);\n        state.bindTexture(gl.TEXTURE_2D, occlusionTexture);\n        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0); // restore graphics\n\n        gl.uniform1i(uniforms.renderType, 1);\n        state.disable(gl.DEPTH_TEST);\n        state.activeTexture(gl.TEXTURE1);\n        state.bindTexture(gl.TEXTURE_2D, tempTexture);\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); // update object positions\n\n        flare.positionScreen.copy(screenPosition);\n\n        if (flare.customUpdateCallback) {\n          flare.customUpdateCallback(flare);\n        } else {\n          flare.updateLensFlares();\n        } // render flares\n\n\n        gl.uniform1i(uniforms.renderType, 2);\n        state.enable(gl.BLEND);\n\n        for (var j = 0, jl = flare.lensFlares.length; j < jl; j++) {\n          var sprite = flare.lensFlares[j];\n\n          if (sprite.opacity > 0.001 && sprite.scale > 0.001) {\n            screenPosition.x = sprite.x;\n            screenPosition.y = sprite.y;\n            screenPosition.z = sprite.z;\n            size = sprite.size * sprite.scale / viewport.w;\n            scale.x = size * invAspect;\n            scale.y = size;\n            gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);\n            gl.uniform2f(uniforms.scale, scale.x, scale.y);\n            gl.uniform1f(uniforms.rotation, sprite.rotation);\n            gl.uniform1f(uniforms.opacity, sprite.opacity);\n            gl.uniform3f(uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b);\n            state.setBlending(sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst);\n            renderer.setTexture2D(sprite.texture, 1);\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n          }\n        }\n      }\n    } // restore gl\n\n\n    state.enable(gl.CULL_FACE);\n    state.enable(gl.DEPTH_TEST);\n    state.setDepthWrite(true);\n    renderer.resetGLState();\n  };\n\n  function createProgram(shader) {\n    var program = gl.createProgram();\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    var prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n    gl.shaderSource(fragmentShader, prefix + shader.fragmentShader);\n    gl.shaderSource(vertexShader, prefix + shader.vertexShader);\n    gl.compileShader(fragmentShader);\n    gl.compileShader(vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n    return program;\n  }\n}; // File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\n\nTHREE.SpritePlugin = function (renderer, sprites) {\n  var gl = renderer.context;\n  var state = renderer.state;\n  var vertexBuffer, elementBuffer;\n  var program, attributes, uniforms;\n  var texture; // decompose matrixWorld\n\n  var spritePosition = new THREE.Vector3();\n  var spriteRotation = new THREE.Quaternion();\n  var spriteScale = new THREE.Vector3();\n\n  function init() {\n    var vertices = new Float32Array([-0.5, -0.5, 0, 0, 0.5, -0.5, 1, 0, 0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1]);\n    var faces = new Uint16Array([0, 1, 2, 0, 2, 3]);\n    vertexBuffer = gl.createBuffer();\n    elementBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n    program = createProgram();\n    attributes = {\n      position: gl.getAttribLocation(program, 'position'),\n      uv: gl.getAttribLocation(program, 'uv')\n    };\n    uniforms = {\n      uvOffset: gl.getUniformLocation(program, 'uvOffset'),\n      uvScale: gl.getUniformLocation(program, 'uvScale'),\n      rotation: gl.getUniformLocation(program, 'rotation'),\n      scale: gl.getUniformLocation(program, 'scale'),\n      color: gl.getUniformLocation(program, 'color'),\n      map: gl.getUniformLocation(program, 'map'),\n      opacity: gl.getUniformLocation(program, 'opacity'),\n      modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),\n      projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),\n      fogType: gl.getUniformLocation(program, 'fogType'),\n      fogDensity: gl.getUniformLocation(program, 'fogDensity'),\n      fogNear: gl.getUniformLocation(program, 'fogNear'),\n      fogFar: gl.getUniformLocation(program, 'fogFar'),\n      fogColor: gl.getUniformLocation(program, 'fogColor'),\n      alphaTest: gl.getUniformLocation(program, 'alphaTest')\n    };\n    var canvas = document.createElement('canvas');\n    canvas.width = 8;\n    canvas.height = 8;\n    var context = canvas.getContext('2d');\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 8, 8);\n    texture = new THREE.Texture(canvas);\n    texture.needsUpdate = true;\n  }\n\n  this.render = function (scene, camera) {\n    if (sprites.length === 0) return; // setup gl\n\n    if (program === undefined) {\n      init();\n    }\n\n    gl.useProgram(program);\n    state.initAttributes();\n    state.enableAttribute(attributes.position);\n    state.enableAttribute(attributes.uv);\n    state.disableUnusedAttributes();\n    state.disable(gl.CULL_FACE);\n    state.enable(gl.BLEND);\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);\n    gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n    gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);\n    state.activeTexture(gl.TEXTURE0);\n    gl.uniform1i(uniforms.map, 0);\n    var oldFogType = 0;\n    var sceneFogType = 0;\n    var fog = scene.fog;\n\n    if (fog) {\n      gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);\n\n      if (fog instanceof THREE.Fog) {\n        gl.uniform1f(uniforms.fogNear, fog.near);\n        gl.uniform1f(uniforms.fogFar, fog.far);\n        gl.uniform1i(uniforms.fogType, 1);\n        oldFogType = 1;\n        sceneFogType = 1;\n      } else if (fog instanceof THREE.FogExp2) {\n        gl.uniform1f(uniforms.fogDensity, fog.density);\n        gl.uniform1i(uniforms.fogType, 2);\n        oldFogType = 2;\n        sceneFogType = 2;\n      }\n    } else {\n      gl.uniform1i(uniforms.fogType, 0);\n      oldFogType = 0;\n      sceneFogType = 0;\n    } // update positions and sort\n\n\n    for (var i = 0, l = sprites.length; i < l; i++) {\n      var sprite = sprites[i];\n      sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);\n      sprite.z = -sprite.modelViewMatrix.elements[14];\n    }\n\n    sprites.sort(painterSortStable); // render all sprites\n\n    var scale = [];\n\n    for (var i = 0, l = sprites.length; i < l; i++) {\n      var sprite = sprites[i];\n      var material = sprite.material;\n      gl.uniform1f(uniforms.alphaTest, material.alphaTest);\n      gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);\n      sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);\n      scale[0] = spriteScale.x;\n      scale[1] = spriteScale.y;\n      var fogType = 0;\n\n      if (scene.fog && material.fog) {\n        fogType = sceneFogType;\n      }\n\n      if (oldFogType !== fogType) {\n        gl.uniform1i(uniforms.fogType, fogType);\n        oldFogType = fogType;\n      }\n\n      if (material.map !== null) {\n        gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);\n        gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);\n      } else {\n        gl.uniform2f(uniforms.uvOffset, 0, 0);\n        gl.uniform2f(uniforms.uvScale, 1, 1);\n      }\n\n      gl.uniform1f(uniforms.opacity, material.opacity);\n      gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);\n      gl.uniform1f(uniforms.rotation, material.rotation);\n      gl.uniform2fv(uniforms.scale, scale);\n      state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst);\n      state.setDepthTest(material.depthTest);\n      state.setDepthWrite(material.depthWrite);\n\n      if (material.map) {\n        renderer.setTexture2D(material.map, 0);\n      } else {\n        renderer.setTexture2D(texture, 0);\n      }\n\n      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    } // restore gl\n\n\n    state.enable(gl.CULL_FACE);\n    renderer.resetGLState();\n  };\n\n  function createProgram() {\n    var program = gl.createProgram();\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(vertexShader, ['precision ' + renderer.getPrecision() + ' float;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform float rotation;', 'uniform vec2 scale;', 'uniform vec2 uvOffset;', 'uniform vec2 uvScale;', 'attribute vec2 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', 'vUV = uvOffset + uv * uvScale;', 'vec2 alignedPosition = position * scale;', 'vec2 rotatedPosition;', 'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;', 'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;', 'vec4 finalPosition;', 'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );', 'finalPosition.xy += rotatedPosition;', 'finalPosition = projectionMatrix * finalPosition;', 'gl_Position = finalPosition;', '}'].join('\\n'));\n    gl.shaderSource(fragmentShader, ['precision ' + renderer.getPrecision() + ' float;', 'uniform vec3 color;', 'uniform sampler2D map;', 'uniform float opacity;', 'uniform int fogType;', 'uniform vec3 fogColor;', 'uniform float fogDensity;', 'uniform float fogNear;', 'uniform float fogFar;', 'uniform float alphaTest;', 'varying vec2 vUV;', 'void main() {', 'vec4 texture = texture2D( map, vUV );', 'if ( texture.a < alphaTest ) discard;', 'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );', 'if ( fogType > 0 ) {', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', 'float fogFactor = 0.0;', 'if ( fogType == 1 ) {', 'fogFactor = smoothstep( fogNear, fogFar, depth );', '} else {', 'const float LOG2 = 1.442695;', 'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );', 'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );', '}', 'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );', '}', '}'].join('\\n'));\n    gl.compileShader(vertexShader);\n    gl.compileShader(fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    return program;\n  }\n\n  function painterSortStable(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else {\n      return b.id - a.id;\n    }\n  }\n}; // File:src/Three.Legacy.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nObject.assign(THREE, {\n  Face4: function Face4(a, b, c, d, normal, color, materialIndex) {\n    console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n    return new THREE.Face3(a, b, c, normal, color, materialIndex);\n  },\n  LineStrip: 0,\n  LinePieces: 1,\n  MeshFaceMaterial: THREE.MultiMaterial,\n  PointCloud: function PointCloud(geometry, material) {\n    console.warn('THREE.PointCloud has been renamed to THREE.Points.');\n    return new THREE.Points(geometry, material);\n  },\n  Particle: THREE.Sprite,\n  ParticleSystem: function ParticleSystem(geometry, material) {\n    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n    return new THREE.Points(geometry, material);\n  },\n  PointCloudMaterial: function PointCloudMaterial(parameters) {\n    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n    return new THREE.PointsMaterial(parameters);\n  },\n  ParticleBasicMaterial: function ParticleBasicMaterial(parameters) {\n    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n    return new THREE.PointsMaterial(parameters);\n  },\n  ParticleSystemMaterial: function ParticleSystemMaterial(parameters) {\n    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n    return new THREE.PointsMaterial(parameters);\n  },\n  Vertex: function Vertex(x, y, z) {\n    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n    return new THREE.Vector3(x, y, z);\n  }\n}); //\n\nObject.assign(THREE.Box2.prototype, {\n  empty: function empty() {\n    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n    return this.isEmpty();\n  },\n  isIntersectionBox: function isIntersectionBox(box) {\n    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  }\n});\nObject.assign(THREE.Box3.prototype, {\n  empty: function empty() {\n    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n    return this.isEmpty();\n  },\n  isIntersectionBox: function isIntersectionBox(box) {\n    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  },\n  isIntersectionSphere: function isIntersectionSphere(sphere) {\n    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n    return this.intersectsSphere(sphere);\n  }\n});\nObject.assign(THREE.Matrix3.prototype, {\n  multiplyVector3: function multiplyVector3(vector) {\n    console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n    return vector.applyMatrix3(this);\n  },\n  multiplyVector3Array: function multiplyVector3Array(a) {\n    console.warn('THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');\n    return this.applyToVector3Array(a);\n  }\n});\nObject.assign(THREE.Matrix4.prototype, {\n  extractPosition: function extractPosition(m) {\n    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n    return this.copyPosition(m);\n  },\n  setRotationFromQuaternion: function setRotationFromQuaternion(q) {\n    console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n    return this.makeRotationFromQuaternion(q);\n  },\n  multiplyVector3: function multiplyVector3(vector) {\n    console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.');\n    return vector.applyProjection(this);\n  },\n  multiplyVector4: function multiplyVector4(vector) {\n    console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n    return vector.applyMatrix4(this);\n  },\n  multiplyVector3Array: function multiplyVector3Array(a) {\n    console.warn('THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');\n    return this.applyToVector3Array(a);\n  },\n  rotateAxis: function rotateAxis(v) {\n    console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n    v.transformDirection(this);\n  },\n  crossVector: function crossVector(vector) {\n    console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n    return vector.applyMatrix4(this);\n  },\n  translate: function translate(v) {\n    console.error('THREE.Matrix4: .translate() has been removed.');\n  },\n  rotateX: function rotateX(angle) {\n    console.error('THREE.Matrix4: .rotateX() has been removed.');\n  },\n  rotateY: function rotateY(angle) {\n    console.error('THREE.Matrix4: .rotateY() has been removed.');\n  },\n  rotateZ: function rotateZ(angle) {\n    console.error('THREE.Matrix4: .rotateZ() has been removed.');\n  },\n  rotateByAxis: function rotateByAxis(axis, angle) {\n    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n  }\n});\nObject.assign(THREE.Plane.prototype, {\n  isIntersectionLine: function isIntersectionLine(line) {\n    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n    return this.intersectsLine(line);\n  }\n});\nObject.assign(THREE.Quaternion.prototype, {\n  multiplyVector3: function multiplyVector3(vector) {\n    console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n    return vector.applyQuaternion(this);\n  }\n});\nObject.assign(THREE.Ray.prototype, {\n  isIntersectionBox: function isIntersectionBox(box) {\n    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  },\n  isIntersectionPlane: function isIntersectionPlane(plane) {\n    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n    return this.intersectsPlane(plane);\n  },\n  isIntersectionSphere: function isIntersectionSphere(sphere) {\n    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n    return this.intersectsSphere(sphere);\n  }\n});\nObject.assign(THREE.Vector3.prototype, {\n  setEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n  },\n  setEulerFromQuaternion: function setEulerFromQuaternion() {\n    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n  },\n  getPositionFromMatrix: function getPositionFromMatrix(m) {\n    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n    return this.setFromMatrixPosition(m);\n  },\n  getScaleFromMatrix: function getScaleFromMatrix(m) {\n    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n    return this.setFromMatrixScale(m);\n  },\n  getColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n    return this.setFromMatrixColumn(matrix, index);\n  }\n}); //\n\nObject.assign(THREE.Object3D.prototype, {\n  getChildByName: function getChildByName(name) {\n    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n    return this.getObjectByName(name);\n  },\n  renderDepth: function renderDepth(value) {\n    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n  },\n  translate: function translate(distance, axis) {\n    console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n    return this.translateOnAxis(axis, distance);\n  }\n});\nObject.defineProperties(THREE.Object3D.prototype, {\n  eulerOrder: {\n    get: function get() {\n      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n      return this.rotation.order;\n    },\n    set: function set(value) {\n      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n      this.rotation.order = value;\n    }\n  },\n  useQuaternion: {\n    get: function get() {\n      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n    },\n    set: function set(value) {\n      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n    }\n  }\n});\nObject.defineProperties(THREE.LOD.prototype, {\n  objects: {\n    get: function get() {\n      console.warn('THREE.LOD: .objects has been renamed to .levels.');\n      return this.levels;\n    }\n  }\n}); //\n\nTHREE.PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n  console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. \" + \"Use .setFocalLength and .filmGauge for a photographic setup.\");\n  if (filmGauge !== undefined) this.filmGauge = filmGauge;\n  this.setFocalLength(focalLength);\n}; //\n\n\nObject.defineProperties(THREE.Light.prototype, {\n  onlyShadow: {\n    set: function set(value) {\n      console.warn('THREE.Light: .onlyShadow has been removed.');\n    }\n  },\n  shadowCameraFov: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n      this.shadow.camera.fov = value;\n    }\n  },\n  shadowCameraLeft: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n      this.shadow.camera.left = value;\n    }\n  },\n  shadowCameraRight: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n      this.shadow.camera.right = value;\n    }\n  },\n  shadowCameraTop: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n      this.shadow.camera.top = value;\n    }\n  },\n  shadowCameraBottom: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n      this.shadow.camera.bottom = value;\n    }\n  },\n  shadowCameraNear: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n      this.shadow.camera.near = value;\n    }\n  },\n  shadowCameraFar: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n      this.shadow.camera.far = value;\n    }\n  },\n  shadowCameraVisible: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n    }\n  },\n  shadowBias: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n      this.shadow.bias = value;\n    }\n  },\n  shadowDarkness: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowDarkness has been removed.');\n    }\n  },\n  shadowMapWidth: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n      this.shadow.mapSize.width = value;\n    }\n  },\n  shadowMapHeight: {\n    set: function set(value) {\n      console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n      this.shadow.mapSize.height = value;\n    }\n  }\n}); //\n\nObject.defineProperties(THREE.BufferAttribute.prototype, {\n  length: {\n    get: function get() {\n      console.warn('THREE.BufferAttribute: .length has been deprecated. Please use .count.');\n      return this.array.length;\n    }\n  }\n});\nObject.assign(THREE.BufferGeometry.prototype, {\n  addIndex: function addIndex(index) {\n    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n    this.setIndex(index);\n  },\n  addDrawCall: function addDrawCall(start, count, indexOffset) {\n    if (indexOffset !== undefined) {\n      console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n    }\n\n    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n    this.addGroup(start, count);\n  },\n  clearDrawCalls: function clearDrawCalls() {\n    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n    this.clearGroups();\n  },\n  computeTangents: function computeTangents() {\n    console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');\n  },\n  computeOffsets: function computeOffsets() {\n    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n  }\n});\nObject.defineProperties(THREE.BufferGeometry.prototype, {\n  drawcalls: {\n    get: function get() {\n      console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n      return this.groups;\n    }\n  },\n  offsets: {\n    get: function get() {\n      console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n      return this.groups;\n    }\n  }\n}); //\n\nObject.defineProperties(THREE.Material.prototype, {\n  wrapAround: {\n    get: function get() {\n      console.warn('THREE.' + this.type + ': .wrapAround has been removed.');\n    },\n    set: function set(value) {\n      console.warn('THREE.' + this.type + ': .wrapAround has been removed.');\n    }\n  },\n  wrapRGB: {\n    get: function get() {\n      console.warn('THREE.' + this.type + ': .wrapRGB has been removed.');\n      return new THREE.Color();\n    }\n  }\n});\nObject.defineProperties(THREE.MeshPhongMaterial.prototype, {\n  metal: {\n    get: function get() {\n      console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n      return false;\n    },\n    set: function set(value) {\n      console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n    }\n  }\n});\nObject.defineProperties(THREE.ShaderMaterial.prototype, {\n  derivatives: {\n    get: function get() {\n      console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n      return this.extensions.derivatives;\n    },\n    set: function set(value) {\n      console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n      this.extensions.derivatives = value;\n    }\n  }\n}); //\n\nTHREE.EventDispatcher.prototype = Object.assign(Object.create({\n  // Note: Extra base ensures these properties are not 'assign'ed.\n  constructor: THREE.EventDispatcher,\n  apply: function apply(target) {\n    console.warn(\"THREE.EventDispatcher: .apply is deprecated, \" + \"just inherit or Object.assign the prototype to mix-in.\");\n    Object.assign(target, this);\n  }\n}), THREE.EventDispatcher.prototype); //\n\nObject.assign(THREE.WebGLRenderer.prototype, {\n  supportsFloatTextures: function supportsFloatTextures() {\n    console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n    return this.extensions.get('OES_texture_float');\n  },\n  supportsHalfFloatTextures: function supportsHalfFloatTextures() {\n    console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n    return this.extensions.get('OES_texture_half_float');\n  },\n  supportsStandardDerivatives: function supportsStandardDerivatives() {\n    console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n    return this.extensions.get('OES_standard_derivatives');\n  },\n  supportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n    console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n    return this.extensions.get('WEBGL_compressed_texture_s3tc');\n  },\n  supportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n    console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n    return this.extensions.get('WEBGL_compressed_texture_pvrtc');\n  },\n  supportsBlendMinMax: function supportsBlendMinMax() {\n    console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n    return this.extensions.get('EXT_blend_minmax');\n  },\n  supportsVertexTextures: function supportsVertexTextures() {\n    return this.capabilities.vertexTextures;\n  },\n  supportsInstancedArrays: function supportsInstancedArrays() {\n    console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n    return this.extensions.get('ANGLE_instanced_arrays');\n  },\n  enableScissorTest: function enableScissorTest(_boolean2) {\n    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n    this.setScissorTest(_boolean2);\n  },\n  initMaterial: function initMaterial() {\n    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n  },\n  addPrePlugin: function addPrePlugin() {\n    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n  },\n  addPostPlugin: function addPostPlugin() {\n    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n  },\n  updateShadowMap: function updateShadowMap() {\n    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n  }\n});\nObject.defineProperties(THREE.WebGLRenderer.prototype, {\n  shadowMapEnabled: {\n    get: function get() {\n      return this.shadowMap.enabled;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n      this.shadowMap.enabled = value;\n    }\n  },\n  shadowMapType: {\n    get: function get() {\n      return this.shadowMap.type;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n      this.shadowMap.type = value;\n    }\n  },\n  shadowMapCullFace: {\n    get: function get() {\n      return this.shadowMap.cullFace;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.');\n      this.shadowMap.cullFace = value;\n    }\n  }\n});\nObject.defineProperties(THREE.WebGLShadowMap.prototype, {\n  cullFace: {\n    get: function get() {\n      return this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n    },\n    set: function set(cullFace) {\n      var value = cullFace !== THREE.CullFaceBack;\n      console.warn(\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\");\n      this.renderReverseSided = value;\n    }\n  }\n}); //\n\nObject.defineProperties(THREE.WebGLRenderTarget.prototype, {\n  wrapS: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n      return this.texture.wrapS;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n      this.texture.wrapS = value;\n    }\n  },\n  wrapT: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n      return this.texture.wrapT;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n      this.texture.wrapT = value;\n    }\n  },\n  magFilter: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n      return this.texture.magFilter;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n      this.texture.magFilter = value;\n    }\n  },\n  minFilter: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n      return this.texture.minFilter;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n      this.texture.minFilter = value;\n    }\n  },\n  anisotropy: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n      return this.texture.anisotropy;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n      this.texture.anisotropy = value;\n    }\n  },\n  offset: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n      return this.texture.offset;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n      this.texture.offset = value;\n    }\n  },\n  repeat: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n      return this.texture.repeat;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n      this.texture.repeat = value;\n    }\n  },\n  format: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n      return this.texture.format;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n      this.texture.format = value;\n    }\n  },\n  type: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n      return this.texture.type;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n      this.texture.type = value;\n    }\n  },\n  generateMipmaps: {\n    get: function get() {\n      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n      return this.texture.generateMipmaps;\n    },\n    set: function set(value) {\n      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n      this.texture.generateMipmaps = value;\n    }\n  }\n}); //\n\nObject.assign(THREE.Audio.prototype, {\n  load: function load(file) {\n    console.warn('THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.');\n    var scope = this;\n    var audioLoader = new THREE.AudioLoader();\n    audioLoader.load(file, function (buffer) {\n      scope.setBuffer(buffer);\n    });\n    return this;\n  }\n});\nObject.assign(THREE.AudioAnalyser.prototype, {\n  getData: function getData(file) {\n    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n    return this.getFrequencyData();\n  }\n}); //\n\nTHREE.GeometryUtils = {\n  merge: function merge(geometry1, geometry2, materialIndexOffset) {\n    console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n    var matrix;\n\n    if (geometry2 instanceof THREE.Mesh) {\n      geometry2.matrixAutoUpdate && geometry2.updateMatrix();\n      matrix = geometry2.matrix;\n      geometry2 = geometry2.geometry;\n    }\n\n    geometry1.merge(geometry2, matrix, materialIndexOffset);\n  },\n  center: function center(geometry) {\n    console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n    return geometry.center();\n  }\n};\nTHREE.ImageUtils = {\n  crossOrigin: undefined,\n  loadTexture: function loadTexture(url, mapping, onLoad, onError) {\n    console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n    var loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n    var texture = loader.load(url, onLoad, undefined, onError);\n    if (mapping) texture.mapping = mapping;\n    return texture;\n  },\n  loadTextureCube: function loadTextureCube(urls, mapping, onLoad, onError) {\n    console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n    var loader = new THREE.CubeTextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n    var texture = loader.load(urls, onLoad, undefined, onError);\n    if (mapping) texture.mapping = mapping;\n    return texture;\n  },\n  loadCompressedTexture: function loadCompressedTexture() {\n    console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n  },\n  loadCompressedTextureCube: function loadCompressedTextureCube() {\n    console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n  }\n}; //\n\nTHREE.Projector = function () {\n  console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function (vector, camera) {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  };\n}; //\n\n\nTHREE.CanvasRenderer = function () {\n  console.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');\n  this.domElement = document.createElement('canvas');\n\n  this.clear = function () {};\n\n  this.render = function () {};\n\n  this.setClearColor = function () {};\n\n  this.setSize = function () {};\n}; // File:src/extras/CurveUtils.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\n\n\nTHREE.CurveUtils = {\n  tangentQuadraticBezier: function tangentQuadraticBezier(t, p0, p1, p2) {\n    return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n  },\n  // Puay Bing, thanks for helping with this derivative!\n  tangentCubicBezier: function tangentCubicBezier(t, p0, p1, p2, p3) {\n    return -3 * p0 * (1 - t) * (1 - t) + 3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) + 6 * t * p2 * (1 - t) - 3 * t * t * p2 + 3 * t * t * p3;\n  },\n  tangentSpline: function tangentSpline(t, p0, p1, p2, p3) {\n    // To check if my formulas are correct\n    var h00 = 6 * t * t - 6 * t; // derived from 2t^3 − 3t^2 + 1\n\n    var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\n    var h01 = -6 * t * t + 6 * t; // − 2t3 + 3t2\n\n    var h11 = 3 * t * t - 2 * t; // t3 − t2\n\n    return h00 + h10 + h01 + h11;\n  },\n  // Catmull-Rom\n  interpolate: function interpolate(p0, p1, p2, p3, t) {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n  }\n}; // File:src/extras/SceneUtils.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.SceneUtils = {\n  createMultiMaterialObject: function createMultiMaterialObject(geometry, materials) {\n    var group = new THREE.Group();\n\n    for (var i = 0, l = materials.length; i < l; i++) {\n      group.add(new THREE.Mesh(geometry, materials[i]));\n    }\n\n    return group;\n  },\n  detach: function detach(child, parent, scene) {\n    child.applyMatrix(parent.matrixWorld);\n    parent.remove(child);\n    scene.add(child);\n  },\n  attach: function attach(child, scene, parent) {\n    var matrixWorldInverse = new THREE.Matrix4();\n    matrixWorldInverse.getInverse(parent.matrixWorld);\n    child.applyMatrix(matrixWorldInverse);\n    scene.remove(child);\n    parent.add(child);\n  }\n}; // File:src/extras/ShapeUtils.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\n\nTHREE.ShapeUtils = {\n  // calculate area of the contour polygon\n  area: function area(contour) {\n    var n = contour.length;\n    var a = 0.0;\n\n    for (var p = n - 1, q = 0; q < n; p = q++) {\n      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n    }\n\n    return a * 0.5;\n  },\n  triangulate: function () {\n    /**\r\n     * This code is a quick port of code written in C++ which was submitted to\r\n     * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n     * See original code and more information here:\r\n     * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n     *\r\n     * ported to actionscript by Zevan Rosser\r\n     * www.actionsnippet.com\r\n     *\r\n     * ported to javascript by Joshua Koo\r\n     * http://www.lab4games.net/zz85/blog\r\n     *\r\n     */\n    function snip(contour, u, v, w, n, verts) {\n      var p;\n      var ax, ay, bx, by;\n      var cx, cy, px, py;\n      ax = contour[verts[u]].x;\n      ay = contour[verts[u]].y;\n      bx = contour[verts[v]].x;\n      by = contour[verts[v]].y;\n      cx = contour[verts[w]].x;\n      cy = contour[verts[w]].y;\n      if (Number.EPSILON > (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)) return false;\n      var aX, aY, bX, bY, cX, cY;\n      var apx, apy, bpx, bpy, cpx, cpy;\n      var cCROSSap, bCROSScp, aCROSSbp;\n      aX = cx - bx;\n      aY = cy - by;\n      bX = ax - cx;\n      bY = ay - cy;\n      cX = bx - ax;\n      cY = by - ay;\n\n      for (p = 0; p < n; p++) {\n        px = contour[verts[p]].x;\n        py = contour[verts[p]].y;\n        if (px === ax && py === ay || px === bx && py === by || px === cx && py === cy) continue;\n        apx = px - ax;\n        apy = py - ay;\n        bpx = px - bx;\n        bpy = py - by;\n        cpx = px - cx;\n        cpy = py - cy; // see if p is inside triangle abc\n\n        aCROSSbp = aX * bpy - aY * bpx;\n        cCROSSap = cX * apy - cY * apx;\n        bCROSScp = bX * cpy - bY * cpx;\n        if (aCROSSbp >= -Number.EPSILON && bCROSScp >= -Number.EPSILON && cCROSSap >= -Number.EPSILON) return false;\n      }\n\n      return true;\n    } // takes in an contour array and returns\n\n\n    return function (contour, indices) {\n      var n = contour.length;\n      if (n < 3) return null;\n      var result = [],\n          verts = [],\n          vertIndices = [];\n      /* we want a counter-clockwise polygon in verts */\n\n      var u, v, w;\n\n      if (THREE.ShapeUtils.area(contour) > 0.0) {\n        for (v = 0; v < n; v++) {\n          verts[v] = v;\n        }\n      } else {\n        for (v = 0; v < n; v++) {\n          verts[v] = n - 1 - v;\n        }\n      }\n\n      var nv = n;\n      /*  remove nv - 2 vertices, creating 1 triangle every time */\n\n      var count = 2 * nv;\n      /* error detection */\n\n      for (v = nv - 1; nv > 2;) {\n        /* if we loop, it is probably a non-simple polygon */\n        if (count-- <= 0) {\n          //** Triangulate: ERROR - probable bad polygon!\n          //throw ( \"Warning, unable to triangulate polygon!\" );\n          //return null;\n          // Sometimes warning is fine, especially polygons are triangulated in reverse.\n          console.warn('THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()');\n          if (indices) return vertIndices;\n          return result;\n        }\n        /* three consecutive vertices in current polygon, <u,v,w> */\n\n\n        u = v;\n        if (nv <= u) u = 0;\n        /* previous */\n\n        v = u + 1;\n        if (nv <= v) v = 0;\n        /* new v    */\n\n        w = v + 1;\n        if (nv <= w) w = 0;\n        /* next     */\n\n        if (snip(contour, u, v, w, nv, verts)) {\n          var a, b, c, s, t;\n          /* true names of the vertices */\n\n          a = verts[u];\n          b = verts[v];\n          c = verts[w];\n          /* output Triangle */\n\n          result.push([contour[a], contour[b], contour[c]]);\n          vertIndices.push([verts[u], verts[v], verts[w]]);\n          /* remove v from the remaining polygon */\n\n          for (s = v, t = v + 1; t < nv; s++, t++) {\n            verts[s] = verts[t];\n          }\n\n          nv--;\n          /* reset error detection counter */\n\n          count = 2 * nv;\n        }\n      }\n\n      if (indices) return vertIndices;\n      return result;\n    };\n  }(),\n  triangulateShape: function triangulateShape(contour, holes) {\n    function point_in_segment_2D_colin(inSegPt1, inSegPt2, inOtherPt) {\n      // inOtherPt needs to be collinear to the inSegment\n      if (inSegPt1.x !== inSegPt2.x) {\n        if (inSegPt1.x < inSegPt2.x) {\n          return inSegPt1.x <= inOtherPt.x && inOtherPt.x <= inSegPt2.x;\n        } else {\n          return inSegPt2.x <= inOtherPt.x && inOtherPt.x <= inSegPt1.x;\n        }\n      } else {\n        if (inSegPt1.y < inSegPt2.y) {\n          return inSegPt1.y <= inOtherPt.y && inOtherPt.y <= inSegPt2.y;\n        } else {\n          return inSegPt2.y <= inOtherPt.y && inOtherPt.y <= inSegPt1.y;\n        }\n      }\n    }\n\n    function intersect_segments_2D(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs) {\n      var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,\n          seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n      var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,\n          seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n      var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n      var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n      var limit = seg1dy * seg2dx - seg1dx * seg2dy;\n      var perpSeg1 = seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n      if (Math.abs(limit) > Number.EPSILON) {\n        // not parallel\n        var perpSeg2;\n\n        if (limit > 0) {\n          if (perpSeg1 < 0 || perpSeg1 > limit) return [];\n          perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n          if (perpSeg2 < 0 || perpSeg2 > limit) return [];\n        } else {\n          if (perpSeg1 > 0 || perpSeg1 < limit) return [];\n          perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n          if (perpSeg2 > 0 || perpSeg2 < limit) return [];\n        } // i.e. to reduce rounding errors\n        // intersection at endpoint of segment#1?\n\n\n        if (perpSeg2 === 0) {\n          if (inExcludeAdjacentSegs && (perpSeg1 === 0 || perpSeg1 === limit)) return [];\n          return [inSeg1Pt1];\n        }\n\n        if (perpSeg2 === limit) {\n          if (inExcludeAdjacentSegs && (perpSeg1 === 0 || perpSeg1 === limit)) return [];\n          return [inSeg1Pt2];\n        } // intersection at endpoint of segment#2?\n\n\n        if (perpSeg1 === 0) return [inSeg2Pt1];\n        if (perpSeg1 === limit) return [inSeg2Pt2]; // return real intersection point\n\n        var factorSeg1 = perpSeg2 / limit;\n        return [{\n          x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n          y: inSeg1Pt1.y + factorSeg1 * seg1dy\n        }];\n      } else {\n        // parallel or collinear\n        if (perpSeg1 !== 0 || seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy) return []; // they are collinear or degenerate\n\n        var seg1Pt = seg1dx === 0 && seg1dy === 0; // segment1 is just a point?\n\n        var seg2Pt = seg2dx === 0 && seg2dy === 0; // segment2 is just a point?\n        // both segments are points\n\n        if (seg1Pt && seg2Pt) {\n          if (inSeg1Pt1.x !== inSeg2Pt1.x || inSeg1Pt1.y !== inSeg2Pt1.y) return []; // they are distinct  points\n\n          return [inSeg1Pt1]; // they are the same point\n        } // segment#1  is a single point\n\n\n        if (seg1Pt) {\n          if (!point_in_segment_2D_colin(inSeg2Pt1, inSeg2Pt2, inSeg1Pt1)) return []; // but not in segment#2\n\n          return [inSeg1Pt1];\n        } // segment#2  is a single point\n\n\n        if (seg2Pt) {\n          if (!point_in_segment_2D_colin(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1)) return []; // but not in segment#1\n\n          return [inSeg2Pt1];\n        } // they are collinear segments, which might overlap\n\n\n        var seg1min, seg1max, seg1minVal, seg1maxVal;\n        var seg2min, seg2max, seg2minVal, seg2maxVal;\n\n        if (seg1dx !== 0) {\n          // the segments are NOT on a vertical line\n          if (inSeg1Pt1.x < inSeg1Pt2.x) {\n            seg1min = inSeg1Pt1;\n            seg1minVal = inSeg1Pt1.x;\n            seg1max = inSeg1Pt2;\n            seg1maxVal = inSeg1Pt2.x;\n          } else {\n            seg1min = inSeg1Pt2;\n            seg1minVal = inSeg1Pt2.x;\n            seg1max = inSeg1Pt1;\n            seg1maxVal = inSeg1Pt1.x;\n          }\n\n          if (inSeg2Pt1.x < inSeg2Pt2.x) {\n            seg2min = inSeg2Pt1;\n            seg2minVal = inSeg2Pt1.x;\n            seg2max = inSeg2Pt2;\n            seg2maxVal = inSeg2Pt2.x;\n          } else {\n            seg2min = inSeg2Pt2;\n            seg2minVal = inSeg2Pt2.x;\n            seg2max = inSeg2Pt1;\n            seg2maxVal = inSeg2Pt1.x;\n          }\n        } else {\n          // the segments are on a vertical line\n          if (inSeg1Pt1.y < inSeg1Pt2.y) {\n            seg1min = inSeg1Pt1;\n            seg1minVal = inSeg1Pt1.y;\n            seg1max = inSeg1Pt2;\n            seg1maxVal = inSeg1Pt2.y;\n          } else {\n            seg1min = inSeg1Pt2;\n            seg1minVal = inSeg1Pt2.y;\n            seg1max = inSeg1Pt1;\n            seg1maxVal = inSeg1Pt1.y;\n          }\n\n          if (inSeg2Pt1.y < inSeg2Pt2.y) {\n            seg2min = inSeg2Pt1;\n            seg2minVal = inSeg2Pt1.y;\n            seg2max = inSeg2Pt2;\n            seg2maxVal = inSeg2Pt2.y;\n          } else {\n            seg2min = inSeg2Pt2;\n            seg2minVal = inSeg2Pt2.y;\n            seg2max = inSeg2Pt1;\n            seg2maxVal = inSeg2Pt1.y;\n          }\n        }\n\n        if (seg1minVal <= seg2minVal) {\n          if (seg1maxVal < seg2minVal) return [];\n\n          if (seg1maxVal === seg2minVal) {\n            if (inExcludeAdjacentSegs) return [];\n            return [seg2min];\n          }\n\n          if (seg1maxVal <= seg2maxVal) return [seg2min, seg1max];\n          return [seg2min, seg2max];\n        } else {\n          if (seg1minVal > seg2maxVal) return [];\n\n          if (seg1minVal === seg2maxVal) {\n            if (inExcludeAdjacentSegs) return [];\n            return [seg1min];\n          }\n\n          if (seg1maxVal <= seg2maxVal) return [seg1min, seg1max];\n          return [seg1min, seg2max];\n        }\n      }\n    }\n\n    function isPointInsideAngle(inVertex, inLegFromPt, inLegToPt, inOtherPt) {\n      // The order of legs is important\n      // translation of all points, so that Vertex is at (0,0)\n      var legFromPtX = inLegFromPt.x - inVertex.x,\n          legFromPtY = inLegFromPt.y - inVertex.y;\n      var legToPtX = inLegToPt.x - inVertex.x,\n          legToPtY = inLegToPt.y - inVertex.y;\n      var otherPtX = inOtherPt.x - inVertex.x,\n          otherPtY = inOtherPt.y - inVertex.y; // main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\n      var from2toAngle = legFromPtX * legToPtY - legFromPtY * legToPtX;\n      var from2otherAngle = legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n      if (Math.abs(from2toAngle) > Number.EPSILON) {\n        // angle != 180 deg.\n        var other2toAngle = otherPtX * legToPtY - otherPtY * legToPtX; // console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n        if (from2toAngle > 0) {\n          // main angle < 180 deg.\n          return from2otherAngle >= 0 && other2toAngle >= 0;\n        } else {\n          // main angle > 180 deg.\n          return from2otherAngle >= 0 || other2toAngle >= 0;\n        }\n      } else {\n        // angle == 180 deg.\n        // console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n        return from2otherAngle > 0;\n      }\n    }\n\n    function removeHoles(contour, holes) {\n      var shape = contour.concat(); // work on this shape\n\n      var hole;\n\n      function isCutLineInsideAngles(inShapeIdx, inHoleIdx) {\n        // Check if hole point lies within angle around shape point\n        var lastShapeIdx = shape.length - 1;\n        var prevShapeIdx = inShapeIdx - 1;\n        if (prevShapeIdx < 0) prevShapeIdx = lastShapeIdx;\n        var nextShapeIdx = inShapeIdx + 1;\n        if (nextShapeIdx > lastShapeIdx) nextShapeIdx = 0;\n        var insideAngle = isPointInsideAngle(shape[inShapeIdx], shape[prevShapeIdx], shape[nextShapeIdx], hole[inHoleIdx]);\n\n        if (!insideAngle) {\n          // console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n          return false;\n        } // Check if shape point lies within angle around hole point\n\n\n        var lastHoleIdx = hole.length - 1;\n        var prevHoleIdx = inHoleIdx - 1;\n        if (prevHoleIdx < 0) prevHoleIdx = lastHoleIdx;\n        var nextHoleIdx = inHoleIdx + 1;\n        if (nextHoleIdx > lastHoleIdx) nextHoleIdx = 0;\n        insideAngle = isPointInsideAngle(hole[inHoleIdx], hole[prevHoleIdx], hole[nextHoleIdx], shape[inShapeIdx]);\n\n        if (!insideAngle) {\n          // console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n          return false;\n        }\n\n        return true;\n      }\n\n      function intersectsShapeEdge(inShapePt, inHolePt) {\n        // checks for intersections with shape edges\n        var sIdx, nextIdx, intersection;\n\n        for (sIdx = 0; sIdx < shape.length; sIdx++) {\n          nextIdx = sIdx + 1;\n          nextIdx %= shape.length;\n          intersection = intersect_segments_2D(inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true);\n          if (intersection.length > 0) return true;\n        }\n\n        return false;\n      }\n\n      var indepHoles = [];\n\n      function intersectsHoleEdge(inShapePt, inHolePt) {\n        // checks for intersections with hole edges\n        var ihIdx, chkHole, hIdx, nextIdx, intersection;\n\n        for (ihIdx = 0; ihIdx < indepHoles.length; ihIdx++) {\n          chkHole = holes[indepHoles[ihIdx]];\n\n          for (hIdx = 0; hIdx < chkHole.length; hIdx++) {\n            nextIdx = hIdx + 1;\n            nextIdx %= chkHole.length;\n            intersection = intersect_segments_2D(inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true);\n            if (intersection.length > 0) return true;\n          }\n        }\n\n        return false;\n      }\n\n      var holeIndex,\n          shapeIndex,\n          shapePt,\n          holePt,\n          holeIdx,\n          cutKey,\n          failedCuts = [],\n          tmpShape1,\n          tmpShape2,\n          tmpHole1,\n          tmpHole2;\n\n      for (var h = 0, hl = holes.length; h < hl; h++) {\n        indepHoles.push(h);\n      }\n\n      var minShapeIndex = 0;\n      var counter = indepHoles.length * 2;\n\n      while (indepHoles.length > 0) {\n        counter--;\n\n        if (counter < 0) {\n          console.log(\"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\");\n          break;\n        } // search for shape-vertex and hole-vertex,\n        // which can be connected without intersections\n\n\n        for (shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex++) {\n          shapePt = shape[shapeIndex];\n          holeIndex = -1; // search for hole which can be reached without intersections\n\n          for (var h = 0; h < indepHoles.length; h++) {\n            holeIdx = indepHoles[h]; // prevent multiple checks\n\n            cutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n            if (failedCuts[cutKey] !== undefined) continue;\n            hole = holes[holeIdx];\n\n            for (var h2 = 0; h2 < hole.length; h2++) {\n              holePt = hole[h2];\n              if (!isCutLineInsideAngles(shapeIndex, h2)) continue;\n              if (intersectsShapeEdge(shapePt, holePt)) continue;\n              if (intersectsHoleEdge(shapePt, holePt)) continue;\n              holeIndex = h2;\n              indepHoles.splice(h, 1);\n              tmpShape1 = shape.slice(0, shapeIndex + 1);\n              tmpShape2 = shape.slice(shapeIndex);\n              tmpHole1 = hole.slice(holeIndex);\n              tmpHole2 = hole.slice(0, holeIndex + 1);\n              shape = tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(tmpShape2);\n              minShapeIndex = shapeIndex; // Debug only, to show the selected cuts\n              // glob_CutLines.push( [ shapePt, holePt ] );\n\n              break;\n            }\n\n            if (holeIndex >= 0) break; // hole-vertex found\n\n            failedCuts[cutKey] = true; // remember failure\n          }\n\n          if (holeIndex >= 0) break; // hole-vertex found\n        }\n      }\n\n      return shape;\n      /* shape with no holes */\n    }\n\n    var i,\n        il,\n        f,\n        face,\n        key,\n        index,\n        allPointsMap = {}; // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n    var allpoints = contour.concat();\n\n    for (var h = 0, hl = holes.length; h < hl; h++) {\n      Array.prototype.push.apply(allpoints, holes[h]);\n    } //console.log( \"allpoints\",allpoints, allpoints.length );\n    // prepare all points map\n\n\n    for (i = 0, il = allpoints.length; i < il; i++) {\n      key = allpoints[i].x + \":\" + allpoints[i].y;\n\n      if (allPointsMap[key] !== undefined) {\n        console.warn(\"THREE.Shape: Duplicate point\", key);\n      }\n\n      allPointsMap[key] = i;\n    } // remove holes by cutting paths to holes and adding them to the shape\n\n\n    var shapeWithoutHoles = removeHoles(contour, holes);\n    var triangles = THREE.ShapeUtils.triangulate(shapeWithoutHoles, false); // True returns indices for points of spooled shape\n    //console.log( \"triangles\",triangles, triangles.length );\n    // check all face vertices against all points map\n\n    for (i = 0, il = triangles.length; i < il; i++) {\n      face = triangles[i];\n\n      for (f = 0; f < 3; f++) {\n        key = face[f].x + \":\" + face[f].y;\n        index = allPointsMap[key];\n\n        if (index !== undefined) {\n          face[f] = index;\n        }\n      }\n    }\n\n    return triangles.concat();\n  },\n  isClockWise: function isClockWise(pts) {\n    return THREE.ShapeUtils.area(pts) < 0;\n  },\n  // Bezier Curves formulas obtained from\n  // http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n  // Quad Bezier Functions\n  b2: function () {\n    function b2p0(t, p) {\n      var k = 1 - t;\n      return k * k * p;\n    }\n\n    function b2p1(t, p) {\n      return 2 * (1 - t) * t * p;\n    }\n\n    function b2p2(t, p) {\n      return t * t * p;\n    }\n\n    return function (t, p0, p1, p2) {\n      return b2p0(t, p0) + b2p1(t, p1) + b2p2(t, p2);\n    };\n  }(),\n  // Cubic Bezier Functions\n  b3: function () {\n    function b3p0(t, p) {\n      var k = 1 - t;\n      return k * k * k * p;\n    }\n\n    function b3p1(t, p) {\n      var k = 1 - t;\n      return 3 * k * k * t * p;\n    }\n\n    function b3p2(t, p) {\n      var k = 1 - t;\n      return 3 * k * t * t * p;\n    }\n\n    function b3p3(t, p) {\n      return t * t * t * p;\n    }\n\n    return function (t, p0, p1, p2, p3) {\n      return b3p0(t, p0) + b3p1(t, p1) + b3p2(t, p2) + b3p3(t, p3);\n    };\n  }()\n}; // File:src/extras/core/Curve.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following classes subclasses THREE.Curve:\r\n *\r\n * -- 2d classes --\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\n\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\n\nTHREE.Curve = function () {};\n\nTHREE.Curve.prototype = {\n  constructor: THREE.Curve,\n  // Virtual base class method to overwrite and implement in subclasses\n  //\t- t [0 .. 1]\n  getPoint: function getPoint(t) {\n    console.warn(\"THREE.Curve: Warning, getPoint() not implemented!\");\n    return null;\n  },\n  // Get point at relative position in curve according to arc length\n  // - u [0 .. 1]\n  getPointAt: function getPointAt(u) {\n    var t = this.getUtoTmapping(u);\n    return this.getPoint(t);\n  },\n  // Get sequence of points using getPoint( t )\n  getPoints: function getPoints(divisions) {\n    if (!divisions) divisions = 5;\n    var d,\n        pts = [];\n\n    for (d = 0; d <= divisions; d++) {\n      pts.push(this.getPoint(d / divisions));\n    }\n\n    return pts;\n  },\n  // Get sequence of points using getPointAt( u )\n  getSpacedPoints: function getSpacedPoints(divisions) {\n    if (!divisions) divisions = 5;\n    var d,\n        pts = [];\n\n    for (d = 0; d <= divisions; d++) {\n      pts.push(this.getPointAt(d / divisions));\n    }\n\n    return pts;\n  },\n  // Get total curve arc length\n  getLength: function getLength() {\n    var lengths = this.getLengths();\n    return lengths[lengths.length - 1];\n  },\n  // Get list of cumulative segment lengths\n  getLengths: function getLengths(divisions) {\n    if (!divisions) divisions = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;\n\n    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n      //console.log( \"cached\", this.cacheArcLengths );\n      return this.cacheArcLengths;\n    }\n\n    this.needsUpdate = false;\n    var cache = [];\n    var current,\n        last = this.getPoint(0);\n    var p,\n        sum = 0;\n    cache.push(0);\n\n    for (p = 1; p <= divisions; p++) {\n      current = this.getPoint(p / divisions);\n      sum += current.distanceTo(last);\n      cache.push(sum);\n      last = current;\n    }\n\n    this.cacheArcLengths = cache;\n    return cache; // { sums: cache, sum:sum }; Sum is in the last element.\n  },\n  updateArcLengths: function updateArcLengths() {\n    this.needsUpdate = true;\n    this.getLengths();\n  },\n  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n  getUtoTmapping: function getUtoTmapping(u, distance) {\n    var arcLengths = this.getLengths();\n    var i = 0,\n        il = arcLengths.length;\n    var targetArcLength; // The targeted u distance value to get\n\n    if (distance) {\n      targetArcLength = distance;\n    } else {\n      targetArcLength = u * arcLengths[il - 1];\n    } //var time = Date.now();\n    // binary search for the index with largest value smaller than target u distance\n\n\n    var low = 0,\n        high = il - 1,\n        comparison;\n\n    while (low <= high) {\n      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n      comparison = arcLengths[i] - targetArcLength;\n\n      if (comparison < 0) {\n        low = i + 1;\n      } else if (comparison > 0) {\n        high = i - 1;\n      } else {\n        high = i;\n        break; // DONE\n      }\n    }\n\n    i = high; //console.log('b' , i, low, high, Date.now()- time);\n\n    if (arcLengths[i] === targetArcLength) {\n      var t = i / (il - 1);\n      return t;\n    } // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n    var lengthBefore = arcLengths[i];\n    var lengthAfter = arcLengths[i + 1];\n    var segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n    var segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n    var t = (i + segmentFraction) / (il - 1);\n    return t;\n  },\n  // Returns a unit vector tangent at t\n  // In case any sub curve does not implement its tangent derivation,\n  // 2 points a small delta apart will be used to find its gradient\n  // which seems to give a reasonable approximation\n  getTangent: function getTangent(t) {\n    var delta = 0.0001;\n    var t1 = t - delta;\n    var t2 = t + delta; // Capping in case of danger\n\n    if (t1 < 0) t1 = 0;\n    if (t2 > 1) t2 = 1;\n    var pt1 = this.getPoint(t1);\n    var pt2 = this.getPoint(t2);\n    var vec = pt2.clone().sub(pt1);\n    return vec.normalize();\n  },\n  getTangentAt: function getTangentAt(u) {\n    var t = this.getUtoTmapping(u);\n    return this.getTangent(t);\n  }\n}; // TODO: Transformation for Curves?\n\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function (constructor, getPointFunc) {\n  constructor.prototype = Object.create(THREE.Curve.prototype);\n  constructor.prototype.constructor = constructor;\n  constructor.prototype.getPoint = getPointFunc;\n  return constructor;\n}; // File:src/extras/core/CurvePath.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\n\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\n\n\nTHREE.CurvePath = function () {\n  this.curves = [];\n  this.autoClose = false; // Automatically closes the path\n};\n\nTHREE.CurvePath.prototype = Object.assign(Object.create(THREE.Curve.prototype), {\n  constructor: THREE.CurvePath,\n  add: function add(curve) {\n    this.curves.push(curve);\n  },\n  closePath: function closePath() {\n    // TODO Test\n    // and verify for vector3 (needs to implement equals)\n    // Add a line curve if start and end of lines are not connected\n    var startPoint = this.curves[0].getPoint(0);\n    var endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n    if (!startPoint.equals(endPoint)) {\n      this.curves.push(new THREE.LineCurve(endPoint, startPoint));\n    }\n  },\n  // To get accurate point with reference to\n  // entire path distance at time t,\n  // following has to be done:\n  // 1. Length of each sub path have to be known\n  // 2. Locate and identify type of curve\n  // 3. Get t for the curve\n  // 4. Return curve.getPointAt(t')\n  getPoint: function getPoint(t) {\n    var d = t * this.getLength();\n    var curveLengths = this.getCurveLengths();\n    var i = 0; // To think about boundaries points.\n\n    while (i < curveLengths.length) {\n      if (curveLengths[i] >= d) {\n        var diff = curveLengths[i] - d;\n        var curve = this.curves[i];\n        var u = 1 - diff / curve.getLength();\n        return curve.getPointAt(u);\n      }\n\n      i++;\n    }\n\n    return null; // loop where sum != 0, sum > d , sum+1 <d\n  },\n  // We cannot use the default THREE.Curve getPoint() with getLength() because in\n  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n  // getPoint() depends on getLength\n  getLength: function getLength() {\n    var lens = this.getCurveLengths();\n    return lens[lens.length - 1];\n  },\n  // Compute lengths and cache them\n  // We cannot overwrite getLengths() because UtoT mapping uses it.\n  getCurveLengths: function getCurveLengths() {\n    // We use cache values if curves and cache array are same length\n    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n      return this.cacheLengths;\n    } // Get length of sub-curve\n    // Push sums into cached array\n\n\n    var lengths = [],\n        sums = 0;\n\n    for (var i = 0, l = this.curves.length; i < l; i++) {\n      sums += this.curves[i].getLength();\n      lengths.push(sums);\n    }\n\n    this.cacheLengths = lengths;\n    return lengths;\n  },\n\n  /**************************************************************\r\n   *\tCreate Geometries Helpers\r\n   **************************************************************/\n  /// Generate geometry from path points (for Line or Points objects)\n  createPointsGeometry: function createPointsGeometry(divisions) {\n    var pts = this.getPoints(divisions);\n    return this.createGeometry(pts);\n  },\n  // Generate geometry from equidistant sampling along the path\n  createSpacedPointsGeometry: function createSpacedPointsGeometry(divisions) {\n    var pts = this.getSpacedPoints(divisions);\n    return this.createGeometry(pts);\n  },\n  createGeometry: function createGeometry(points) {\n    var geometry = new THREE.Geometry();\n\n    for (var i = 0, l = points.length; i < l; i++) {\n      var point = points[i];\n      geometry.vertices.push(new THREE.Vector3(point.x, point.y, point.z || 0));\n    }\n\n    return geometry;\n  }\n}); // File:src/extras/core/Font.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.Font = function (data) {\n  this.data = data;\n};\n\nObject.assign(THREE.Font.prototype, {\n  generateShapes: function generateShapes(text, size, divisions) {\n    function createPaths(text) {\n      var chars = String(text).split('');\n      var scale = size / data.resolution;\n      var offset = 0;\n      var paths = [];\n\n      for (var i = 0; i < chars.length; i++) {\n        var ret = createPath(chars[i], scale, offset);\n        offset += ret.offset;\n        paths.push(ret.path);\n      }\n\n      return paths;\n    }\n\n    function createPath(c, scale, offset) {\n      var glyph = data.glyphs[c] || data.glyphs['?'];\n      if (!glyph) return;\n      var path = new THREE.Path();\n      var pts = [],\n          b2 = THREE.ShapeUtils.b2,\n          b3 = THREE.ShapeUtils.b3;\n      var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n      if (glyph.o) {\n        var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n        for (var i = 0, l = outline.length; i < l;) {\n          var action = outline[i++];\n\n          switch (action) {\n            case 'm':\n              // moveTo\n              x = outline[i++] * scale + offset;\n              y = outline[i++] * scale;\n              path.moveTo(x, y);\n              break;\n\n            case 'l':\n              // lineTo\n              x = outline[i++] * scale + offset;\n              y = outline[i++] * scale;\n              path.lineTo(x, y);\n              break;\n\n            case 'q':\n              // quadraticCurveTo\n              cpx = outline[i++] * scale + offset;\n              cpy = outline[i++] * scale;\n              cpx1 = outline[i++] * scale + offset;\n              cpy1 = outline[i++] * scale;\n              path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n              laste = pts[pts.length - 1];\n\n              if (laste) {\n                cpx0 = laste.x;\n                cpy0 = laste.y;\n\n                for (var i2 = 1; i2 <= divisions; i2++) {\n                  var t = i2 / divisions;\n                  b2(t, cpx0, cpx1, cpx);\n                  b2(t, cpy0, cpy1, cpy);\n                }\n              }\n\n              break;\n\n            case 'b':\n              // bezierCurveTo\n              cpx = outline[i++] * scale + offset;\n              cpy = outline[i++] * scale;\n              cpx1 = outline[i++] * scale + offset;\n              cpy1 = outline[i++] * scale;\n              cpx2 = outline[i++] * scale + offset;\n              cpy2 = outline[i++] * scale;\n              path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n              laste = pts[pts.length - 1];\n\n              if (laste) {\n                cpx0 = laste.x;\n                cpy0 = laste.y;\n\n                for (var i2 = 1; i2 <= divisions; i2++) {\n                  var t = i2 / divisions;\n                  b3(t, cpx0, cpx1, cpx2, cpx);\n                  b3(t, cpy0, cpy1, cpy2, cpy);\n                }\n              }\n\n              break;\n          }\n        }\n      }\n\n      return {\n        offset: glyph.ha * scale,\n        path: path\n      };\n    } //\n\n\n    if (size === undefined) size = 100;\n    if (divisions === undefined) divisions = 4;\n    var data = this.data;\n    var paths = createPaths(text);\n    var shapes = [];\n\n    for (var p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes());\n    }\n\n    return shapes;\n  }\n}); // File:src/extras/core/Path.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\n\nTHREE.Path = function (points) {\n  THREE.CurvePath.call(this);\n  this.actions = [];\n\n  if (points) {\n    this.fromPoints(points);\n  }\n};\n\nTHREE.Path.prototype = Object.assign(Object.create(THREE.CurvePath.prototype), {\n  constructor: THREE.Path,\n  // TODO Clean up PATH API\n  // Create path using straight lines to connect all points\n  // - vectors: array of Vector2\n  fromPoints: function fromPoints(vectors) {\n    this.moveTo(vectors[0].x, vectors[0].y);\n\n    for (var i = 1, l = vectors.length; i < l; i++) {\n      this.lineTo(vectors[i].x, vectors[i].y);\n    }\n  },\n  moveTo: function moveTo(x, y) {\n    this.actions.push({\n      action: 'moveTo',\n      args: [x, y]\n    });\n  },\n  lineTo: function lineTo(x, y) {\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    var curve = new THREE.LineCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(x, y));\n    this.curves.push(curve);\n    this.actions.push({\n      action: 'lineTo',\n      args: [x, y]\n    });\n  },\n  quadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    var curve = new THREE.QuadraticBezierCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(aCPx, aCPy), new THREE.Vector2(aX, aY));\n    this.curves.push(curve);\n    this.actions.push({\n      action: 'quadraticCurveTo',\n      args: [aCPx, aCPy, aX, aY]\n    });\n  },\n  bezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    var curve = new THREE.CubicBezierCurve(new THREE.Vector2(x0, y0), new THREE.Vector2(aCP1x, aCP1y), new THREE.Vector2(aCP2x, aCP2y), new THREE.Vector2(aX, aY));\n    this.curves.push(curve);\n    this.actions.push({\n      action: 'bezierCurveTo',\n      args: [aCP1x, aCP1y, aCP2x, aCP2y, aX, aY]\n    });\n  },\n  splineThru: function splineThru(pts\n  /*Array of Vector*/\n  ) {\n    var args = Array.prototype.slice.call(arguments);\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    var npts = [new THREE.Vector2(x0, y0)];\n    Array.prototype.push.apply(npts, pts);\n    var curve = new THREE.SplineCurve(npts);\n    this.curves.push(curve);\n    this.actions.push({\n      action: 'splineThru',\n      args: args\n    });\n  },\n  arc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n  },\n  absarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n  },\n  ellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    var lastargs = this.actions[this.actions.length - 1].args;\n    var x0 = lastargs[lastargs.length - 2];\n    var y0 = lastargs[lastargs.length - 1];\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n  },\n  absellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    var args = [aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation || 0 // aRotation is optional.\n    ];\n    var curve = new THREE.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    this.curves.push(curve);\n    var lastPoint = curve.getPoint(1);\n    args.push(lastPoint.x);\n    args.push(lastPoint.y);\n    this.actions.push({\n      action: 'ellipse',\n      args: args\n    });\n  },\n  getSpacedPoints: function getSpacedPoints(divisions) {\n    if (!divisions) divisions = 40;\n    var points = [];\n\n    for (var i = 0; i < divisions; i++) {\n      points.push(this.getPoint(i / divisions)); //if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\n    }\n\n    if (this.autoClose) {\n      points.push(points[0]);\n    }\n\n    return points;\n  },\n  getPoints: function getPoints(divisions) {\n    divisions = divisions || 12;\n    var b2 = THREE.ShapeUtils.b2;\n    var b3 = THREE.ShapeUtils.b3;\n    var points = [];\n    var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0, laste, tx, ty;\n\n    for (var i = 0, l = this.actions.length; i < l; i++) {\n      var item = this.actions[i];\n      var action = item.action;\n      var args = item.args;\n\n      switch (action) {\n        case 'moveTo':\n          points.push(new THREE.Vector2(args[0], args[1]));\n          break;\n\n        case 'lineTo':\n          points.push(new THREE.Vector2(args[0], args[1]));\n          break;\n\n        case 'quadraticCurveTo':\n          cpx = args[2];\n          cpy = args[3];\n          cpx1 = args[0];\n          cpy1 = args[1];\n\n          if (points.length > 0) {\n            laste = points[points.length - 1];\n            cpx0 = laste.x;\n            cpy0 = laste.y;\n          } else {\n            laste = this.actions[i - 1].args;\n            cpx0 = laste[laste.length - 2];\n            cpy0 = laste[laste.length - 1];\n          }\n\n          for (var j = 1; j <= divisions; j++) {\n            var t = j / divisions;\n            tx = b2(t, cpx0, cpx1, cpx);\n            ty = b2(t, cpy0, cpy1, cpy);\n            points.push(new THREE.Vector2(tx, ty));\n          }\n\n          break;\n\n        case 'bezierCurveTo':\n          cpx = args[4];\n          cpy = args[5];\n          cpx1 = args[0];\n          cpy1 = args[1];\n          cpx2 = args[2];\n          cpy2 = args[3];\n\n          if (points.length > 0) {\n            laste = points[points.length - 1];\n            cpx0 = laste.x;\n            cpy0 = laste.y;\n          } else {\n            laste = this.actions[i - 1].args;\n            cpx0 = laste[laste.length - 2];\n            cpy0 = laste[laste.length - 1];\n          }\n\n          for (var j = 1; j <= divisions; j++) {\n            var t = j / divisions;\n            tx = b3(t, cpx0, cpx1, cpx2, cpx);\n            ty = b3(t, cpy0, cpy1, cpy2, cpy);\n            points.push(new THREE.Vector2(tx, ty));\n          }\n\n          break;\n\n        case 'splineThru':\n          laste = this.actions[i - 1].args;\n          var last = new THREE.Vector2(laste[laste.length - 2], laste[laste.length - 1]);\n          var spts = [last];\n          var n = divisions * args[0].length;\n          spts = spts.concat(args[0]);\n          var spline = new THREE.SplineCurve(spts);\n\n          for (var j = 1; j <= n; j++) {\n            points.push(spline.getPointAt(j / n));\n          }\n\n          break;\n\n        case 'arc':\n          var aX = args[0],\n              aY = args[1],\n              aRadius = args[2],\n              aStartAngle = args[3],\n              aEndAngle = args[4],\n              aClockwise = !!args[5];\n          var deltaAngle = aEndAngle - aStartAngle;\n          var angle;\n          var tdivisions = divisions * 2;\n\n          for (var j = 1; j <= tdivisions; j++) {\n            var t = j / tdivisions;\n\n            if (!aClockwise) {\n              t = 1 - t;\n            }\n\n            angle = aStartAngle + t * deltaAngle;\n            tx = aX + aRadius * Math.cos(angle);\n            ty = aY + aRadius * Math.sin(angle); //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n            points.push(new THREE.Vector2(tx, ty));\n          } //console.log(points);\n\n\n          break;\n\n        case 'ellipse':\n          var aX = args[0],\n              aY = args[1],\n              xRadius = args[2],\n              yRadius = args[3],\n              aStartAngle = args[4],\n              aEndAngle = args[5],\n              aClockwise = !!args[6],\n              aRotation = args[7];\n          var deltaAngle = aEndAngle - aStartAngle;\n          var angle;\n          var tdivisions = divisions * 2;\n          var cos, sin;\n\n          if (aRotation !== 0) {\n            cos = Math.cos(aRotation);\n            sin = Math.sin(aRotation);\n          }\n\n          for (var j = 1; j <= tdivisions; j++) {\n            var t = j / tdivisions;\n\n            if (!aClockwise) {\n              t = 1 - t;\n            }\n\n            angle = aStartAngle + t * deltaAngle;\n            tx = aX + xRadius * Math.cos(angle);\n            ty = aY + yRadius * Math.sin(angle);\n\n            if (aRotation !== 0) {\n              var x = tx,\n                  y = ty; // Rotate the point about the center of the ellipse.\n\n              tx = (x - aX) * cos - (y - aY) * sin + aX;\n              ty = (x - aX) * sin + (y - aY) * cos + aY;\n            } //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\n            points.push(new THREE.Vector2(tx, ty));\n          } //console.log(points);\n\n\n          break;\n      } // end switch\n\n    } // Normalize to remove the closing point by default.\n\n\n    var lastPoint = points[points.length - 1];\n    if (Math.abs(lastPoint.x - points[0].x) < Number.EPSILON && Math.abs(lastPoint.y - points[0].y) < Number.EPSILON) points.splice(points.length - 1, 1);\n\n    if (this.autoClose) {\n      points.push(points[0]);\n    }\n\n    return points;\n  },\n  toShapes: function toShapes(isCCW, noHoles) {\n    function extractSubpaths(inActions) {\n      var subPaths = [],\n          lastPath = new THREE.Path();\n\n      for (var i = 0, l = inActions.length; i < l; i++) {\n        var item = inActions[i];\n        var args = item.args;\n        var action = item.action;\n\n        if (action === 'moveTo') {\n          if (lastPath.actions.length !== 0) {\n            subPaths.push(lastPath);\n            lastPath = new THREE.Path();\n          }\n        }\n\n        lastPath[action].apply(lastPath, args);\n      }\n\n      if (lastPath.actions.length !== 0) {\n        subPaths.push(lastPath);\n      } // console.log(subPaths);\n\n\n      return subPaths;\n    }\n\n    function toShapesNoHoles(inSubpaths) {\n      var shapes = [];\n\n      for (var i = 0, l = inSubpaths.length; i < l; i++) {\n        var tmpPath = inSubpaths[i];\n        var tmpShape = new THREE.Shape();\n        tmpShape.actions = tmpPath.actions;\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n      } //console.log(\"shape\", shapes);\n\n\n      return shapes;\n    }\n\n    function isPointInsidePolygon(inPt, inPolygon) {\n      var polyLen = inPolygon.length; // inPt on polygon contour => immediate success    or\n      // toggling of inside/outside at every single! intersection point of an edge\n      //  with the horizontal line through inPt, left of inPt\n      //  not counting lowerY endpoints of edges and whole edges on that line\n\n      var inside = false;\n\n      for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n        var edgeLowPt = inPolygon[p];\n        var edgeHighPt = inPolygon[q];\n        var edgeDx = edgeHighPt.x - edgeLowPt.x;\n        var edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n        if (Math.abs(edgeDy) > Number.EPSILON) {\n          // not parallel\n          if (edgeDy < 0) {\n            edgeLowPt = inPolygon[q];\n            edgeDx = -edgeDx;\n            edgeHighPt = inPolygon[p];\n            edgeDy = -edgeDy;\n          }\n\n          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n          if (inPt.y === edgeLowPt.y) {\n            if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n            // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n          } else {\n            var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n            if (perpEdge === 0) return true; // inPt is on contour ?\n\n            if (perpEdge < 0) continue;\n            inside = !inside; // true intersection left of inPt\n          }\n        } else {\n          // parallel or collinear\n          if (inPt.y !== edgeLowPt.y) continue; // parallel\n          // edge lies on the same horizontal line as inPt\n\n          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n          // continue;\n        }\n      }\n\n      return inside;\n    }\n\n    var isClockWise = THREE.ShapeUtils.isClockWise;\n    var subPaths = extractSubpaths(this.actions);\n    if (subPaths.length === 0) return [];\n    if (noHoles === true) return toShapesNoHoles(subPaths);\n    var solid,\n        tmpPath,\n        tmpShape,\n        shapes = [];\n\n    if (subPaths.length === 1) {\n      tmpPath = subPaths[0];\n      tmpShape = new THREE.Shape();\n      tmpShape.actions = tmpPath.actions;\n      tmpShape.curves = tmpPath.curves;\n      shapes.push(tmpShape);\n      return shapes;\n    }\n\n    var holesFirst = !isClockWise(subPaths[0].getPoints());\n    holesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n    var betterShapeHoles = [];\n    var newShapes = [];\n    var newShapeHoles = [];\n    var mainIdx = 0;\n    var tmpPoints;\n    newShapes[mainIdx] = undefined;\n    newShapeHoles[mainIdx] = [];\n\n    for (var i = 0, l = subPaths.length; i < l; i++) {\n      tmpPath = subPaths[i];\n      tmpPoints = tmpPath.getPoints();\n      solid = isClockWise(tmpPoints);\n      solid = isCCW ? !solid : solid;\n\n      if (solid) {\n        if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n        newShapes[mainIdx] = {\n          s: new THREE.Shape(),\n          p: tmpPoints\n        };\n        newShapes[mainIdx].s.actions = tmpPath.actions;\n        newShapes[mainIdx].s.curves = tmpPath.curves;\n        if (holesFirst) mainIdx++;\n        newShapeHoles[mainIdx] = []; //console.log('cw', i);\n      } else {\n        newShapeHoles[mainIdx].push({\n          h: tmpPath,\n          p: tmpPoints[0]\n        }); //console.log('ccw', i);\n      }\n    } // only Holes? -> probably all Shapes with wrong orientation\n\n\n    if (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n    if (newShapes.length > 1) {\n      var ambiguous = false;\n      var toChange = [];\n\n      for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        betterShapeHoles[sIdx] = [];\n      }\n\n      for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n        var sho = newShapeHoles[sIdx];\n\n        for (var hIdx = 0; hIdx < sho.length; hIdx++) {\n          var ho = sho[hIdx];\n          var hole_unassigned = true;\n\n          for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n              if (sIdx !== s2Idx) toChange.push({\n                froms: sIdx,\n                tos: s2Idx,\n                hole: hIdx\n              });\n\n              if (hole_unassigned) {\n                hole_unassigned = false;\n                betterShapeHoles[s2Idx].push(ho);\n              } else {\n                ambiguous = true;\n              }\n            }\n          }\n\n          if (hole_unassigned) {\n            betterShapeHoles[sIdx].push(ho);\n          }\n        }\n      } // console.log(\"ambiguous: \", ambiguous);\n\n\n      if (toChange.length > 0) {\n        // console.log(\"to change: \", toChange);\n        if (!ambiguous) newShapeHoles = betterShapeHoles;\n      }\n    }\n\n    var tmpHoles;\n\n    for (var i = 0, il = newShapes.length; i < il; i++) {\n      tmpShape = newShapes[i].s;\n      shapes.push(tmpShape);\n      tmpHoles = newShapeHoles[i];\n\n      for (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n        tmpShape.holes.push(tmpHoles[j].h);\n      }\n    } //console.log(\"shape\", shapes);\n\n\n    return shapes;\n  }\n}); // File:src/extras/core/Shape.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n  THREE.Path.apply(this, arguments);\n  this.holes = [];\n};\n\nTHREE.Shape.prototype = Object.assign(Object.create(THREE.Path.prototype), {\n  constructor: THREE.Shape,\n  // Convenience method to return ExtrudeGeometry\n  extrude: function extrude(options) {\n    return new THREE.ExtrudeGeometry(this, options);\n  },\n  // Convenience method to return ShapeGeometry\n  makeGeometry: function makeGeometry(options) {\n    return new THREE.ShapeGeometry(this, options);\n  },\n  getPointsHoles: function getPointsHoles(divisions) {\n    var holesPts = [];\n\n    for (var i = 0, l = this.holes.length; i < l; i++) {\n      holesPts[i] = this.holes[i].getPoints(divisions);\n    }\n\n    return holesPts;\n  },\n  // Get points of shape and holes (keypoints based on segments parameter)\n  extractAllPoints: function extractAllPoints(divisions) {\n    return {\n      shape: this.getPoints(divisions),\n      holes: this.getPointsHoles(divisions)\n    };\n  },\n  extractPoints: function extractPoints(divisions) {\n    return this.extractAllPoints(divisions);\n  }\n}); // File:src/extras/curves/LineCurve.js\n\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\n\nTHREE.LineCurve = function (v1, v2) {\n  this.v1 = v1;\n  this.v2 = v2;\n};\n\nTHREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function (t) {\n  var point = this.v2.clone().sub(this.v1);\n  point.multiplyScalar(t).add(this.v1);\n  return point;\n}; // Line curve is linear, so we can overwrite default getPointAt\n\n\nTHREE.LineCurve.prototype.getPointAt = function (u) {\n  return this.getPoint(u);\n};\n\nTHREE.LineCurve.prototype.getTangent = function (t) {\n  var tangent = this.v2.clone().sub(this.v1);\n  return tangent.normalize();\n}; // File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function (v0, v1, v2) {\n  this.v0 = v0;\n  this.v1 = v1;\n  this.v2 = v2;\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function (t) {\n  var b2 = THREE.ShapeUtils.b2;\n  return new THREE.Vector2(b2(t, this.v0.x, this.v1.x, this.v2.x), b2(t, this.v0.y, this.v1.y, this.v2.y));\n};\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function (t) {\n  var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n  return new THREE.Vector2(tangentQuadraticBezier(t, this.v0.x, this.v1.x, this.v2.x), tangentQuadraticBezier(t, this.v0.y, this.v1.y, this.v2.y)).normalize();\n}; // File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\n\n\nTHREE.CubicBezierCurve = function (v0, v1, v2, v3) {\n  this.v0 = v0;\n  this.v1 = v1;\n  this.v2 = v2;\n  this.v3 = v3;\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function (t) {\n  var b3 = THREE.ShapeUtils.b3;\n  return new THREE.Vector2(b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y));\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function (t) {\n  var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n  return new THREE.Vector2(tangentCubicBezier(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), tangentCubicBezier(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y)).normalize();\n}; // File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\n\n\nTHREE.SplineCurve = function (points\n/* array of Vector2 */\n) {\n  this.points = points == undefined ? [] : points;\n};\n\nTHREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function (t) {\n  var points = this.points;\n  var point = (points.length - 1) * t;\n  var intPoint = Math.floor(point);\n  var weight = point - intPoint;\n  var point0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n  var point1 = points[intPoint];\n  var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n  var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n  var interpolate = THREE.CurveUtils.interpolate;\n  return new THREE.Vector2(interpolate(point0.x, point1.x, point2.x, point3.x, weight), interpolate(point0.y, point1.y, point2.y, point3.y, weight));\n}; // File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\n\n\nTHREE.EllipseCurve = function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n  this.aX = aX;\n  this.aY = aY;\n  this.xRadius = xRadius;\n  this.yRadius = yRadius;\n  this.aStartAngle = aStartAngle;\n  this.aEndAngle = aEndAngle;\n  this.aClockwise = aClockwise;\n  this.aRotation = aRotation || 0;\n};\n\nTHREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function (t) {\n  var deltaAngle = this.aEndAngle - this.aStartAngle;\n  if (deltaAngle < 0) deltaAngle += Math.PI * 2;\n  if (deltaAngle > Math.PI * 2) deltaAngle -= Math.PI * 2;\n  var angle;\n\n  if (this.aClockwise === true) {\n    angle = this.aEndAngle + (1 - t) * (Math.PI * 2 - deltaAngle);\n  } else {\n    angle = this.aStartAngle + t * deltaAngle;\n  }\n\n  var x = this.aX + this.xRadius * Math.cos(angle);\n  var y = this.aY + this.yRadius * Math.sin(angle);\n\n  if (this.aRotation !== 0) {\n    var cos = Math.cos(this.aRotation);\n    var sin = Math.sin(this.aRotation);\n    var tx = x,\n        ty = y; // Rotate the point about the center of the ellipse.\n\n    x = (tx - this.aX) * cos - (ty - this.aY) * sin + this.aX;\n    y = (tx - this.aX) * sin + (ty - this.aY) * cos + this.aY;\n  }\n\n  return new THREE.Vector2(x, y);\n}; // File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\n\n\nTHREE.ArcCurve = function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n  THREE.EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n};\n\nTHREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve; // File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(function (v1, v2) {\n  this.v1 = v1;\n  this.v2 = v2;\n}, function (t) {\n  var vector = new THREE.Vector3();\n  vector.subVectors(this.v2, this.v1); // diff\n\n  vector.multiplyScalar(t);\n  vector.add(this.v1);\n  return vector;\n}); // File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(function (v0, v1, v2) {\n  this.v0 = v0;\n  this.v1 = v1;\n  this.v2 = v2;\n}, function (t) {\n  var b2 = THREE.ShapeUtils.b2;\n  return new THREE.Vector3(b2(t, this.v0.x, this.v1.x, this.v2.x), b2(t, this.v0.y, this.v1.y, this.v2.y), b2(t, this.v0.z, this.v1.z, this.v2.z));\n}); // File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(function (v0, v1, v2, v3) {\n  this.v0 = v0;\n  this.v1 = v1;\n  this.v2 = v2;\n  this.v3 = v3;\n}, function (t) {\n  var b3 = THREE.ShapeUtils.b3;\n  return new THREE.Vector3(b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y), b3(t, this.v0.z, this.v1.z, this.v2.z, this.v3.z));\n}); // File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\n\nTHREE.SplineCurve3 = THREE.Curve.create(function (points\n/* array of Vector3 */\n) {\n  console.warn('THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3');\n  this.points = points == undefined ? [] : points;\n}, function (t) {\n  var points = this.points;\n  var point = (points.length - 1) * t;\n  var intPoint = Math.floor(point);\n  var weight = point - intPoint;\n  var point0 = points[intPoint == 0 ? intPoint : intPoint - 1];\n  var point1 = points[intPoint];\n  var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n  var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n  var interpolate = THREE.CurveUtils.interpolate;\n  return new THREE.Vector3(interpolate(point0.x, point1.x, point2.x, point3.x, weight), interpolate(point0.y, point1.y, point2.y, point3.y, weight), interpolate(point0.z, point1.z, point2.z, point3.z, weight));\n}); // File:src/extras/curves/CatmullRomCurve3.js\n\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\n\nTHREE.CatmullRomCurve3 = function () {\n  var tmp = new THREE.Vector3(),\n      px = new CubicPoly(),\n      py = new CubicPoly(),\n      pz = new CubicPoly();\n  /*\r\n  Based on an optimized c++ solution in\r\n   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n   - http://ideone.com/NoEbVM\r\n  \n  This CubicPoly class could be used for reusing some variables and calculations,\r\n  but for three.js curve use, it could be possible inlined and flatten into a single function call\r\n  which can be placed in CurveUtils.\r\n  */\n\n  function CubicPoly() {}\n  /*\r\n   * Compute coefficients for a cubic polynomial\r\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n   * such that\r\n   *   p(0) = x0, p(1) = x1\r\n   *  and\r\n   *   p'(0) = t0, p'(1) = t1.\r\n   */\n\n\n  CubicPoly.prototype.init = function (x0, x1, t0, t1) {\n    this.c0 = x0;\n    this.c1 = t0;\n    this.c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    this.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  };\n\n  CubicPoly.prototype.initNonuniformCatmullRom = function (x0, x1, x2, x3, dt0, dt1, dt2) {\n    // compute tangents when parameterized in [t1,t2]\n    var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n    var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n    t1 *= dt1;\n    t2 *= dt1; // initCubicPoly\n\n    this.init(x1, x2, t1, t2);\n  }; // standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\n\n  CubicPoly.prototype.initCatmullRom = function (x0, x1, x2, x3, tension) {\n    this.init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n  };\n\n  CubicPoly.prototype.calc = function (t) {\n    var t2 = t * t;\n    var t3 = t2 * t;\n    return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n  }; // Subclass Three.js curve\n\n\n  return THREE.Curve.create(function (p\n  /* array of Vector3 */\n  ) {\n    this.points = p || [];\n    this.closed = false;\n  }, function (t) {\n    var points = this.points,\n        point,\n        intPoint,\n        weight,\n        l;\n    l = points.length;\n    if (l < 2) console.log('duh, you need at least 2 points');\n    point = (l - (this.closed ? 0 : 1)) * t;\n    intPoint = Math.floor(point);\n    weight = point - intPoint;\n\n    if (this.closed) {\n      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / points.length) + 1) * points.length;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n\n    var p0, p1, p2, p3; // 4 points\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n\n    p1 = points[intPoint % l];\n    p2 = points[(intPoint + 1) % l];\n\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n\n    if (this.type === undefined || this.type === 'centripetal' || this.type === 'chordal') {\n      // init Centripetal / Chordal Catmull-Rom\n      var pow = this.type === 'chordal' ? 0.5 : 0.25;\n      var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      var dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.type === 'catmullrom') {\n      var tension = this.tension !== undefined ? this.tension : 0.5;\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, tension);\n    }\n\n    var v = new THREE.Vector3(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return v;\n  });\n}(); // File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = function (points) {\n  console.warn('THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.');\n  THREE.CatmullRomCurve3.call(this, points);\n  this.type = 'catmullrom';\n  this.closed = true;\n};\n\nTHREE.ClosedSplineCurve3.prototype = Object.create(THREE.CatmullRomCurve3.prototype); // File:src/extras/geometries/BoxGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\n\nTHREE.BoxGeometry = function (width, height, depth, widthSegments, heightSegments, depthSegments) {\n  THREE.Geometry.call(this);\n  this.type = 'BoxGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    depth: depth,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    depthSegments: depthSegments\n  };\n  this.fromBufferGeometry(new THREE.BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n  this.mergeVertices();\n};\n\nTHREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\nTHREE.CubeGeometry = THREE.BoxGeometry; // File:src/extras/geometries/BoxBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\n\nTHREE.BoxBufferGeometry = function (width, height, depth, widthSegments, heightSegments, depthSegments) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'BoxBufferGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    depth: depth,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    depthSegments: depthSegments\n  };\n  var scope = this; // segments\n\n  widthSegments = Math.floor(widthSegments) || 1;\n  heightSegments = Math.floor(heightSegments) || 1;\n  depthSegments = Math.floor(depthSegments) || 1; // these are used to calculate buffer length\n\n  var vertexCount = calculateVertexCount(widthSegments, heightSegments, depthSegments);\n  var indexCount = calculateIndexCount(widthSegments, heightSegments, depthSegments); // buffers\n\n  var indices = new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount);\n  var vertices = new Float32Array(vertexCount * 3);\n  var normals = new Float32Array(vertexCount * 3);\n  var uvs = new Float32Array(vertexCount * 2); // offset variables\n\n  var vertexBufferOffset = 0;\n  var uvBufferOffset = 0;\n  var indexBufferOffset = 0;\n  var numberOfVertices = 0; // group variables\n\n  var groupStart = 0; // build each side of the box geometry\n\n  buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n  buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n  buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n  buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n  buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n  buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n  // build geometry\n\n  this.setIndex(new THREE.BufferAttribute(indices, 1));\n  this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n  this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2)); // helper functions\n\n  function calculateVertexCount(w, h, d) {\n    var vertices = 0; // calculate the amount of vertices for each side (plane)\n\n    vertices += (w + 1) * (h + 1) * 2; // xy\n\n    vertices += (w + 1) * (d + 1) * 2; // xz\n\n    vertices += (d + 1) * (h + 1) * 2; // zy\n\n    return vertices;\n  }\n\n  function calculateIndexCount(w, h, d) {\n    var index = 0; // calculate the amount of squares for each side\n\n    index += w * h * 2; // xy\n\n    index += w * d * 2; // xz\n\n    index += d * h * 2; // zy\n\n    return index * 6; // two triangles per square => six vertices per square\n  }\n\n  function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n    var segmentWidth = width / gridX;\n    var segmentHeight = height / gridY;\n    var widthHalf = width / 2;\n    var heightHalf = height / 2;\n    var depthHalf = depth / 2;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var vertexCounter = 0;\n    var groupCount = 0;\n    var vector = new THREE.Vector3(); // generate vertices, normals and uvs\n\n    for (var iy = 0; iy < gridY1; iy++) {\n      var y = iy * segmentHeight - heightHalf;\n\n      for (var ix = 0; ix < gridX1; ix++) {\n        var x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n        vector[u] = x * udir;\n        vector[v] = y * vdir;\n        vector[w] = depthHalf; // now apply vector to vertex buffer\n\n        vertices[vertexBufferOffset] = vector.x;\n        vertices[vertexBufferOffset + 1] = vector.y;\n        vertices[vertexBufferOffset + 2] = vector.z; // set values to correct vector component\n\n        vector[u] = 0;\n        vector[v] = 0;\n        vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n        normals[vertexBufferOffset] = vector.x;\n        normals[vertexBufferOffset + 1] = vector.y;\n        normals[vertexBufferOffset + 2] = vector.z; // uvs\n\n        uvs[uvBufferOffset] = ix / gridX;\n        uvs[uvBufferOffset + 1] = 1 - iy / gridY; // update offsets and counters\n\n        vertexBufferOffset += 3;\n        uvBufferOffset += 2;\n        vertexCounter += 1;\n      }\n    } // 1. you need three indices to draw a single face\n    // 2. a single segment consists of two faces\n    // 3. so we need to generate six (2*3) indices per segment\n\n\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        // indices\n        var a = numberOfVertices + ix + gridX1 * iy;\n        var b = numberOfVertices + ix + gridX1 * (iy + 1);\n        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n        var d = numberOfVertices + (ix + 1) + gridX1 * iy; // face one\n\n        indices[indexBufferOffset] = a;\n        indices[indexBufferOffset + 1] = b;\n        indices[indexBufferOffset + 2] = d; // face two\n\n        indices[indexBufferOffset + 3] = b;\n        indices[indexBufferOffset + 4] = c;\n        indices[indexBufferOffset + 5] = d; // update offsets and counters\n\n        indexBufferOffset += 6;\n        groupCount += 6;\n      }\n    } // add a group to the geometry. this will ensure multi material support\n\n\n    scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n    groupStart += groupCount; // update total number of vertices\n\n    numberOfVertices += vertexCounter;\n  }\n};\n\nTHREE.BoxBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry; // File:src/extras/geometries/CircleGeometry.js\n\n/**\r\n * @author hughes\r\n */\n\nTHREE.CircleGeometry = function (radius, segments, thetaStart, thetaLength) {\n  THREE.Geometry.call(this);\n  this.type = 'CircleGeometry';\n  this.parameters = {\n    radius: radius,\n    segments: segments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new THREE.CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n};\n\nTHREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry; // File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\n\nTHREE.CircleBufferGeometry = function (radius, segments, thetaStart, thetaLength) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'CircleBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    segments: segments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  radius = radius || 50;\n  segments = segments !== undefined ? Math.max(3, segments) : 8;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n  var vertices = segments + 2;\n  var positions = new Float32Array(vertices * 3);\n  var normals = new Float32Array(vertices * 3);\n  var uvs = new Float32Array(vertices * 2); // center data is already zero, but need to set a few extras\n\n  normals[2] = 1.0;\n  uvs[0] = 0.5;\n  uvs[1] = 0.5;\n\n  for (var s = 0, i = 3, ii = 2; s <= segments; s++, i += 3, ii += 2) {\n    var segment = thetaStart + s / segments * thetaLength;\n    positions[i] = radius * Math.cos(segment);\n    positions[i + 1] = radius * Math.sin(segment);\n    normals[i + 2] = 1; // normal z\n\n    uvs[ii] = (positions[i] / radius + 1) / 2;\n    uvs[ii + 1] = (positions[i + 1] / radius + 1) / 2;\n  }\n\n  var indices = [];\n\n  for (var i = 1; i <= segments; i++) {\n    indices.push(i, i + 1, 0);\n  }\n\n  this.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n  this.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n  this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n  this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n  this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius);\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry; // File:src/extras/geometries/CylinderBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\n\nTHREE.CylinderBufferGeometry = function (radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'CylinderBufferGeometry';\n  this.parameters = {\n    radiusTop: radiusTop,\n    radiusBottom: radiusBottom,\n    height: height,\n    radialSegments: radialSegments,\n    heightSegments: heightSegments,\n    openEnded: openEnded,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  var scope = this;\n  radiusTop = radiusTop !== undefined ? radiusTop : 20;\n  radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n  height = height !== undefined ? height : 100;\n  radialSegments = Math.floor(radialSegments) || 8;\n  heightSegments = Math.floor(heightSegments) || 1;\n  openEnded = openEnded !== undefined ? openEnded : false;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n  thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI; // used to calculate buffer length\n\n  var nbCap = 0;\n\n  if (openEnded === false) {\n    if (radiusTop > 0) nbCap++;\n    if (radiusBottom > 0) nbCap++;\n  }\n\n  var vertexCount = calculateVertexCount();\n  var indexCount = calculateIndexCount(); // buffers\n\n  var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n  var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n  var index = 0,\n      indexOffset = 0,\n      indexArray = [],\n      halfHeight = height / 2; // group variables\n\n  var groupStart = 0; // generate geometry\n\n  generateTorso();\n\n  if (openEnded === false) {\n    if (radiusTop > 0) generateCap(true);\n    if (radiusBottom > 0) generateCap(false);\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.addAttribute('position', vertices);\n  this.addAttribute('normal', normals);\n  this.addAttribute('uv', uvs); // helper functions\n\n  function calculateVertexCount() {\n    var count = (radialSegments + 1) * (heightSegments + 1);\n\n    if (openEnded === false) {\n      count += (radialSegments + 1) * nbCap + radialSegments * nbCap;\n    }\n\n    return count;\n  }\n\n  function calculateIndexCount() {\n    var count = radialSegments * heightSegments * 2 * 3;\n\n    if (openEnded === false) {\n      count += radialSegments * nbCap * 3;\n    }\n\n    return count;\n  }\n\n  function generateTorso() {\n    var x, y;\n    var normal = new THREE.Vector3();\n    var vertex = new THREE.Vector3();\n    var groupCount = 0; // this will be used to calculate the normal\n\n    var tanTheta = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n    for (y = 0; y <= heightSegments; y++) {\n      var indexRow = [];\n      var v = y / heightSegments; // calculate the radius of the current row\n\n      var radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n      for (x = 0; x <= radialSegments; x++) {\n        var u = x / radialSegments; // vertex\n\n        vertex.x = radius * Math.sin(u * thetaLength + thetaStart);\n        vertex.y = -v * height + halfHeight;\n        vertex.z = radius * Math.cos(u * thetaLength + thetaStart);\n        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n        normal.copy(vertex); // handle special case if radiusTop/radiusBottom is zero\n\n        if (radiusTop === 0 && y === 0 || radiusBottom === 0 && y === heightSegments) {\n          normal.x = Math.sin(u * thetaLength + thetaStart);\n          normal.z = Math.cos(u * thetaLength + thetaStart);\n        }\n\n        normal.setY(Math.sqrt(normal.x * normal.x + normal.z * normal.z) * tanTheta).normalize();\n        normals.setXYZ(index, normal.x, normal.y, normal.z); // uv\n\n        uvs.setXY(index, u, 1 - v); // save index of vertex in respective row\n\n        indexRow.push(index); // increase index\n\n        index++;\n      } // now save vertices of the row in our index array\n\n\n      indexArray.push(indexRow);\n    } // generate indices\n\n\n    for (x = 0; x < radialSegments; x++) {\n      for (y = 0; y < heightSegments; y++) {\n        // we use the index array to access the correct indices\n        var i1 = indexArray[y][x];\n        var i2 = indexArray[y + 1][x];\n        var i3 = indexArray[y + 1][x + 1];\n        var i4 = indexArray[y][x + 1]; // face one\n\n        indices.setX(indexOffset, i1);\n        indexOffset++;\n        indices.setX(indexOffset, i2);\n        indexOffset++;\n        indices.setX(indexOffset, i4);\n        indexOffset++; // face two\n\n        indices.setX(indexOffset, i2);\n        indexOffset++;\n        indices.setX(indexOffset, i3);\n        indexOffset++;\n        indices.setX(indexOffset, i4);\n        indexOffset++; // update counters\n\n        groupCount += 6;\n      }\n    } // add a group to the geometry. this will ensure multi material support\n\n\n    scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n    groupStart += groupCount;\n  }\n\n  function generateCap(top) {\n    var x, centerIndexStart, centerIndexEnd;\n    var uv = new THREE.Vector2();\n    var vertex = new THREE.Vector3();\n    var groupCount = 0;\n    var radius = top === true ? radiusTop : radiusBottom;\n    var sign = top === true ? 1 : -1; // save the index of the first center vertex\n\n    centerIndexStart = index; // first we generate the center vertex data of the cap.\n    // because the geometry needs one set of uvs per face,\n    // we must generate a center vertex per face/segment\n\n    for (x = 1; x <= radialSegments; x++) {\n      // vertex\n      vertices.setXYZ(index, 0, halfHeight * sign, 0); // normal\n\n      normals.setXYZ(index, 0, sign, 0); // uv\n\n      uv.x = 0.5;\n      uv.y = 0.5;\n      uvs.setXY(index, uv.x, uv.y); // increase index\n\n      index++;\n    } // save the index of the last center vertex\n\n\n    centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n    for (x = 0; x <= radialSegments; x++) {\n      var u = x / radialSegments;\n      var theta = u * thetaLength + thetaStart;\n      var cosTheta = Math.cos(theta);\n      var sinTheta = Math.sin(theta); // vertex\n\n      vertex.x = radius * sinTheta;\n      vertex.y = halfHeight * sign;\n      vertex.z = radius * cosTheta;\n      vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n      normals.setXYZ(index, 0, sign, 0); // uv\n\n      uv.x = cosTheta * 0.5 + 0.5;\n      uv.y = sinTheta * 0.5 * sign + 0.5;\n      uvs.setXY(index, uv.x, uv.y); // increase index\n\n      index++;\n    } // generate indices\n\n\n    for (x = 0; x < radialSegments; x++) {\n      var c = centerIndexStart + x;\n      var i = centerIndexEnd + x;\n\n      if (top === true) {\n        // face top\n        indices.setX(indexOffset, i);\n        indexOffset++;\n        indices.setX(indexOffset, i + 1);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++;\n      } else {\n        // face bottom\n        indices.setX(indexOffset, i + 1);\n        indexOffset++;\n        indices.setX(indexOffset, i);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++;\n      } // update counters\n\n\n      groupCount += 3;\n    } // add a group to the geometry. this will ensure multi material support\n\n\n    scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n    groupStart += groupCount;\n  }\n};\n\nTHREE.CylinderBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry; // File:src/extras/geometries/CylinderGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.CylinderGeometry = function (radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  THREE.Geometry.call(this);\n  this.type = 'CylinderGeometry';\n  this.parameters = {\n    radiusTop: radiusTop,\n    radiusBottom: radiusBottom,\n    height: height,\n    radialSegments: radialSegments,\n    heightSegments: heightSegments,\n    openEnded: openEnded,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new THREE.CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n  this.mergeVertices();\n};\n\nTHREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry; // File:src/extras/geometries/ConeBufferGeometry.js\n\n/*\r\n * @author: abelnation / http://github.com/abelnation\r\n */\n\nTHREE.ConeBufferGeometry = function (radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  THREE.CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n  this.type = 'ConeBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    height: height,\n    radialSegments: radialSegments,\n    heightSegments: heightSegments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n};\n\nTHREE.ConeBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry; // File:src/extras/geometries/ConeGeometry.js\n\n/**\r\n * @author abelnation / http://github.com/abelnation\r\n */\n\nTHREE.ConeGeometry = function (radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n  THREE.CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n  this.type = 'ConeGeometry';\n  this.parameters = {\n    radius: radius,\n    height: height,\n    radialSegments: radialSegments,\n    heightSegments: heightSegments,\n    openEnded: openEnded,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n};\n\nTHREE.ConeGeometry.prototype = Object.create(THREE.CylinderGeometry.prototype);\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry; // File:src/extras/geometries/EdgesGeometry.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\nTHREE.EdgesGeometry = function (geometry, thresholdAngle) {\n  THREE.BufferGeometry.call(this);\n  thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n  var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n  var edge = [0, 0],\n      hash = {};\n\n  function sortFunction(a, b) {\n    return a - b;\n  }\n\n  var keys = ['a', 'b', 'c'];\n  var geometry2;\n\n  if (geometry instanceof THREE.BufferGeometry) {\n    geometry2 = new THREE.Geometry();\n    geometry2.fromBufferGeometry(geometry);\n  } else {\n    geometry2 = geometry.clone();\n  }\n\n  geometry2.mergeVertices();\n  geometry2.computeFaceNormals();\n  var vertices = geometry2.vertices;\n  var faces = geometry2.faces;\n\n  for (var i = 0, l = faces.length; i < l; i++) {\n    var face = faces[i];\n\n    for (var j = 0; j < 3; j++) {\n      edge[0] = face[keys[j]];\n      edge[1] = face[keys[(j + 1) % 3]];\n      edge.sort(sortFunction);\n      var key = edge.toString();\n\n      if (hash[key] === undefined) {\n        hash[key] = {\n          vert1: edge[0],\n          vert2: edge[1],\n          face1: i,\n          face2: undefined\n        };\n      } else {\n        hash[key].face2 = i;\n      }\n    }\n  }\n\n  var coords = [];\n\n  for (var key in hash) {\n    var h = hash[key];\n\n    if (h.face2 === undefined || faces[h.face1].normal.dot(faces[h.face2].normal) <= thresholdDot) {\n      var vertex = vertices[h.vert1];\n      coords.push(vertex.x);\n      coords.push(vertex.y);\n      coords.push(vertex.z);\n      vertex = vertices[h.vert2];\n      coords.push(vertex.x);\n      coords.push(vertex.y);\n      coords.push(vertex.z);\n    }\n  }\n\n  this.addAttribute('position', new THREE.BufferAttribute(new Float32Array(coords), 3));\n};\n\nTHREE.EdgesGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry; // File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  amount: <int>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\n\nTHREE.ExtrudeGeometry = function (shapes, options) {\n  if (typeof shapes === \"undefined\") {\n    shapes = [];\n    return;\n  }\n\n  THREE.Geometry.call(this);\n  this.type = 'ExtrudeGeometry';\n  shapes = Array.isArray(shapes) ? shapes : [shapes];\n  this.addShapeList(shapes, options);\n  this.computeFaceNormals(); // can't really use automatic vertex normals\n  // as then front and back sides get smoothed too\n  // should do separate smoothing just for sides\n  //this.computeVertexNormals();\n  //console.log( \"took\", ( Date.now() - startTime ) );\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function (shapes, options) {\n  var sl = shapes.length;\n\n  for (var s = 0; s < sl; s++) {\n    var shape = shapes[s];\n    this.addShape(shape, options);\n  }\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function (shape, options) {\n  var amount = options.amount !== undefined ? options.amount : 100;\n  var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\n  var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\n  var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n  var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n  var steps = options.steps !== undefined ? options.steps : 1;\n  var extrudePath = options.extrudePath;\n  var extrudePts,\n      extrudeByPath = false; // Use default WorldUVGenerator if no UV generators are specified.\n\n  var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n  var splineTube, binormal, normal, position2;\n\n  if (extrudePath) {\n    extrudePts = extrudePath.getSpacedPoints(steps);\n    extrudeByPath = true;\n    bevelEnabled = false; // bevels not supported for path extrusion\n    // SETUP TNB variables\n    // Reuse TNB from TubeGeomtry for now.\n    // TODO1 - have a .isClosed in spline?\n\n    splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n    binormal = new THREE.Vector3();\n    normal = new THREE.Vector3();\n    position2 = new THREE.Vector3();\n  } // Safeguards if bevels are not enabled\n\n\n  if (!bevelEnabled) {\n    bevelSegments = 0;\n    bevelThickness = 0;\n    bevelSize = 0;\n  } // Variables initialization\n\n\n  var ahole, h, hl; // looping of holes\n\n  var scope = this;\n  var shapesOffset = this.vertices.length;\n  var shapePoints = shape.extractPoints(curveSegments);\n  var vertices = shapePoints.shape;\n  var holes = shapePoints.holes;\n  var reverse = !THREE.ShapeUtils.isClockWise(vertices);\n\n  if (reverse) {\n    vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n\n      if (THREE.ShapeUtils.isClockWise(ahole)) {\n        holes[h] = ahole.reverse();\n      }\n    }\n\n    reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n  }\n\n  var faces = THREE.ShapeUtils.triangulateShape(vertices, holes);\n  /* Vertices */\n\n  var contour = vertices; // vertices has all points but contour has only points of circumference\n\n  for (h = 0, hl = holes.length; h < hl; h++) {\n    ahole = holes[h];\n    vertices = vertices.concat(ahole);\n  }\n\n  function scalePt2(pt, vec, size) {\n    if (!vec) console.error(\"THREE.ExtrudeGeometry: vec does not exist\");\n    return vec.clone().multiplyScalar(size).add(pt);\n  }\n\n  var b,\n      bs,\n      t,\n      z,\n      vert,\n      vlen = vertices.length,\n      face,\n      flen = faces.length; // Find directions for point movement\n\n  function getBevelVec(inPt, inPrev, inNext) {\n    // computes for inPt the corresponding point inPt' on a new contour\n    //   shifted by 1 unit (length of normalized vector) to the left\n    // if we walk along contour clockwise, this new contour is outside the old one\n    //\n    // inPt' is the intersection of the two lines parallel to the two\n    //  adjacent edges of inPt at a distance of 1 unit on the left side.\n    var v_trans_x,\n        v_trans_y,\n        shrink_by = 1; // resulting translation vector for inPt\n    // good reading for geometry algorithms (here: line-line intersection)\n    // http://geomalgorithms.com/a05-_intersect-1.html\n\n    var v_prev_x = inPt.x - inPrev.x,\n        v_prev_y = inPt.y - inPrev.y;\n    var v_next_x = inNext.x - inPt.x,\n        v_next_y = inNext.y - inPt.y;\n    var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n    var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n    if (Math.abs(collinear0) > Number.EPSILON) {\n      // not collinear\n      // length of vectors for normalizing\n      var v_prev_len = Math.sqrt(v_prev_lensq);\n      var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n      var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n      var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n      var ptNextShift_x = inNext.x - v_next_y / v_next_len;\n      var ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n      var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n      v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n      v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n      //  but prevent crazy spikes\n\n      var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n      if (v_trans_lensq <= 2) {\n        return new THREE.Vector2(v_trans_x, v_trans_y);\n      } else {\n        shrink_by = Math.sqrt(v_trans_lensq / 2);\n      }\n    } else {\n      // handle special case of collinear edges\n      var direction_eq = false; // assumes: opposite\n\n      if (v_prev_x > Number.EPSILON) {\n        if (v_next_x > Number.EPSILON) {\n          direction_eq = true;\n        }\n      } else {\n        if (v_prev_x < -Number.EPSILON) {\n          if (v_next_x < -Number.EPSILON) {\n            direction_eq = true;\n          }\n        } else {\n          if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n            direction_eq = true;\n          }\n        }\n      }\n\n      if (direction_eq) {\n        // console.log(\"Warning: lines are a straight sequence\");\n        v_trans_x = -v_prev_y;\n        v_trans_y = v_prev_x;\n        shrink_by = Math.sqrt(v_prev_lensq);\n      } else {\n        // console.log(\"Warning: lines are a straight spike\");\n        v_trans_x = v_prev_x;\n        v_trans_y = v_prev_y;\n        shrink_by = Math.sqrt(v_prev_lensq / 2);\n      }\n    }\n\n    return new THREE.Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n  }\n\n  var contourMovements = [];\n\n  for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n    if (j === il) j = 0;\n    if (k === il) k = 0; //  (j)---(i)---(k)\n    // console.log('i,j,k', i, j , k)\n\n    contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n  }\n\n  var holesMovements = [],\n      oneHoleMovements,\n      verticesMovements = contourMovements.concat();\n\n  for (h = 0, hl = holes.length; h < hl; h++) {\n    ahole = holes[h];\n    oneHoleMovements = [];\n\n    for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n      if (j === il) j = 0;\n      if (k === il) k = 0; //  (j)---(i)---(k)\n\n      oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n    }\n\n    holesMovements.push(oneHoleMovements);\n    verticesMovements = verticesMovements.concat(oneHoleMovements);\n  } // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n  for (b = 0; b < bevelSegments; b++) {\n    //for ( b = bevelSegments; b > 0; b -- ) {\n    t = b / bevelSegments;\n    z = bevelThickness * (1 - t); //z = bevelThickness * t;\n\n    bs = bevelSize * Math.sin(t * Math.PI / 2); // curved\n    //bs = bevelSize * t; // linear\n    // contract shape\n\n    for (i = 0, il = contour.length; i < il; i++) {\n      vert = scalePt2(contour[i], contourMovements[i], bs);\n      v(vert.x, vert.y, -z);\n    } // expand holes\n\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n      oneHoleMovements = holesMovements[h];\n\n      for (i = 0, il = ahole.length; i < il; i++) {\n        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n        v(vert.x, vert.y, -z);\n      }\n    }\n  }\n\n  bs = bevelSize; // Back facing vertices\n\n  for (i = 0; i < vlen; i++) {\n    vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n    if (!extrudeByPath) {\n      v(vert.x, vert.y, 0);\n    } else {\n      // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n      normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n      binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n      position2.copy(extrudePts[0]).add(normal).add(binormal);\n      v(position2.x, position2.y, position2.z);\n    }\n  } // Add stepped vertices...\n  // Including front facing vertices\n\n\n  var s;\n\n  for (s = 1; s <= steps; s++) {\n    for (i = 0; i < vlen; i++) {\n      vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n      if (!extrudeByPath) {\n        v(vert.x, vert.y, amount / steps * s);\n      } else {\n        // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n        normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n        binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n        position2.copy(extrudePts[s]).add(normal).add(binormal);\n        v(position2.x, position2.y, position2.z);\n      }\n    }\n  } // Add bevel segments planes\n  //for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n  for (b = bevelSegments - 1; b >= 0; b--) {\n    t = b / bevelSegments;\n    z = bevelThickness * (1 - t); //bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\n    bs = bevelSize * Math.sin(t * Math.PI / 2); // contract shape\n\n    for (i = 0, il = contour.length; i < il; i++) {\n      vert = scalePt2(contour[i], contourMovements[i], bs);\n      v(vert.x, vert.y, amount + z);\n    } // expand holes\n\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n      oneHoleMovements = holesMovements[h];\n\n      for (i = 0, il = ahole.length; i < il; i++) {\n        vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n        if (!extrudeByPath) {\n          v(vert.x, vert.y, amount + z);\n        } else {\n          v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n        }\n      }\n    }\n  }\n  /* Faces */\n  // Top and bottom faces\n\n\n  buildLidFaces(); // Sides faces\n\n  buildSideFaces(); /////  Internal functions\n\n  function buildLidFaces() {\n    if (bevelEnabled) {\n      var layer = 0; // steps + 1\n\n      var offset = vlen * layer; // Bottom faces\n\n      for (i = 0; i < flen; i++) {\n        face = faces[i];\n        f3(face[2] + offset, face[1] + offset, face[0] + offset);\n      }\n\n      layer = steps + bevelSegments * 2;\n      offset = vlen * layer; // Top faces\n\n      for (i = 0; i < flen; i++) {\n        face = faces[i];\n        f3(face[0] + offset, face[1] + offset, face[2] + offset);\n      }\n    } else {\n      // Bottom faces\n      for (i = 0; i < flen; i++) {\n        face = faces[i];\n        f3(face[2], face[1], face[0]);\n      } // Top faces\n\n\n      for (i = 0; i < flen; i++) {\n        face = faces[i];\n        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n      }\n    }\n  } // Create faces for the z-sides of the shape\n\n\n  function buildSideFaces() {\n    var layeroffset = 0;\n    sidewalls(contour, layeroffset);\n    layeroffset += contour.length;\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n      sidewalls(ahole, layeroffset); //, true\n\n      layeroffset += ahole.length;\n    }\n  }\n\n  function sidewalls(contour, layeroffset) {\n    var j, k;\n    i = contour.length;\n\n    while (--i >= 0) {\n      j = i;\n      k = i - 1;\n      if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n      var s = 0,\n          sl = steps + bevelSegments * 2;\n\n      for (s = 0; s < sl; s++) {\n        var slen1 = vlen * s;\n        var slen2 = vlen * (s + 1);\n        var a = layeroffset + j + slen1,\n            b = layeroffset + k + slen1,\n            c = layeroffset + k + slen2,\n            d = layeroffset + j + slen2;\n        f4(a, b, c, d, contour, s, sl, j, k);\n      }\n    }\n  }\n\n  function v(x, y, z) {\n    scope.vertices.push(new THREE.Vector3(x, y, z));\n  }\n\n  function f3(a, b, c) {\n    a += shapesOffset;\n    b += shapesOffset;\n    c += shapesOffset;\n    scope.faces.push(new THREE.Face3(a, b, c, null, null, 0));\n    var uvs = uvgen.generateTopUV(scope, a, b, c);\n    scope.faceVertexUvs[0].push(uvs);\n  }\n\n  function f4(a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2) {\n    a += shapesOffset;\n    b += shapesOffset;\n    c += shapesOffset;\n    d += shapesOffset;\n    scope.faces.push(new THREE.Face3(a, b, d, null, null, 1));\n    scope.faces.push(new THREE.Face3(b, c, d, null, null, 1));\n    var uvs = uvgen.generateSideWallUV(scope, a, b, c, d);\n    scope.faceVertexUvs[0].push([uvs[0], uvs[1], uvs[3]]);\n    scope.faceVertexUvs[0].push([uvs[1], uvs[2], uvs[3]]);\n  }\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n  generateTopUV: function generateTopUV(geometry, indexA, indexB, indexC) {\n    var vertices = geometry.vertices;\n    var a = vertices[indexA];\n    var b = vertices[indexB];\n    var c = vertices[indexC];\n    return [new THREE.Vector2(a.x, a.y), new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y)];\n  },\n  generateSideWallUV: function generateSideWallUV(geometry, indexA, indexB, indexC, indexD) {\n    var vertices = geometry.vertices;\n    var a = vertices[indexA];\n    var b = vertices[indexB];\n    var c = vertices[indexC];\n    var d = vertices[indexD];\n\n    if (Math.abs(a.y - b.y) < 0.01) {\n      return [new THREE.Vector2(a.x, 1 - a.z), new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z)];\n    } else {\n      return [new THREE.Vector2(a.y, 1 - a.z), new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z)];\n    }\n  }\n}; // File:src/extras/geometries/ShapeGeometry.js\n\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\n\nTHREE.ShapeGeometry = function (shapes, options) {\n  THREE.Geometry.call(this);\n  this.type = 'ShapeGeometry';\n  if (Array.isArray(shapes) === false) shapes = [shapes];\n  this.addShapeList(shapes, options);\n  this.computeFaceNormals();\n};\n\nTHREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\n\nTHREE.ShapeGeometry.prototype.addShapeList = function (shapes, options) {\n  for (var i = 0, l = shapes.length; i < l; i++) {\n    this.addShape(shapes[i], options);\n  }\n\n  return this;\n};\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\n\n\nTHREE.ShapeGeometry.prototype.addShape = function (shape, options) {\n  if (options === undefined) options = {};\n  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n  var material = options.material;\n  var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator; //\n\n  var i, l, hole;\n  var shapesOffset = this.vertices.length;\n  var shapePoints = shape.extractPoints(curveSegments);\n  var vertices = shapePoints.shape;\n  var holes = shapePoints.holes;\n  var reverse = !THREE.ShapeUtils.isClockWise(vertices);\n\n  if (reverse) {\n    vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n    for (i = 0, l = holes.length; i < l; i++) {\n      hole = holes[i];\n\n      if (THREE.ShapeUtils.isClockWise(hole)) {\n        holes[i] = hole.reverse();\n      }\n    }\n\n    reverse = false;\n  }\n\n  var faces = THREE.ShapeUtils.triangulateShape(vertices, holes); // Vertices\n\n  for (i = 0, l = holes.length; i < l; i++) {\n    hole = holes[i];\n    vertices = vertices.concat(hole);\n  } //\n\n\n  var vert,\n      vlen = vertices.length;\n  var face,\n      flen = faces.length;\n\n  for (i = 0; i < vlen; i++) {\n    vert = vertices[i];\n    this.vertices.push(new THREE.Vector3(vert.x, vert.y, 0));\n  }\n\n  for (i = 0; i < flen; i++) {\n    face = faces[i];\n    var a = face[0] + shapesOffset;\n    var b = face[1] + shapesOffset;\n    var c = face[2] + shapesOffset;\n    this.faces.push(new THREE.Face3(a, b, c, null, null, material));\n    this.faceVertexUvs[0].push(uvgen.generateTopUV(this, a, b, c));\n  }\n}; // File:src/extras/geometries/LatheBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\n\nTHREE.LatheBufferGeometry = function (points, segments, phiStart, phiLength) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'LatheBufferGeometry';\n  this.parameters = {\n    points: points,\n    segments: segments,\n    phiStart: phiStart,\n    phiLength: phiLength\n  };\n  segments = Math.floor(segments) || 12;\n  phiStart = phiStart || 0;\n  phiLength = phiLength || Math.PI * 2; // clamp phiLength so it's in range of [ 0, 2PI ]\n\n  phiLength = THREE.Math.clamp(phiLength, 0, Math.PI * 2); // these are used to calculate buffer length\n\n  var vertexCount = (segments + 1) * points.length;\n  var indexCount = segments * points.length * 2 * 3; // buffers\n\n  var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n  var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n  var index = 0,\n      indexOffset = 0,\n      base;\n  var inversePointLength = 1.0 / (points.length - 1);\n  var inverseSegments = 1.0 / segments;\n  var vertex = new THREE.Vector3();\n  var uv = new THREE.Vector2();\n  var i, j; // generate vertices and uvs\n\n  for (i = 0; i <= segments; i++) {\n    var phi = phiStart + i * inverseSegments * phiLength;\n    var sin = Math.sin(phi);\n    var cos = Math.cos(phi);\n\n    for (j = 0; j <= points.length - 1; j++) {\n      // vertex\n      vertex.x = points[j].x * sin;\n      vertex.y = points[j].y;\n      vertex.z = points[j].x * cos;\n      vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // uv\n\n      uv.x = i / segments;\n      uv.y = j / (points.length - 1);\n      uvs.setXY(index, uv.x, uv.y); // increase index\n\n      index++;\n    }\n  } // generate indices\n\n\n  for (i = 0; i < segments; i++) {\n    for (j = 0; j < points.length - 1; j++) {\n      base = j + i * points.length; // indices\n\n      var a = base;\n      var b = base + points.length;\n      var c = base + points.length + 1;\n      var d = base + 1; // face one\n\n      indices.setX(indexOffset, a);\n      indexOffset++;\n      indices.setX(indexOffset, b);\n      indexOffset++;\n      indices.setX(indexOffset, d);\n      indexOffset++; // face two\n\n      indices.setX(indexOffset, b);\n      indexOffset++;\n      indices.setX(indexOffset, c);\n      indexOffset++;\n      indices.setX(indexOffset, d);\n      indexOffset++;\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.addAttribute('position', vertices);\n  this.addAttribute('uv', uvs); // generate normals\n\n  this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n  // because the corresponding vertices are identical (but still have different UVs).\n\n  if (phiLength === Math.PI * 2) {\n    var normals = this.attributes.normal.array;\n    var n1 = new THREE.Vector3();\n    var n2 = new THREE.Vector3();\n    var n = new THREE.Vector3(); // this is the buffer offset for the last line of vertices\n\n    base = segments * points.length * 3;\n\n    for (i = 0, j = 0; i < points.length; i++, j += 3) {\n      // select the normal of the vertex in the first line\n      n1.x = normals[j + 0];\n      n1.y = normals[j + 1];\n      n1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n      n2.x = normals[base + j + 0];\n      n2.y = normals[base + j + 1];\n      n2.z = normals[base + j + 2]; // average normals\n\n      n.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n      normals[j + 0] = normals[base + j + 0] = n.x;\n      normals[j + 1] = normals[base + j + 1] = n.y;\n      normals[j + 2] = normals[base + j + 2] = n.z;\n    } // next row\n\n  }\n};\n\nTHREE.LatheBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry; // File:src/extras/geometries/LatheGeometry.js\n\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n */\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function (points, segments, phiStart, phiLength) {\n  THREE.Geometry.call(this);\n  this.type = 'LatheGeometry';\n  this.parameters = {\n    points: points,\n    segments: segments,\n    phiStart: phiStart,\n    phiLength: phiLength\n  };\n  this.fromBufferGeometry(new THREE.LatheBufferGeometry(points, segments, phiStart, phiLength));\n  this.mergeVertices();\n};\n\nTHREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry; // File:src/extras/geometries/PlaneGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\n\nTHREE.PlaneGeometry = function (width, height, widthSegments, heightSegments) {\n  THREE.Geometry.call(this);\n  this.type = 'PlaneGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments\n  };\n  this.fromBufferGeometry(new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n};\n\nTHREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry; // File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\n\nTHREE.PlaneBufferGeometry = function (width, height, widthSegments, heightSegments) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'PlaneBufferGeometry';\n  this.parameters = {\n    width: width,\n    height: height,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments\n  };\n  var width_half = width / 2;\n  var height_half = height / 2;\n  var gridX = Math.floor(widthSegments) || 1;\n  var gridY = Math.floor(heightSegments) || 1;\n  var gridX1 = gridX + 1;\n  var gridY1 = gridY + 1;\n  var segment_width = width / gridX;\n  var segment_height = height / gridY;\n  var vertices = new Float32Array(gridX1 * gridY1 * 3);\n  var normals = new Float32Array(gridX1 * gridY1 * 3);\n  var uvs = new Float32Array(gridX1 * gridY1 * 2);\n  var offset = 0;\n  var offset2 = 0;\n\n  for (var iy = 0; iy < gridY1; iy++) {\n    var y = iy * segment_height - height_half;\n\n    for (var ix = 0; ix < gridX1; ix++) {\n      var x = ix * segment_width - width_half;\n      vertices[offset] = x;\n      vertices[offset + 1] = -y;\n      normals[offset + 2] = 1;\n      uvs[offset2] = ix / gridX;\n      uvs[offset2 + 1] = 1 - iy / gridY;\n      offset += 3;\n      offset2 += 2;\n    }\n  }\n\n  offset = 0;\n  var indices = new (vertices.length / 3 > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n\n  for (var iy = 0; iy < gridY; iy++) {\n    for (var ix = 0; ix < gridX; ix++) {\n      var a = ix + gridX1 * iy;\n      var b = ix + gridX1 * (iy + 1);\n      var c = ix + 1 + gridX1 * (iy + 1);\n      var d = ix + 1 + gridX1 * iy;\n      indices[offset] = a;\n      indices[offset + 1] = b;\n      indices[offset + 2] = d;\n      indices[offset + 3] = b;\n      indices[offset + 4] = c;\n      indices[offset + 5] = d;\n      offset += 6;\n    }\n  }\n\n  this.setIndex(new THREE.BufferAttribute(indices, 1));\n  this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n  this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry; // File:src/extras/geometries/RingBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\n\nTHREE.RingBufferGeometry = function (innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'RingBufferGeometry';\n  this.parameters = {\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    thetaSegments: thetaSegments,\n    phiSegments: phiSegments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  innerRadius = innerRadius || 20;\n  outerRadius = outerRadius || 50;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n  thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n  phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1; // these are used to calculate buffer length\n\n  var vertexCount = (thetaSegments + 1) * (phiSegments + 1);\n  var indexCount = thetaSegments * phiSegments * 2 * 3; // buffers\n\n  var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n  var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // some helper variables\n\n  var index = 0,\n      indexOffset = 0,\n      segment;\n  var radius = innerRadius;\n  var radiusStep = (outerRadius - innerRadius) / phiSegments;\n  var vertex = new THREE.Vector3();\n  var uv = new THREE.Vector2();\n  var j, i; // generate vertices, normals and uvs\n  // values are generate from the inside of the ring to the outside\n\n  for (j = 0; j <= phiSegments; j++) {\n    for (i = 0; i <= thetaSegments; i++) {\n      segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n      vertex.x = radius * Math.cos(segment);\n      vertex.y = radius * Math.sin(segment);\n      vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n      normals.setXYZ(index, 0, 0, 1); // uv\n\n      uv.x = (vertex.x / outerRadius + 1) / 2;\n      uv.y = (vertex.y / outerRadius + 1) / 2;\n      uvs.setXY(index, uv.x, uv.y); // increase index\n\n      index++;\n    } // increase the radius for next row of vertices\n\n\n    radius += radiusStep;\n  } // generate indices\n\n\n  for (j = 0; j < phiSegments; j++) {\n    var thetaSegmentLevel = j * (thetaSegments + 1);\n\n    for (i = 0; i < thetaSegments; i++) {\n      segment = i + thetaSegmentLevel; // indices\n\n      var a = segment;\n      var b = segment + thetaSegments + 1;\n      var c = segment + thetaSegments + 2;\n      var d = segment + 1; // face one\n\n      indices.setX(indexOffset, a);\n      indexOffset++;\n      indices.setX(indexOffset, b);\n      indexOffset++;\n      indices.setX(indexOffset, c);\n      indexOffset++; // face two\n\n      indices.setX(indexOffset, a);\n      indexOffset++;\n      indices.setX(indexOffset, c);\n      indexOffset++;\n      indices.setX(indexOffset, d);\n      indexOffset++;\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.addAttribute('position', vertices);\n  this.addAttribute('normal', normals);\n  this.addAttribute('uv', uvs);\n};\n\nTHREE.RingBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry; // File:src/extras/geometries/RingGeometry.js\n\n/**\r\n * @author Kaleb Murphy\r\n */\n\nTHREE.RingGeometry = function (innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n  THREE.Geometry.call(this);\n  this.type = 'RingGeometry';\n  this.parameters = {\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    thetaSegments: thetaSegments,\n    phiSegments: phiSegments,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new THREE.RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n};\n\nTHREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry; // File:src/extras/geometries/SphereGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.SphereGeometry = function (radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  THREE.Geometry.call(this);\n  this.type = 'SphereGeometry';\n  this.parameters = {\n    radius: radius,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    phiStart: phiStart,\n    phiLength: phiLength,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  this.fromBufferGeometry(new THREE.SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n};\n\nTHREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry; // File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n * based on THREE.SphereGeometry\r\n */\n\nTHREE.SphereBufferGeometry = function (radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'SphereBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    widthSegments: widthSegments,\n    heightSegments: heightSegments,\n    phiStart: phiStart,\n    phiLength: phiLength,\n    thetaStart: thetaStart,\n    thetaLength: thetaLength\n  };\n  radius = radius || 50;\n  widthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n  heightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n  phiStart = phiStart !== undefined ? phiStart : 0;\n  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n  thetaStart = thetaStart !== undefined ? thetaStart : 0;\n  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n  var thetaEnd = thetaStart + thetaLength;\n  var vertexCount = (widthSegments + 1) * (heightSegments + 1);\n  var positions = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2);\n  var index = 0,\n      vertices = [],\n      normal = new THREE.Vector3();\n\n  for (var y = 0; y <= heightSegments; y++) {\n    var verticesRow = [];\n    var v = y / heightSegments;\n\n    for (var x = 0; x <= widthSegments; x++) {\n      var u = x / widthSegments;\n      var px = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      var py = radius * Math.cos(thetaStart + v * thetaLength);\n      var pz = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      normal.set(px, py, pz).normalize();\n      positions.setXYZ(index, px, py, pz);\n      normals.setXYZ(index, normal.x, normal.y, normal.z);\n      uvs.setXY(index, u, 1 - v);\n      verticesRow.push(index);\n      index++;\n    }\n\n    vertices.push(verticesRow);\n  }\n\n  var indices = [];\n\n  for (var y = 0; y < heightSegments; y++) {\n    for (var x = 0; x < widthSegments; x++) {\n      var v1 = vertices[y][x + 1];\n      var v2 = vertices[y][x];\n      var v3 = vertices[y + 1][x];\n      var v4 = vertices[y + 1][x + 1];\n      if (y !== 0 || thetaStart > 0) indices.push(v1, v2, v4);\n      if (y !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(v2, v3, v4);\n    }\n  }\n\n  this.setIndex(new (positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute)(indices, 1));\n  this.addAttribute('position', positions);\n  this.addAttribute('normal', normals);\n  this.addAttribute('uv', uvs);\n  this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius);\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry; // File:src/extras/geometries/TextGeometry.js\n\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float> // how far from text outline is bevel\r\n * }\r\n */\n\nTHREE.TextGeometry = function (text, parameters) {\n  parameters = parameters || {};\n  var font = parameters.font;\n\n  if (font instanceof THREE.Font === false) {\n    console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n    return new THREE.Geometry();\n  }\n\n  var shapes = font.generateShapes(text, parameters.size, parameters.curveSegments); // translate parameters to ExtrudeGeometry API\n\n  parameters.amount = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n  if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n  if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n  if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n  THREE.ExtrudeGeometry.call(this, shapes, parameters);\n  this.type = 'TextGeometry';\n};\n\nTHREE.TextGeometry.prototype = Object.create(THREE.ExtrudeGeometry.prototype);\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry; // File:src/extras/geometries/TorusBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\n\nTHREE.TorusBufferGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'TorusBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    radialSegments: radialSegments,\n    tubularSegments: tubularSegments,\n    arc: arc\n  };\n  radius = radius || 100;\n  tube = tube || 40;\n  radialSegments = Math.floor(radialSegments) || 8;\n  tubularSegments = Math.floor(tubularSegments) || 6;\n  arc = arc || Math.PI * 2; // used to calculate buffer length\n\n  var vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n  var indexCount = radialSegments * tubularSegments * 2 * 3; // buffers\n\n  var indices = new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount);\n  var vertices = new Float32Array(vertexCount * 3);\n  var normals = new Float32Array(vertexCount * 3);\n  var uvs = new Float32Array(vertexCount * 2); // offset variables\n\n  var vertexBufferOffset = 0;\n  var uvBufferOffset = 0;\n  var indexBufferOffset = 0; // helper variables\n\n  var center = new THREE.Vector3();\n  var vertex = new THREE.Vector3();\n  var normal = new THREE.Vector3();\n  var j, i; // generate vertices, normals and uvs\n\n  for (j = 0; j <= radialSegments; j++) {\n    for (i = 0; i <= tubularSegments; i++) {\n      var u = i / tubularSegments * arc;\n      var v = j / radialSegments * Math.PI * 2; // vertex\n\n      vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n      vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n      vertex.z = tube * Math.sin(v);\n      vertices[vertexBufferOffset] = vertex.x;\n      vertices[vertexBufferOffset + 1] = vertex.y;\n      vertices[vertexBufferOffset + 2] = vertex.z; // this vector is used to calculate the normal\n\n      center.x = radius * Math.cos(u);\n      center.y = radius * Math.sin(u); // normal\n\n      normal.subVectors(vertex, center).normalize();\n      normals[vertexBufferOffset] = normal.x;\n      normals[vertexBufferOffset + 1] = normal.y;\n      normals[vertexBufferOffset + 2] = normal.z; // uv\n\n      uvs[uvBufferOffset] = i / tubularSegments;\n      uvs[uvBufferOffset + 1] = j / radialSegments; // update offsets\n\n      vertexBufferOffset += 3;\n      uvBufferOffset += 2;\n    }\n  } // generate indices\n\n\n  for (j = 1; j <= radialSegments; j++) {\n    for (i = 1; i <= tubularSegments; i++) {\n      // indices\n      var a = (tubularSegments + 1) * j + i - 1;\n      var b = (tubularSegments + 1) * (j - 1) + i - 1;\n      var c = (tubularSegments + 1) * (j - 1) + i;\n      var d = (tubularSegments + 1) * j + i; // face one\n\n      indices[indexBufferOffset] = a;\n      indices[indexBufferOffset + 1] = b;\n      indices[indexBufferOffset + 2] = d; // face two\n\n      indices[indexBufferOffset + 3] = b;\n      indices[indexBufferOffset + 4] = c;\n      indices[indexBufferOffset + 5] = d; // update offset\n\n      indexBufferOffset += 6;\n    }\n  } // build geometry\n\n\n  this.setIndex(new THREE.BufferAttribute(indices, 1));\n  this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n  this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n};\n\nTHREE.TorusBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry; // File:src/extras/geometries/TorusGeometry.js\n\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\n\nTHREE.TorusGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n  THREE.Geometry.call(this);\n  this.type = 'TorusGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    radialSegments: radialSegments,\n    tubularSegments: tubularSegments,\n    arc: arc\n  };\n  this.fromBufferGeometry(new THREE.TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n};\n\nTHREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry; // File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * see: http://www.blackpawn.com/texts/pqtorus/\r\n */\n\nTHREE.TorusKnotBufferGeometry = function (radius, tube, tubularSegments, radialSegments, p, q) {\n  THREE.BufferGeometry.call(this);\n  this.type = 'TorusKnotBufferGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    tubularSegments: tubularSegments,\n    radialSegments: radialSegments,\n    p: p,\n    q: q\n  };\n  radius = radius || 100;\n  tube = tube || 40;\n  tubularSegments = Math.floor(tubularSegments) || 64;\n  radialSegments = Math.floor(radialSegments) || 8;\n  p = p || 2;\n  q = q || 3; // used to calculate buffer length\n\n  var vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n  var indexCount = radialSegments * tubularSegments * 2 * 3; // buffers\n\n  var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n  var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n  var i,\n      j,\n      index = 0,\n      indexOffset = 0;\n  var vertex = new THREE.Vector3();\n  var normal = new THREE.Vector3();\n  var uv = new THREE.Vector2();\n  var P1 = new THREE.Vector3();\n  var P2 = new THREE.Vector3();\n  var B = new THREE.Vector3();\n  var T = new THREE.Vector3();\n  var N = new THREE.Vector3(); // generate vertices, normals and uvs\n\n  for (i = 0; i <= tubularSegments; ++i) {\n    // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n    var u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n    // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n    calculatePositionOnCurve(u, p, q, radius, P1);\n    calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n    T.subVectors(P2, P1);\n    N.addVectors(P2, P1);\n    B.crossVectors(T, N);\n    N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n    B.normalize();\n    N.normalize();\n\n    for (j = 0; j <= radialSegments; ++j) {\n      // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n      // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n      var v = j / radialSegments * Math.PI * 2;\n      var cx = -tube * Math.cos(v);\n      var cy = tube * Math.sin(v); // now calculate the final vertex position.\n      // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n      vertex.x = P1.x + (cx * N.x + cy * B.x);\n      vertex.y = P1.y + (cx * N.y + cy * B.y);\n      vertex.z = P1.z + (cx * N.z + cy * B.z); // vertex\n\n      vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n      normal.subVectors(vertex, P1).normalize();\n      normals.setXYZ(index, normal.x, normal.y, normal.z); // uv\n\n      uv.x = i / tubularSegments;\n      uv.y = j / radialSegments;\n      uvs.setXY(index, uv.x, uv.y); // increase index\n\n      index++;\n    }\n  } // generate indices\n\n\n  for (j = 1; j <= tubularSegments; j++) {\n    for (i = 1; i <= radialSegments; i++) {\n      // indices\n      var a = (radialSegments + 1) * (j - 1) + (i - 1);\n      var b = (radialSegments + 1) * j + (i - 1);\n      var c = (radialSegments + 1) * j + i;\n      var d = (radialSegments + 1) * (j - 1) + i; // face one\n\n      indices.setX(indexOffset, a);\n      indexOffset++;\n      indices.setX(indexOffset, b);\n      indexOffset++;\n      indices.setX(indexOffset, d);\n      indexOffset++; // face two\n\n      indices.setX(indexOffset, b);\n      indexOffset++;\n      indices.setX(indexOffset, c);\n      indexOffset++;\n      indices.setX(indexOffset, d);\n      indexOffset++;\n    }\n  } // build geometry\n\n\n  this.setIndex(indices);\n  this.addAttribute('position', vertices);\n  this.addAttribute('normal', normals);\n  this.addAttribute('uv', uvs); // this function calculates the current position on the torus curve\n\n  function calculatePositionOnCurve(u, p, q, radius, position) {\n    var cu = Math.cos(u);\n    var su = Math.sin(u);\n    var quOverP = q / p * u;\n    var cs = Math.cos(quOverP);\n    position.x = radius * (2 + cs) * 0.5 * cu;\n    position.y = radius * (2 + cs) * su * 0.5;\n    position.z = radius * Math.sin(quOverP) * 0.5;\n  }\n};\n\nTHREE.TorusKnotBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry; // File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\r\n * @author oosmoxiecode\r\n */\n\nTHREE.TorusKnotGeometry = function (radius, tube, tubularSegments, radialSegments, p, q, heightScale) {\n  THREE.Geometry.call(this);\n  this.type = 'TorusKnotGeometry';\n  this.parameters = {\n    radius: radius,\n    tube: tube,\n    tubularSegments: tubularSegments,\n    radialSegments: radialSegments,\n    p: p,\n    q: q\n  };\n  if (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');\n  this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));\n  this.mergeVertices();\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry; // File:src/extras/geometries/TubeGeometry.js\n\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n * @author jonobr1 / https://github.com/jonobr1\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\n\nTHREE.TubeGeometry = function (path, segments, radius, radialSegments, closed, taper) {\n  THREE.Geometry.call(this);\n  this.type = 'TubeGeometry';\n  this.parameters = {\n    path: path,\n    segments: segments,\n    radius: radius,\n    radialSegments: radialSegments,\n    closed: closed,\n    taper: taper\n  };\n  segments = segments || 64;\n  radius = radius || 1;\n  radialSegments = radialSegments || 8;\n  closed = closed || false;\n  taper = taper || THREE.TubeGeometry.NoTaper;\n  var grid = [];\n  var scope = this,\n      tangent,\n      normal,\n      binormal,\n      numpoints = segments + 1,\n      u,\n      v,\n      r,\n      cx,\n      cy,\n      pos,\n      pos2 = new THREE.Vector3(),\n      i,\n      j,\n      ip,\n      jp,\n      a,\n      b,\n      c,\n      d,\n      uva,\n      uvb,\n      uvc,\n      uvd;\n  var frames = new THREE.TubeGeometry.FrenetFrames(path, segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n\n  function vert(x, y, z) {\n    return scope.vertices.push(new THREE.Vector3(x, y, z)) - 1;\n  } // construct the grid\n\n\n  for (i = 0; i < numpoints; i++) {\n    grid[i] = [];\n    u = i / (numpoints - 1);\n    pos = path.getPointAt(u);\n    tangent = tangents[i];\n    normal = normals[i];\n    binormal = binormals[i];\n    r = radius * taper(u);\n\n    for (j = 0; j < radialSegments; j++) {\n      v = j / radialSegments * 2 * Math.PI;\n      cx = -r * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      cy = r * Math.sin(v);\n      pos2.copy(pos);\n      pos2.x += cx * normal.x + cy * binormal.x;\n      pos2.y += cx * normal.y + cy * binormal.y;\n      pos2.z += cx * normal.z + cy * binormal.z;\n      grid[i][j] = vert(pos2.x, pos2.y, pos2.z);\n    }\n  } // construct the mesh\n\n\n  for (i = 0; i < segments; i++) {\n    for (j = 0; j < radialSegments; j++) {\n      ip = closed ? (i + 1) % segments : i + 1;\n      jp = (j + 1) % radialSegments;\n      a = grid[i][j]; // *** NOT NECESSARILY PLANAR ! ***\n\n      b = grid[ip][j];\n      c = grid[ip][jp];\n      d = grid[i][jp];\n      uva = new THREE.Vector2(i / segments, j / radialSegments);\n      uvb = new THREE.Vector2((i + 1) / segments, j / radialSegments);\n      uvc = new THREE.Vector2((i + 1) / segments, (j + 1) / radialSegments);\n      uvd = new THREE.Vector2(i / segments, (j + 1) / radialSegments);\n      this.faces.push(new THREE.Face3(a, b, d));\n      this.faceVertexUvs[0].push([uva, uvb, uvd]);\n      this.faces.push(new THREE.Face3(b, c, d));\n      this.faceVertexUvs[0].push([uvb.clone(), uvc, uvd.clone()]);\n    }\n  }\n\n  this.computeFaceNormals();\n  this.computeVertexNormals();\n};\n\nTHREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\nTHREE.TubeGeometry.NoTaper = function (u) {\n  return 1;\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function (u) {\n  return Math.sin(Math.PI * u);\n}; // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\n\nTHREE.TubeGeometry.FrenetFrames = function (path, segments, closed) {\n  var normal = new THREE.Vector3(),\n      tangents = [],\n      normals = [],\n      binormals = [],\n      vec = new THREE.Vector3(),\n      mat = new THREE.Matrix4(),\n      numpoints = segments + 1,\n      theta,\n      smallest,\n      tx,\n      ty,\n      tz,\n      i,\n      u; // expose internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals; // compute the tangent vectors for each segment on the path\n\n  for (i = 0; i < numpoints; i++) {\n    u = i / (numpoints - 1);\n    tangents[i] = path.getTangentAt(u);\n    tangents[i].normalize();\n  }\n\n  initialNormal3();\n  /*\r\n  function initialNormal1(lastBinormal) {\r\n  \t// fixed start binormal. Has dangers of 0 vectors\r\n  \tnormals[ 0 ] = new THREE.Vector3();\r\n  \tbinormals[ 0 ] = new THREE.Vector3();\r\n  \tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n  \tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n  \tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n  }\r\n  \n  function initialNormal2() {\r\n  \n  \t// This uses the Frenet-Serret formula for deriving binormal\r\n  \tvar t2 = path.getTangentAt( epsilon );\r\n  \n  \tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n  \tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n  \n  \tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n  \tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n  \n  }\r\n  */\n\n  function initialNormal3() {\n    // select an initial normal vector perpendicular to the first tangent vector,\n    // and in the direction of the smallest tangent xyz component\n    normals[0] = new THREE.Vector3();\n    binormals[0] = new THREE.Vector3();\n    smallest = Number.MAX_VALUE;\n    tx = Math.abs(tangents[0].x);\n    ty = Math.abs(tangents[0].y);\n    tz = Math.abs(tangents[0].z);\n\n    if (tx <= smallest) {\n      smallest = tx;\n      normal.set(1, 0, 0);\n    }\n\n    if (ty <= smallest) {\n      smallest = ty;\n      normal.set(0, 1, 0);\n    }\n\n    if (tz <= smallest) {\n      normal.set(0, 0, 1);\n    }\n\n    vec.crossVectors(tangents[0], normal).normalize();\n    normals[0].crossVectors(tangents[0], vec);\n    binormals[0].crossVectors(tangents[0], normals[0]);\n  } // compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\n  for (i = 1; i < numpoints; i++) {\n    normals[i] = normals[i - 1].clone();\n    binormals[i] = binormals[i - 1].clone();\n    vec.crossVectors(tangents[i - 1], tangents[i]);\n\n    if (vec.length() > Number.EPSILON) {\n      vec.normalize();\n      theta = Math.acos(THREE.Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n      normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n    }\n\n    binormals[i].crossVectors(tangents[i], normals[i]);\n  } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n  if (closed) {\n    theta = Math.acos(THREE.Math.clamp(normals[0].dot(normals[numpoints - 1]), -1, 1));\n    theta /= numpoints - 1;\n\n    if (tangents[0].dot(vec.crossVectors(normals[0], normals[numpoints - 1])) > 0) {\n      theta = -theta;\n    }\n\n    for (i = 1; i < numpoints; i++) {\n      // twist a little...\n      normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n      binormals[i].crossVectors(tangents[i], normals[i]);\n    }\n  }\n}; // File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\n\n\nTHREE.PolyhedronGeometry = function (vertices, indices, radius, detail) {\n  THREE.Geometry.call(this);\n  this.type = 'PolyhedronGeometry';\n  this.parameters = {\n    vertices: vertices,\n    indices: indices,\n    radius: radius,\n    detail: detail\n  };\n  radius = radius || 1;\n  detail = detail || 0;\n  var that = this;\n\n  for (var i = 0, l = vertices.length; i < l; i += 3) {\n    prepare(new THREE.Vector3(vertices[i], vertices[i + 1], vertices[i + 2]));\n  }\n\n  var p = this.vertices;\n  var faces = [];\n\n  for (var i = 0, j = 0, l = indices.length; i < l; i += 3, j++) {\n    var v1 = p[indices[i]];\n    var v2 = p[indices[i + 1]];\n    var v3 = p[indices[i + 2]];\n    faces[j] = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()], undefined, j);\n  }\n\n  var centroid = new THREE.Vector3();\n\n  for (var i = 0, l = faces.length; i < l; i++) {\n    subdivide(faces[i], detail);\n  } // Handle case when face straddles the seam\n\n\n  for (var i = 0, l = this.faceVertexUvs[0].length; i < l; i++) {\n    var uvs = this.faceVertexUvs[0][i];\n    var x0 = uvs[0].x;\n    var x1 = uvs[1].x;\n    var x2 = uvs[2].x;\n    var max = Math.max(x0, x1, x2);\n    var min = Math.min(x0, x1, x2);\n\n    if (max > 0.9 && min < 0.1) {\n      // 0.9 is somewhat arbitrary\n      if (x0 < 0.2) uvs[0].x += 1;\n      if (x1 < 0.2) uvs[1].x += 1;\n      if (x2 < 0.2) uvs[2].x += 1;\n    }\n  } // Apply radius\n\n\n  for (var i = 0, l = this.vertices.length; i < l; i++) {\n    this.vertices[i].multiplyScalar(radius);\n  } // Merge vertices\n\n\n  this.mergeVertices();\n  this.computeFaceNormals();\n  this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius); // Project vector onto sphere's surface\n\n  function prepare(vector) {\n    var vertex = vector.normalize().clone();\n    vertex.index = that.vertices.push(vertex) - 1; // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n    var u = azimuth(vector) / 2 / Math.PI + 0.5;\n    var v = inclination(vector) / Math.PI + 0.5;\n    vertex.uv = new THREE.Vector2(u, 1 - v);\n    return vertex;\n  } // Approximate a curved face with recursively sub-divided triangles.\n\n\n  function make(v1, v2, v3, materialIndex) {\n    var face = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()], undefined, materialIndex);\n    that.faces.push(face);\n    centroid.copy(v1).add(v2).add(v3).divideScalar(3);\n    var azi = azimuth(centroid);\n    that.faceVertexUvs[0].push([correctUV(v1.uv, v1, azi), correctUV(v2.uv, v2, azi), correctUV(v3.uv, v3, azi)]);\n  } // Analytically subdivide a face to the required detail level.\n\n\n  function subdivide(face, detail) {\n    var cols = Math.pow(2, detail);\n    var a = prepare(that.vertices[face.a]);\n    var b = prepare(that.vertices[face.b]);\n    var c = prepare(that.vertices[face.c]);\n    var v = [];\n    var materialIndex = face.materialIndex; // Construct all of the vertices for this subdivision.\n\n    for (var i = 0; i <= cols; i++) {\n      v[i] = [];\n      var aj = prepare(a.clone().lerp(c, i / cols));\n      var bj = prepare(b.clone().lerp(c, i / cols));\n      var rows = cols - i;\n\n      for (var j = 0; j <= rows; j++) {\n        if (j === 0 && i === cols) {\n          v[i][j] = aj;\n        } else {\n          v[i][j] = prepare(aj.clone().lerp(bj, j / rows));\n        }\n      }\n    } // Construct all of the faces.\n\n\n    for (var i = 0; i < cols; i++) {\n      for (var j = 0; j < 2 * (cols - i) - 1; j++) {\n        var k = Math.floor(j / 2);\n\n        if (j % 2 === 0) {\n          make(v[i][k + 1], v[i + 1][k], v[i][k], materialIndex);\n        } else {\n          make(v[i][k + 1], v[i + 1][k + 1], v[i + 1][k], materialIndex);\n        }\n      }\n    }\n  } // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n  function azimuth(vector) {\n    return Math.atan2(vector.z, -vector.x);\n  } // Angle above the XZ plane.\n\n\n  function inclination(vector) {\n    return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n  } // Texture fixing helper. Spheres have some odd behaviours.\n\n\n  function correctUV(uv, vector, azimuth) {\n    if (azimuth < 0 && uv.x === 1) uv = new THREE.Vector2(uv.x - 1, uv.y);\n    if (vector.x === 0 && vector.z === 0) uv = new THREE.Vector2(azimuth / 2 / Math.PI + 0.5, uv.y);\n    return uv.clone();\n  }\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry; // File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\r\n * @author Abe Pazos / https://hamoid.com\r\n */\n\nTHREE.DodecahedronGeometry = function (radius, detail) {\n  var t = (1 + Math.sqrt(5)) / 2;\n  var r = 1 / t;\n  var vertices = [// (±1, ±1, ±1)\n  -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n  0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n  -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n  -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n  var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n  THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n  this.type = 'DodecahedronGeometry';\n  this.parameters = {\n    radius: radius,\n    detail: detail\n  };\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry; // File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\n\nTHREE.IcosahedronGeometry = function (radius, detail) {\n  var t = (1 + Math.sqrt(5)) / 2;\n  var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n  var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n  THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n  this.type = 'IcosahedronGeometry';\n  this.parameters = {\n    radius: radius,\n    detail: detail\n  };\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry; // File:src/extras/geometries/OctahedronGeometry.js\n\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\n\nTHREE.OctahedronGeometry = function (radius, detail) {\n  var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n  var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n  THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n  this.type = 'OctahedronGeometry';\n  this.parameters = {\n    radius: radius,\n    detail: detail\n  };\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry; // File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\n\nTHREE.TetrahedronGeometry = function (radius, detail) {\n  var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n  var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n  THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n  this.type = 'TetrahedronGeometry';\n  this.parameters = {\n    radius: radius,\n    detail: detail\n  };\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry; // File:src/extras/geometries/ParametricGeometry.js\n\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n *\r\n */\n\nTHREE.ParametricGeometry = function (func, slices, stacks) {\n  THREE.Geometry.call(this);\n  this.type = 'ParametricGeometry';\n  this.parameters = {\n    func: func,\n    slices: slices,\n    stacks: stacks\n  };\n  var verts = this.vertices;\n  var faces = this.faces;\n  var uvs = this.faceVertexUvs[0];\n  var i, j, p;\n  var u, v;\n  var sliceCount = slices + 1;\n\n  for (i = 0; i <= stacks; i++) {\n    v = i / stacks;\n\n    for (j = 0; j <= slices; j++) {\n      u = j / slices;\n      p = func(u, v);\n      verts.push(p);\n    }\n  }\n\n  var a, b, c, d;\n  var uva, uvb, uvc, uvd;\n\n  for (i = 0; i < stacks; i++) {\n    for (j = 0; j < slices; j++) {\n      a = i * sliceCount + j;\n      b = i * sliceCount + j + 1;\n      c = (i + 1) * sliceCount + j + 1;\n      d = (i + 1) * sliceCount + j;\n      uva = new THREE.Vector2(j / slices, i / stacks);\n      uvb = new THREE.Vector2((j + 1) / slices, i / stacks);\n      uvc = new THREE.Vector2((j + 1) / slices, (i + 1) / stacks);\n      uvd = new THREE.Vector2(j / slices, (i + 1) / stacks);\n      faces.push(new THREE.Face3(a, b, d));\n      uvs.push([uva, uvb, uvd]);\n      faces.push(new THREE.Face3(b, c, d));\n      uvs.push([uvb.clone(), uvc, uvd.clone()]);\n    }\n  } // console.log(this);\n  // magic bullet\n  // var diff = this.mergeVertices();\n  // console.log('removed ', diff, ' vertices by merging');\n\n\n  this.computeFaceNormals();\n  this.computeVertexNormals();\n};\n\nTHREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry; // File:src/extras/geometries/WireframeGeometry.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.WireframeGeometry = function (geometry) {\n  THREE.BufferGeometry.call(this);\n  var edge = [0, 0],\n      hash = {};\n\n  function sortFunction(a, b) {\n    return a - b;\n  }\n\n  var keys = ['a', 'b', 'c'];\n\n  if (geometry instanceof THREE.Geometry) {\n    var vertices = geometry.vertices;\n    var faces = geometry.faces;\n    var numEdges = 0; // allocate maximal size\n\n    var edges = new Uint32Array(6 * faces.length);\n\n    for (var i = 0, l = faces.length; i < l; i++) {\n      var face = faces[i];\n\n      for (var j = 0; j < 3; j++) {\n        edge[0] = face[keys[j]];\n        edge[1] = face[keys[(j + 1) % 3]];\n        edge.sort(sortFunction);\n        var key = edge.toString();\n\n        if (hash[key] === undefined) {\n          edges[2 * numEdges] = edge[0];\n          edges[2 * numEdges + 1] = edge[1];\n          hash[key] = true;\n          numEdges++;\n        }\n      }\n    }\n\n    var coords = new Float32Array(numEdges * 2 * 3);\n\n    for (var i = 0, l = numEdges; i < l; i++) {\n      for (var j = 0; j < 2; j++) {\n        var vertex = vertices[edges[2 * i + j]];\n        var index = 6 * i + 3 * j;\n        coords[index + 0] = vertex.x;\n        coords[index + 1] = vertex.y;\n        coords[index + 2] = vertex.z;\n      }\n    }\n\n    this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n  } else if (geometry instanceof THREE.BufferGeometry) {\n    if (geometry.index !== null) {\n      // Indexed BufferGeometry\n      var indices = geometry.index.array;\n      var vertices = geometry.attributes.position;\n      var groups = geometry.groups;\n      var numEdges = 0;\n\n      if (groups.length === 0) {\n        geometry.addGroup(0, indices.length);\n      } // allocate maximal size\n\n\n      var edges = new Uint32Array(2 * indices.length);\n\n      for (var o = 0, ol = groups.length; o < ol; ++o) {\n        var group = groups[o];\n        var start = group.start;\n        var count = group.count;\n\n        for (var i = start, il = start + count; i < il; i += 3) {\n          for (var j = 0; j < 3; j++) {\n            edge[0] = indices[i + j];\n            edge[1] = indices[i + (j + 1) % 3];\n            edge.sort(sortFunction);\n            var key = edge.toString();\n\n            if (hash[key] === undefined) {\n              edges[2 * numEdges] = edge[0];\n              edges[2 * numEdges + 1] = edge[1];\n              hash[key] = true;\n              numEdges++;\n            }\n          }\n        }\n      }\n\n      var coords = new Float32Array(numEdges * 2 * 3);\n\n      for (var i = 0, l = numEdges; i < l; i++) {\n        for (var j = 0; j < 2; j++) {\n          var index = 6 * i + 3 * j;\n          var index2 = edges[2 * i + j];\n          coords[index + 0] = vertices.getX(index2);\n          coords[index + 1] = vertices.getY(index2);\n          coords[index + 2] = vertices.getZ(index2);\n        }\n      }\n\n      this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n    } else {\n      // non-indexed BufferGeometry\n      var vertices = geometry.attributes.position.array;\n      var numEdges = vertices.length / 3;\n      var numTris = numEdges / 3;\n      var coords = new Float32Array(numEdges * 2 * 3);\n\n      for (var i = 0, l = numTris; i < l; i++) {\n        for (var j = 0; j < 3; j++) {\n          var index = 18 * i + 6 * j;\n          var index1 = 9 * i + 3 * j;\n          coords[index + 0] = vertices[index1];\n          coords[index + 1] = vertices[index1 + 1];\n          coords[index + 2] = vertices[index1 + 2];\n          var index2 = 9 * i + 3 * ((j + 1) % 3);\n          coords[index + 3] = vertices[index2];\n          coords[index + 4] = vertices[index2 + 1];\n          coords[index + 5] = vertices[index2 + 2];\n        }\n      }\n\n      this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n    }\n  }\n};\n\nTHREE.WireframeGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry; // File:src/extras/helpers/AxisHelper.js\n\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\nTHREE.AxisHelper = function (size) {\n  size = size || 1;\n  var vertices = new Float32Array([0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size]);\n  var colors = new Float32Array([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1]);\n  var geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n  var material = new THREE.LineBasicMaterial({\n    vertexColors: THREE.VertexColors\n  });\n  THREE.LineSegments.call(this, geometry, material);\n};\n\nTHREE.AxisHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper; // File:src/extras/helpers/ArrowHelper.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / http://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  color - color in hex value\r\n *  headLength - Number\r\n *  headWidth - Number\r\n */\n\nTHREE.ArrowHelper = function () {\n  var lineGeometry = new THREE.BufferGeometry();\n  lineGeometry.addAttribute('position', new THREE.Float32Attribute([0, 0, 0, 0, 1, 0], 3));\n  var coneGeometry = new THREE.CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n  coneGeometry.translate(0, -0.5, 0);\n  return function ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n    // dir is assumed to be normalized\n    THREE.Object3D.call(this);\n    if (color === undefined) color = 0xffff00;\n    if (length === undefined) length = 1;\n    if (headLength === undefined) headLength = 0.2 * length;\n    if (headWidth === undefined) headWidth = 0.2 * headLength;\n    this.position.copy(origin);\n    this.line = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({\n      color: color\n    }));\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n    this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({\n      color: color\n    }));\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n    this.setDirection(dir);\n    this.setLength(length, headLength, headWidth);\n  };\n}();\n\nTHREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = function () {\n  var axis = new THREE.Vector3();\n  var radians;\n  return function setDirection(dir) {\n    // dir is assumed to be normalized\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      axis.set(dir.z, 0, -dir.x).normalize();\n      radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(axis, radians);\n    }\n  };\n}();\n\nTHREE.ArrowHelper.prototype.setLength = function (length, headLength, headWidth) {\n  if (headLength === undefined) headLength = 0.2 * length;\n  if (headWidth === undefined) headWidth = 0.2 * headLength;\n  this.line.scale.set(1, Math.max(0, length - headLength), 1);\n  this.line.updateMatrix();\n  this.cone.scale.set(headWidth, headLength, headWidth);\n  this.cone.position.y = length;\n  this.cone.updateMatrix();\n};\n\nTHREE.ArrowHelper.prototype.setColor = function (color) {\n  this.line.material.color.copy(color);\n  this.cone.material.color.copy(color);\n}; // File:src/extras/helpers/BoxHelper.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.BoxHelper = function (object) {\n  var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n  var positions = new Float32Array(8 * 3);\n  var geometry = new THREE.BufferGeometry();\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n  geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n  THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n    color: 0xffff00\n  }));\n\n  if (object !== undefined) {\n    this.update(object);\n  }\n};\n\nTHREE.BoxHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = function () {\n  var box = new THREE.Box3();\n  return function (object) {\n    if (object instanceof THREE.Box3) {\n      box.copy(object);\n    } else {\n      box.setFromObject(object);\n    }\n\n    if (box.isEmpty()) return;\n    var min = box.min;\n    var max = box.max;\n    /*\r\n      5____4\r\n    1/___0/|\r\n    | 6__|_7\r\n    2/___3/\r\n    \t\t0: max.x, max.y, max.z\r\n    1: min.x, max.y, max.z\r\n    2: min.x, min.y, max.z\r\n    3: max.x, min.y, max.z\r\n    4: max.x, max.y, min.z\r\n    5: min.x, max.y, min.z\r\n    6: min.x, min.y, min.z\r\n    7: max.x, min.y, min.z\r\n    */\n\n    var position = this.geometry.attributes.position;\n    var array = position.array;\n    array[0] = max.x;\n    array[1] = max.y;\n    array[2] = max.z;\n    array[3] = min.x;\n    array[4] = max.y;\n    array[5] = max.z;\n    array[6] = min.x;\n    array[7] = min.y;\n    array[8] = max.z;\n    array[9] = max.x;\n    array[10] = min.y;\n    array[11] = max.z;\n    array[12] = max.x;\n    array[13] = max.y;\n    array[14] = min.z;\n    array[15] = min.x;\n    array[16] = max.y;\n    array[17] = min.z;\n    array[18] = min.x;\n    array[19] = min.y;\n    array[20] = min.z;\n    array[21] = max.x;\n    array[22] = min.y;\n    array[23] = min.z;\n    position.needsUpdate = true;\n    this.geometry.computeBoundingSphere();\n  };\n}(); // File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n// a helper to show the world-axis-aligned bounding box for an object\n\n\nTHREE.BoundingBoxHelper = function (object, hex) {\n  var color = hex !== undefined ? hex : 0x888888;\n  this.object = object;\n  this.box = new THREE.Box3();\n  THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({\n    color: color,\n    wireframe: true\n  }));\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n  this.box.setFromObject(this.object);\n  this.box.size(this.scale);\n  this.box.center(this.position);\n}; // File:src/extras/helpers/CameraHelper.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\n\n\nTHREE.CameraHelper = function (camera) {\n  var geometry = new THREE.Geometry();\n  var material = new THREE.LineBasicMaterial({\n    color: 0xffffff,\n    vertexColors: THREE.FaceColors\n  });\n  var pointMap = {}; // colors\n\n  var hexFrustum = 0xffaa00;\n  var hexCone = 0xff0000;\n  var hexUp = 0x00aaff;\n  var hexTarget = 0xffffff;\n  var hexCross = 0x333333; // near\n\n  addLine(\"n1\", \"n2\", hexFrustum);\n  addLine(\"n2\", \"n4\", hexFrustum);\n  addLine(\"n4\", \"n3\", hexFrustum);\n  addLine(\"n3\", \"n1\", hexFrustum); // far\n\n  addLine(\"f1\", \"f2\", hexFrustum);\n  addLine(\"f2\", \"f4\", hexFrustum);\n  addLine(\"f4\", \"f3\", hexFrustum);\n  addLine(\"f3\", \"f1\", hexFrustum); // sides\n\n  addLine(\"n1\", \"f1\", hexFrustum);\n  addLine(\"n2\", \"f2\", hexFrustum);\n  addLine(\"n3\", \"f3\", hexFrustum);\n  addLine(\"n4\", \"f4\", hexFrustum); // cone\n\n  addLine(\"p\", \"n1\", hexCone);\n  addLine(\"p\", \"n2\", hexCone);\n  addLine(\"p\", \"n3\", hexCone);\n  addLine(\"p\", \"n4\", hexCone); // up\n\n  addLine(\"u1\", \"u2\", hexUp);\n  addLine(\"u2\", \"u3\", hexUp);\n  addLine(\"u3\", \"u1\", hexUp); // target\n\n  addLine(\"c\", \"t\", hexTarget);\n  addLine(\"p\", \"c\", hexCross); // cross\n\n  addLine(\"cn1\", \"cn2\", hexCross);\n  addLine(\"cn3\", \"cn4\", hexCross);\n  addLine(\"cf1\", \"cf2\", hexCross);\n  addLine(\"cf3\", \"cf4\", hexCross);\n\n  function addLine(a, b, hex) {\n    addPoint(a, hex);\n    addPoint(b, hex);\n  }\n\n  function addPoint(id, hex) {\n    geometry.vertices.push(new THREE.Vector3());\n    geometry.colors.push(new THREE.Color(hex));\n\n    if (pointMap[id] === undefined) {\n      pointMap[id] = [];\n    }\n\n    pointMap[id].push(geometry.vertices.length - 1);\n  }\n\n  THREE.LineSegments.call(this, geometry, material);\n  this.camera = camera;\n  this.camera.updateProjectionMatrix();\n  this.matrix = camera.matrixWorld;\n  this.matrixAutoUpdate = false;\n  this.pointMap = pointMap;\n  this.update();\n};\n\nTHREE.CameraHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n  var geometry, pointMap;\n  var vector = new THREE.Vector3();\n  var camera = new THREE.Camera();\n\n  function setPoint(point, x, y, z) {\n    vector.set(x, y, z).unproject(camera);\n    var points = pointMap[point];\n\n    if (points !== undefined) {\n      for (var i = 0, il = points.length; i < il; i++) {\n        geometry.vertices[points[i]].copy(vector);\n      }\n    }\n  }\n\n  return function () {\n    geometry = this.geometry;\n    pointMap = this.pointMap;\n    var w = 1,\n        h = 1; // we need just camera projection matrix\n    // world matrix must be identity\n\n    camera.projectionMatrix.copy(this.camera.projectionMatrix); // center / target\n\n    setPoint(\"c\", 0, 0, -1);\n    setPoint(\"t\", 0, 0, 1); // near\n\n    setPoint(\"n1\", -w, -h, -1);\n    setPoint(\"n2\", w, -h, -1);\n    setPoint(\"n3\", -w, h, -1);\n    setPoint(\"n4\", w, h, -1); // far\n\n    setPoint(\"f1\", -w, -h, 1);\n    setPoint(\"f2\", w, -h, 1);\n    setPoint(\"f3\", -w, h, 1);\n    setPoint(\"f4\", w, h, 1); // up\n\n    setPoint(\"u1\", w * 0.7, h * 1.1, -1);\n    setPoint(\"u2\", -w * 0.7, h * 1.1, -1);\n    setPoint(\"u3\", 0, h * 2, -1); // cross\n\n    setPoint(\"cf1\", -w, 0, 1);\n    setPoint(\"cf2\", w, 0, 1);\n    setPoint(\"cf3\", 0, -h, 1);\n    setPoint(\"cf4\", 0, h, 1);\n    setPoint(\"cn1\", -w, 0, -1);\n    setPoint(\"cn2\", w, 0, -1);\n    setPoint(\"cn3\", 0, -h, -1);\n    setPoint(\"cn4\", 0, h, -1);\n    geometry.verticesNeedUpdate = true;\n  };\n}(); // File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\n\n\nTHREE.DirectionalLightHelper = function (light, size) {\n  THREE.Object3D.call(this);\n  this.light = light;\n  this.light.updateMatrixWorld();\n  this.matrix = light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  if (size === undefined) size = 1;\n  var geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', new THREE.Float32Attribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n  var material = new THREE.LineBasicMaterial({\n    fog: false\n  });\n  this.add(new THREE.Line(geometry, material));\n  geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', new THREE.Float32Attribute([0, 0, 0, 0, 0, 1], 3));\n  this.add(new THREE.Line(geometry, material));\n  this.update();\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n  var lightPlane = this.children[0];\n  var targetLine = this.children[1];\n  lightPlane.geometry.dispose();\n  lightPlane.material.dispose();\n  targetLine.geometry.dispose();\n  targetLine.material.dispose();\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n  var v1 = new THREE.Vector3();\n  var v2 = new THREE.Vector3();\n  var v3 = new THREE.Vector3();\n  return function () {\n    v1.setFromMatrixPosition(this.light.matrixWorld);\n    v2.setFromMatrixPosition(this.light.target.matrixWorld);\n    v3.subVectors(v2, v1);\n    var lightPlane = this.children[0];\n    var targetLine = this.children[1];\n    lightPlane.lookAt(v3);\n    lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n    targetLine.lookAt(v3);\n    targetLine.scale.z = v3.length();\n  };\n}(); // File:src/extras/helpers/EdgesHelper.js\n\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @param object THREE.Mesh whose geometry will be used\r\n * @param hex line color\r\n * @param thresholdAngle the minimum angle (in degrees),\r\n * between the face normals of adjacent faces,\r\n * that is required to render an edge. A value of 10 means\r\n * an edge is only rendered if the angle is at least 10 degrees.\r\n */\n\n\nTHREE.EdgesHelper = function (object, hex, thresholdAngle) {\n  var color = hex !== undefined ? hex : 0xffffff;\n  THREE.LineSegments.call(this, new THREE.EdgesGeometry(object.geometry, thresholdAngle), new THREE.LineBasicMaterial({\n    color: color\n  }));\n  this.matrix = object.matrixWorld;\n  this.matrixAutoUpdate = false;\n};\n\nTHREE.EdgesHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper; // File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\n\nTHREE.FaceNormalsHelper = function (object, size, hex, linewidth) {\n  // FaceNormalsHelper only supports THREE.Geometry\n  this.object = object;\n  this.size = size !== undefined ? size : 1;\n  var color = hex !== undefined ? hex : 0xffff00;\n  var width = linewidth !== undefined ? linewidth : 1; //\n\n  var nNormals = 0;\n  var objGeometry = this.object.geometry;\n\n  if (objGeometry instanceof THREE.Geometry) {\n    nNormals = objGeometry.faces.length;\n  } else {\n    console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');\n  } //\n\n\n  var geometry = new THREE.BufferGeometry();\n  var positions = new THREE.Float32Attribute(nNormals * 2 * 3, 3);\n  geometry.addAttribute('position', positions);\n  THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n    color: color,\n    linewidth: width\n  })); //\n\n  this.matrixAutoUpdate = false;\n  this.update();\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = function () {\n  var v1 = new THREE.Vector3();\n  var v2 = new THREE.Vector3();\n  var normalMatrix = new THREE.Matrix3();\n  return function update() {\n    this.object.updateMatrixWorld(true);\n    normalMatrix.getNormalMatrix(this.object.matrixWorld);\n    var matrixWorld = this.object.matrixWorld;\n    var position = this.geometry.attributes.position; //\n\n    var objGeometry = this.object.geometry;\n    var vertices = objGeometry.vertices;\n    var faces = objGeometry.faces;\n    var idx = 0;\n\n    for (var i = 0, l = faces.length; i < l; i++) {\n      var face = faces[i];\n      var normal = face.normal;\n      v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);\n      v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n      position.setXYZ(idx, v1.x, v1.y, v1.z);\n      idx = idx + 1;\n      position.setXYZ(idx, v2.x, v2.y, v2.z);\n      idx = idx + 1;\n    }\n\n    position.needsUpdate = true;\n    return this;\n  };\n}(); // File:src/extras/helpers/GridHelper.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.GridHelper = function (size, step, color1, color2) {\n  color1 = new THREE.Color(color1 !== undefined ? color1 : 0x444444);\n  color2 = new THREE.Color(color2 !== undefined ? color2 : 0x888888);\n  var vertices = [];\n  var colors = [];\n\n  for (var i = -size, j = 0; i <= size; i += step) {\n    vertices.push(-size, 0, i, size, 0, i);\n    vertices.push(i, 0, -size, i, 0, size);\n    var color = i === 0 ? color1 : color2;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n    color.toArray(colors, j);\n    j += 3;\n  }\n\n  var geometry = new THREE.BufferGeometry();\n  geometry.addAttribute('position', new THREE.Float32Attribute(vertices, 3));\n  geometry.addAttribute('color', new THREE.Float32Attribute(colors, 3));\n  var material = new THREE.LineBasicMaterial({\n    vertexColors: THREE.VertexColors\n  });\n  THREE.LineSegments.call(this, geometry, material);\n};\n\nTHREE.GridHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function () {\n  console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n}; // File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.HemisphereLightHelper = function (light, sphereSize) {\n  THREE.Object3D.call(this);\n  this.light = light;\n  this.light.updateMatrixWorld();\n  this.matrix = light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  this.colors = [new THREE.Color(), new THREE.Color()];\n  var geometry = new THREE.SphereGeometry(sphereSize, 4, 2);\n  geometry.rotateX(-Math.PI / 2);\n\n  for (var i = 0, il = 8; i < il; i++) {\n    geometry.faces[i].color = this.colors[i < 4 ? 0 : 1];\n  }\n\n  var material = new THREE.MeshBasicMaterial({\n    vertexColors: THREE.FaceColors,\n    wireframe: true\n  });\n  this.lightSphere = new THREE.Mesh(geometry, material);\n  this.add(this.lightSphere);\n  this.update();\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n  this.lightSphere.geometry.dispose();\n  this.lightSphere.material.dispose();\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n  var vector = new THREE.Vector3();\n  return function () {\n    this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);\n    this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);\n    this.lightSphere.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());\n    this.lightSphere.geometry.colorsNeedUpdate = true;\n  };\n}(); // File:src/extras/helpers/PointLightHelper.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.PointLightHelper = function (light, sphereSize) {\n  this.light = light;\n  this.light.updateMatrixWorld();\n  var geometry = new THREE.SphereBufferGeometry(sphereSize, 4, 2);\n  var material = new THREE.MeshBasicMaterial({\n    wireframe: true,\n    fog: false\n  });\n  material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n  THREE.Mesh.call(this, geometry, material);\n  this.matrix = this.light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  /*\r\n  var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n  var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n  \n  this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n  this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n  \n  var d = light.distance;\r\n  \n  if ( d === 0.0 ) {\r\n  \n  \tthis.lightDistance.visible = false;\r\n  \n  } else {\r\n  \n  \tthis.lightDistance.scale.set( d, d, d );\r\n  \n  }\r\n  \n  this.add( this.lightDistance );\r\n  */\n};\n\nTHREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n  this.geometry.dispose();\n  this.material.dispose();\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n  this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n  /*\r\n  var d = this.light.distance;\r\n  \n  if ( d === 0.0 ) {\r\n  \n  \tthis.lightDistance.visible = false;\r\n  \n  } else {\r\n  \n  \tthis.lightDistance.visible = true;\r\n  \tthis.lightDistance.scale.set( d, d, d );\r\n  \n  }\r\n  */\n}; // File:src/extras/helpers/SkeletonHelper.js\n\n/**\r\n * @author Sean Griffin / http://twitter.com/sgrif\r\n * @author Michael Guerrero / http://realitymeltdown.com\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author ikerr / http://verold.com\r\n */\n\n\nTHREE.SkeletonHelper = function (object) {\n  this.bones = this.getBoneList(object);\n  var geometry = new THREE.Geometry();\n\n  for (var i = 0; i < this.bones.length; i++) {\n    var bone = this.bones[i];\n\n    if (bone.parent instanceof THREE.Bone) {\n      geometry.vertices.push(new THREE.Vector3());\n      geometry.vertices.push(new THREE.Vector3());\n      geometry.colors.push(new THREE.Color(0, 0, 1));\n      geometry.colors.push(new THREE.Color(0, 1, 0));\n    }\n  }\n\n  geometry.dynamic = true;\n  var material = new THREE.LineBasicMaterial({\n    vertexColors: THREE.VertexColors,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  THREE.LineSegments.call(this, geometry, material);\n  this.root = object;\n  this.matrix = object.matrixWorld;\n  this.matrixAutoUpdate = false;\n  this.update();\n};\n\nTHREE.SkeletonHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function (object) {\n  var boneList = [];\n\n  if (object instanceof THREE.Bone) {\n    boneList.push(object);\n  }\n\n  for (var i = 0; i < object.children.length; i++) {\n    boneList.push.apply(boneList, this.getBoneList(object.children[i]));\n  }\n\n  return boneList;\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n  var geometry = this.geometry;\n  var matrixWorldInv = new THREE.Matrix4().getInverse(this.root.matrixWorld);\n  var boneMatrix = new THREE.Matrix4();\n  var j = 0;\n\n  for (var i = 0; i < this.bones.length; i++) {\n    var bone = this.bones[i];\n\n    if (bone.parent instanceof THREE.Bone) {\n      boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);\n      geometry.vertices[j].setFromMatrixPosition(boneMatrix);\n      boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);\n      geometry.vertices[j + 1].setFromMatrixPosition(boneMatrix);\n      j += 2;\n    }\n  }\n\n  geometry.verticesNeedUpdate = true;\n  geometry.computeBoundingSphere();\n}; // File:src/extras/helpers/SpotLightHelper.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\n\n\nTHREE.SpotLightHelper = function (light) {\n  THREE.Object3D.call(this);\n  this.light = light;\n  this.light.updateMatrixWorld();\n  this.matrix = light.matrixWorld;\n  this.matrixAutoUpdate = false;\n  var geometry = new THREE.BufferGeometry();\n  var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n  for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n    var p1 = i / l * Math.PI * 2;\n    var p2 = j / l * Math.PI * 2;\n    positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n  }\n\n  geometry.addAttribute('position', new THREE.Float32Attribute(positions, 3));\n  var material = new THREE.LineBasicMaterial({\n    fog: false\n  });\n  this.cone = new THREE.LineSegments(geometry, material);\n  this.add(this.cone);\n  this.update();\n};\n\nTHREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n  this.cone.geometry.dispose();\n  this.cone.material.dispose();\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n  var vector = new THREE.Vector3();\n  var vector2 = new THREE.Vector3();\n  return function () {\n    var coneLength = this.light.distance ? this.light.distance : 1000;\n    var coneWidth = coneLength * Math.tan(this.light.angle);\n    this.cone.scale.set(coneWidth, coneWidth, coneLength);\n    vector.setFromMatrixPosition(this.light.matrixWorld);\n    vector2.setFromMatrixPosition(this.light.target.matrixWorld);\n    this.cone.lookAt(vector2.sub(vector));\n    this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n  };\n}(); // File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\n\n\nTHREE.VertexNormalsHelper = function (object, size, hex, linewidth) {\n  this.object = object;\n  this.size = size !== undefined ? size : 1;\n  var color = hex !== undefined ? hex : 0xff0000;\n  var width = linewidth !== undefined ? linewidth : 1; //\n\n  var nNormals = 0;\n  var objGeometry = this.object.geometry;\n\n  if (objGeometry instanceof THREE.Geometry) {\n    nNormals = objGeometry.faces.length * 3;\n  } else if (objGeometry instanceof THREE.BufferGeometry) {\n    nNormals = objGeometry.attributes.normal.count;\n  } //\n\n\n  var geometry = new THREE.BufferGeometry();\n  var positions = new THREE.Float32Attribute(nNormals * 2 * 3, 3);\n  geometry.addAttribute('position', positions);\n  THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n    color: color,\n    linewidth: width\n  })); //\n\n  this.matrixAutoUpdate = false;\n  this.update();\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = function () {\n  var v1 = new THREE.Vector3();\n  var v2 = new THREE.Vector3();\n  var normalMatrix = new THREE.Matrix3();\n  return function update() {\n    var keys = ['a', 'b', 'c'];\n    this.object.updateMatrixWorld(true);\n    normalMatrix.getNormalMatrix(this.object.matrixWorld);\n    var matrixWorld = this.object.matrixWorld;\n    var position = this.geometry.attributes.position; //\n\n    var objGeometry = this.object.geometry;\n\n    if (objGeometry instanceof THREE.Geometry) {\n      var vertices = objGeometry.vertices;\n      var faces = objGeometry.faces;\n      var idx = 0;\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n\n        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n          var vertex = vertices[face[keys[j]]];\n          var normal = face.vertexNormals[j];\n          v1.copy(vertex).applyMatrix4(matrixWorld);\n          v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n          position.setXYZ(idx, v1.x, v1.y, v1.z);\n          idx = idx + 1;\n          position.setXYZ(idx, v2.x, v2.y, v2.z);\n          idx = idx + 1;\n        }\n      }\n    } else if (objGeometry instanceof THREE.BufferGeometry) {\n      var objPos = objGeometry.attributes.position;\n      var objNorm = objGeometry.attributes.normal;\n      var idx = 0; // for simplicity, ignore index and drawcalls, and render every normal\n\n      for (var j = 0, jl = objPos.count; j < jl; j++) {\n        v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n        v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n        v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n        position.setXYZ(idx, v1.x, v1.y, v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, v2.x, v2.y, v2.z);\n        idx = idx + 1;\n      }\n    }\n\n    position.needsUpdate = true;\n    return this;\n  };\n}(); // File:src/extras/helpers/WireframeHelper.js\n\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\n\n\nTHREE.WireframeHelper = function (object, hex) {\n  var color = hex !== undefined ? hex : 0xffffff;\n  THREE.LineSegments.call(this, new THREE.WireframeGeometry(object.geometry), new THREE.LineBasicMaterial({\n    color: color\n  }));\n  this.matrix = object.matrixWorld;\n  this.matrixAutoUpdate = false;\n};\n\nTHREE.WireframeHelper.prototype = Object.create(THREE.LineSegments.prototype);\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper; // File:src/extras/objects/ImmediateRenderObject.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.ImmediateRenderObject = function (material) {\n  THREE.Object3D.call(this);\n  this.material = material;\n\n  this.render = function (renderCallback) {};\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject; // File:src/extras/objects/MorphBlendMesh.js\n\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\n\nTHREE.MorphBlendMesh = function (geometry, material) {\n  THREE.Mesh.call(this, geometry, material);\n  this.animationsMap = {};\n  this.animationsList = []; // prepare default animation\n  // (all frames played together in 1 second)\n\n  var numFrames = this.geometry.morphTargets.length;\n  var name = \"__default\";\n  var startFrame = 0;\n  var endFrame = numFrames - 1;\n  var fps = numFrames / 1;\n  this.createAnimation(name, startFrame, endFrame, fps);\n  this.setAnimationWeight(name, 1);\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function (name, start, end, fps) {\n  var animation = {\n    start: start,\n    end: end,\n    length: end - start + 1,\n    fps: fps,\n    duration: (end - start) / fps,\n    lastFrame: 0,\n    currentFrame: 0,\n    active: false,\n    time: 0,\n    direction: 1,\n    weight: 1,\n    directionBackwards: false,\n    mirroredLoop: false\n  };\n  this.animationsMap[name] = animation;\n  this.animationsList.push(animation);\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function (fps) {\n  var pattern = /([a-z]+)_?(\\d+)/i;\n  var firstAnimation,\n      frameRanges = {};\n  var geometry = this.geometry;\n\n  for (var i = 0, il = geometry.morphTargets.length; i < il; i++) {\n    var morph = geometry.morphTargets[i];\n    var chunks = morph.name.match(pattern);\n\n    if (chunks && chunks.length > 1) {\n      var name = chunks[1];\n      if (!frameRanges[name]) frameRanges[name] = {\n        start: Infinity,\n        end: -Infinity\n      };\n      var range = frameRanges[name];\n      if (i < range.start) range.start = i;\n      if (i > range.end) range.end = i;\n      if (!firstAnimation) firstAnimation = name;\n    }\n  }\n\n  for (var name in frameRanges) {\n    var range = frameRanges[name];\n    this.createAnimation(name, range.start, range.end, fps);\n  }\n\n  this.firstAnimation = firstAnimation;\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (name) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.direction = 1;\n    animation.directionBackwards = false;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (name) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.direction = -1;\n    animation.directionBackwards = true;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function (name, fps) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.fps = fps;\n    animation.duration = (animation.end - animation.start) / animation.fps;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function (name, duration) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.duration = duration;\n    animation.fps = (animation.end - animation.start) / animation.duration;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function (name, weight) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.weight = weight;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function (name, time) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.time = time;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function (name) {\n  var time = 0;\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    time = animation.time;\n  }\n\n  return time;\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function (name) {\n  var duration = -1;\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    duration = animation.duration;\n  }\n\n  return duration;\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function (name) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.time = 0;\n    animation.active = true;\n  } else {\n    console.warn(\"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\");\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function (name) {\n  var animation = this.animationsMap[name];\n\n  if (animation) {\n    animation.active = false;\n  }\n};\n\nTHREE.MorphBlendMesh.prototype.update = function (delta) {\n  for (var i = 0, il = this.animationsList.length; i < il; i++) {\n    var animation = this.animationsList[i];\n    if (!animation.active) continue;\n    var frameTime = animation.duration / animation.length;\n    animation.time += animation.direction * delta;\n\n    if (animation.mirroredLoop) {\n      if (animation.time > animation.duration || animation.time < 0) {\n        animation.direction *= -1;\n\n        if (animation.time > animation.duration) {\n          animation.time = animation.duration;\n          animation.directionBackwards = true;\n        }\n\n        if (animation.time < 0) {\n          animation.time = 0;\n          animation.directionBackwards = false;\n        }\n      }\n    } else {\n      animation.time = animation.time % animation.duration;\n      if (animation.time < 0) animation.time += animation.duration;\n    }\n\n    var keyframe = animation.start + THREE.Math.clamp(Math.floor(animation.time / frameTime), 0, animation.length - 1);\n    var weight = animation.weight;\n\n    if (keyframe !== animation.currentFrame) {\n      this.morphTargetInfluences[animation.lastFrame] = 0;\n      this.morphTargetInfluences[animation.currentFrame] = 1 * weight;\n      this.morphTargetInfluences[keyframe] = 0;\n      animation.lastFrame = animation.currentFrame;\n      animation.currentFrame = keyframe;\n    }\n\n    var mix = animation.time % frameTime / frameTime;\n    if (animation.directionBackwards) mix = 1 - mix;\n\n    if (animation.currentFrame !== animation.lastFrame) {\n      this.morphTargetInfluences[animation.currentFrame] = mix * weight;\n      this.morphTargetInfluences[animation.lastFrame] = (1 - mix) * weight;\n    } else {\n      this.morphTargetInfluences[animation.currentFrame] = weight;\n    }\n  }\n}; // Export the THREE object for **Node.js**, with\n// backwards-compatibility for the old `require()` API. If we're in\n// the browser, add `_` as a global object via a string identifier,\n// for Closure Compiler \"advanced\" mode.\n\n\nif (typeof exports !== 'undefined') {\n  if (typeof module !== 'undefined' && module.exports) {\n    exports = module.exports = THREE;\n  }\n\n  exports.THREE = THREE;\n} else {\n  this['THREE'] = THREE;\n}","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n"],"sourceRoot":""}