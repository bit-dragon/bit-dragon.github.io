{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/navigation/navigation.component.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","loader","enqueue","React","createContext","toRouteObject","name","to","enabled","routes","NavigationComponent","react__WEBPACK_IMPORTED_MODULE_1___default","className","rol","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","map","route","gatsby__WEBPACK_IMPORTED_MODULE_2__","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","Layout","children","_public_static_d_856328897_json__WEBPACK_IMPORTED_MODULE_0__","Fragment","_navigation_navigation_component__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"component---src-pages-404-js-1af83b1132746ff29283.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <p>You are traveling to the unknown place...</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\nimport { Link } from \"gatsby\";\nimport './navigation.component.css';\n\nconst toRouteObject = (name, to, enabled) => ({\n  name,\n  to,\n  enabled,\n});\n\nconst routes = [\n  toRouteObject('Home', '/', true),\n  toRouteObject('Map', '/map', true),\n  toRouteObject('Home', '/experience', false),\n];\n\nconst NavigationComponent = () => (\n  <nav className=\"custom-nav navbar navbar-expand-lg navbar-light\" rol=\"navigation\">\n    <a className=\"navbar-brand\" href=\"#\">Bit-Dragon</a>\n\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n        {routes.map((route) => {\n           if (!route.enabled) {\n             return null;\n           }\n\n           return (\n             <li className=\"nav-item active\">\n               <Link className=\"nav-link\" to={route.to}>{route.name}</Link>\n             </li>\n           );\n        })}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default NavigationComponent;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Navigation from \"./navigation/navigation.component\";\nimport \"./layout.css\";\nimport \"./layout.scss\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div className=\"fixed-container\">\n        <div className=\"stars\"></div>\n        <div className=\"twinkling\"></div>\n        <div className=\"clouds\"></div>\n      </div>\n      <div className=\"fixed-container overflow-auto\">\n        <div className=\"container\">\n          <Navigation />\n          <main>{children}</main>\n        </div>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}