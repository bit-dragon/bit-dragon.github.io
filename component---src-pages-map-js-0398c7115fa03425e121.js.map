{"version":3,"sources":["webpack:///./src/components/word-map/word-map.component.js","webpack:///./src/pages/map.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/navigation/navigation.component.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/layout.js"],"names":["Country","_ref","datum","isDone","index","dataLength","name","classNames","console","log","react_default","a","createElement","d","geoPath","projection","geoMercator","scale","translate","WIDTH","HEIGHT","id","className","stroke","strokeWidth","Countries","_ref2","_ref2$data","data","_ref2$visited","visited","map","i","properties","split","join","toLowerCase","word_map_component_Country","key","length","WordMap","_ref3","_ref3$countries","countries","_ref3$visited","width","height","viewBox","word_map_component_Countries","visitedCountries","reduce","country","_Object$assign","Object","assign","IndexPage","_useState","useState","mapData","setMapData","useEffect","feature","wordData","objects","features","layout","seo","title","word_map_component","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","__webpack_exports__","loader","enqueue","React","createContext","gatsby__WEBPACK_IMPORTED_MODULE_1__","NavigationComponent","role","aria-label","to","aria-expanded","data-target","aria-hidden","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","Layout","children","_public_static_d_856328897_json__WEBPACK_IMPORTED_MODULE_0__","Fragment","_navigation_navigation_component__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"component---src-pages-map-js-0398c7115fa03425e121.js","sourcesContent":["import React from 'react';\nimport { geoMercator, geoPath } from 'd3-geo';\nimport './word-map.css';\n\nconst WIDTH = 1140;\nconst HEIGHT = 600;\nconst SCALE = 150;\n\nconst projection = () => geoMercator().scale(SCALE).translate([ WIDTH / 2, HEIGHT / 2 ]);\n\nconst Country = ({ datum, index, dataLength, isDone, name }) => {\n  const classNames = isDone ? 'country visited' : 'country';\n  console.log(typeof classNames);\n  return (\n    <path\n      d={geoPath().projection(projection())(datum)}\n      id={name}\n      className={classNames}\n      stroke=\"#FFFFFF\"\n      strokeWidth={0.5}\n    />\n  );\n}\n\nconst Countries = ({ data = [], visited = {}}) => (\n  <g className=\"countries\">\n    {data.map((d, i) => {\n       const name = d.properties.name.split(' ').join('-').toLowerCase();\n       const isDone = visited[name];\n       return (\n         <Country\n           key={`country-${d.id || i}`}\n           datum={d}\n           index={i}\n           name={name}\n           dataLength={data.length}\n           isDone={isDone} />\n       )\n    })}\n  </g>\n);\n\nconst WordMap = ({ countries = [], visited = {}}) => (\n  <svg className=\"world-map-container\" width={WIDTH} height={HEIGHT} viewBox={`0 0 ${WIDTH} ${HEIGHT}`}>\n    <Countries data={countries} visited={visited} />\n  </svg>\n);\n\nexport default WordMap;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { feature } from 'topojson-client';\nimport WordMap from '../components/word-map/word-map.component';\nimport wordData from '../../assets/countries-110m.json';\n\nconst visitedCountries = [\n  'mexico',\n  'ukraine',\n  'france',\n  'germany',\n  'united-states-of-america',\n  'czech-republic',\n  'poland',\n  'netherlands',\n].reduce((map, country) => ({...map, [country]: true }), {});\n\nconst fontColor = {color: '#F73C4D'};\n\nconst IndexPage = () => {\n  const [mapData, setMapData] = useState([]);\n\n  useEffect(() => {\n    const isEmpty = mapData.length === 0;\n    if (isEmpty) {\n      setMapData(() => feature(wordData, wordData.objects.countries).features);\n    }\n  }, [mapData]);\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className=\"d-flex mt-5 flex-column\">\n        <h3 className=\"text-center\">My Scratch Map</h3>\n        <WordMap countries={mapData} visited={visitedCountries}/>\n      </div>\n    </Layout>\n  );\n}\n\nexport default IndexPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\nimport { Link } from \"gatsby\";\nimport './navigation.component.css';\n\nconst NavigationComponent = () => (\n    <nav className=\"custom-nav navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item is-italic has-text-black-bis has-text-weight-bold\" to=\"/\">bit-dragon</Link>\n\n        <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <Link className=\"navbar-item\" to=\"/\">Home</Link>\n          <Link className=\"navbar-item\" to=\"/curriculum\">Curriculum</Link>\n        </div>\n      </div>\n\n    </nav>\n);\n\nexport default NavigationComponent;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Navigation from \"./navigation/navigation.component\";\nimport \"./layout.css\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Navigation />\n      <div className=\"container is-fluid\">\n        <main>{children}</main>\n        <div className=\"hero-foot\">\n          <div className=\"content has-text-centered\">\n            <p>\n              bit-dragon - 2019\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout;\n"],"sourceRoot":""}