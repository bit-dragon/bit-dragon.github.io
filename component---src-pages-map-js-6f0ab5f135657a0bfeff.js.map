{"version":3,"sources":["webpack:///./src/components/word-map/word-map.component.js","webpack:///./src/pages/map.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/navigation/navigation.component.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/layout.js"],"names":["Country","_ref","datum","isDone","index","dataLength","name","classNames","console","log","react_default","a","createElement","d","geoPath","projection","geoMercator","scale","translate","WIDTH","HEIGHT","id","className","stroke","strokeWidth","Countries","_ref2","_ref2$data","data","_ref2$visited","visited","map","i","properties","split","join","toLowerCase","word_map_component_Country","key","length","WordMap","_ref3","_ref3$countries","countries","_ref3$visited","width","height","viewBox","word_map_component_Countries","visitedCountries","reduce","country","_Object$assign","Object","assign","IndexPage","_useState","useState","mapData","setMapData","useEffect","feature","wordData","objects","features","layout","seo","title","word_map_component","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","__webpack_exports__","loader","enqueue","React","createContext","toRouteObject","to","enabled","routes","NavigationComponent","react__WEBPACK_IMPORTED_MODULE_1___default","rol","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","route","gatsby__WEBPACK_IMPORTED_MODULE_2__","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","Layout","children","_public_static_d_856328897_json__WEBPACK_IMPORTED_MODULE_0__","Fragment","_navigation_navigation_component__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"component---src-pages-map-js-6f0ab5f135657a0bfeff.js","sourcesContent":["import React from 'react';\nimport { geoMercator, geoPath } from 'd3-geo';\nimport './word-map.css';\n\nconst WIDTH = 1140;\nconst HEIGHT = 600;\nconst SCALE = 150;\n\nconst projection = () => geoMercator().scale(SCALE).translate([ WIDTH / 2, HEIGHT / 2 ]);\n\nconst Country = ({ datum, index, dataLength, isDone, name }) => {\n  const classNames = isDone ? 'country visited' : 'country';\n  console.log(typeof classNames);\n  return (\n    <path\n      d={geoPath().projection(projection())(datum)}\n      id={name}\n      className={classNames}\n      stroke=\"#FFFFFF\"\n      strokeWidth={0.5}\n    />\n  );\n}\n\nconst Countries = ({ data = [], visited = {}}) => (\n  <g className=\"countries\">\n    {data.map((d, i) => {\n       const name = d.properties.name.split(' ').join('-').toLowerCase();\n       const isDone = visited[name];\n       return (\n         <Country\n           key={`country-${d.id || i}`}\n           datum={d}\n           index={i}\n           name={name}\n           dataLength={data.length}\n           isDone={isDone} />\n       )\n    })}\n  </g>\n);\n\nconst WordMap = ({ countries = [], visited = {}}) => (\n  <svg className=\"world-map-container\" width={WIDTH} height={HEIGHT} viewBox={`0 0 ${WIDTH} ${HEIGHT}`}>\n    <Countries data={countries} visited={visited} />\n  </svg>\n);\n\nexport default WordMap;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { feature } from 'topojson-client';\nimport WordMap from '../components/word-map/word-map.component';\nimport wordData from '../../assets/countries-110m.json';\n\nconst visitedCountries = [\n  'mexico',\n  'ukraine',\n  'france',\n  'germany',\n  'united-states-of-america',\n  'czech-republic',\n  'poland',\n  'netherlands',\n].reduce((map, country) => ({...map, [country]: true }), {});\n\nconst fontColor = {color: '#F73C4D'};\n\nconst IndexPage = () => {\n  const [mapData, setMapData] = useState([]);\n\n  useEffect(() => {\n    const isEmpty = mapData.length === 0;\n    if (isEmpty) {\n      setMapData(() => feature(wordData, wordData.objects.countries).features);\n    }\n  }, [mapData]);\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className=\"d-flex mt-5 flex-column\">\n        <h3 className=\"text-center\">My Scratch Map</h3>\n        <WordMap countries={mapData} visited={visitedCountries}/>\n      </div>\n    </Layout>\n  );\n}\n\nexport default IndexPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\nimport { Link } from \"gatsby\";\nimport './navigation.component.css';\n\nconst toRouteObject = (name, to, enabled) => ({\n  name,\n  to,\n  enabled,\n});\n\nconst routes = [\n  toRouteObject('Home', '/', true),\n  toRouteObject('Map', '/map', true),\n  toRouteObject('Home', '/experience', false),\n];\n\nconst NavigationComponent = () => (\n  <nav className=\"custom-nav navbar navbar-expand-lg navbar-light\" rol=\"navigation\">\n    <a className=\"navbar-brand\" href=\"#\">Bit-Dragon</a>\n\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n        {routes.map((route) => {\n           if (!route.enabled) {\n             return null;\n           }\n\n           return (\n             <li className=\"nav-item active\">\n               <Link className=\"nav-link\" to={route.to}>{route.name}</Link>\n             </li>\n           );\n        })}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default NavigationComponent;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Navigation from \"./navigation/navigation.component\";\nimport \"./layout.css\";\nimport \"./layout.scss\";\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div className=\"fixed-container\">\n        <div className=\"stars\"></div>\n        <div className=\"twinkling\"></div>\n        <div className=\"clouds\"></div>\n      </div>\n      <div className=\"fixed-container overflow-auto\">\n        <div className=\"container\">\n          <Navigation />\n          <main>{children}</main>\n        </div>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}